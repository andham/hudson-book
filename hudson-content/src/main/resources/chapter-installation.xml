<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="install">
  <title>Installing and Running Hudson</title>

  <section>
    <title>Downloading Hudson</title>

    <para>Content</para>

    <para></para>
  </section>

  <section>
    <title>Installing Hudson</title>

    <para>The following sections detail the installation process for
    Hudson.</para>

    <section id="ci-quickstart-sect-prereq">
      <title>Hudson Prerequisites</title>

      <para>Hudson only has one prerequisite, a <indexterm>
          <primary>Java</primary>

          <secondary>Java Runtime Environment (JRE)</secondary>
        </indexterm>Java Runtime Environment (JRE) compatible with Java 5 or
      higher. Hudson is most often run with the JRE that is bundled with a
      <indexterm>
          <primary>Java</primary>

          <secondary>Java Development Kit (JDK)</secondary>
        </indexterm>Java Development Kit (JDK) installation, and it can be run
      with the latest version of Oracle's JDK of Java 5 or Java 6. To download
      the latest release of the Oracle JDK, go to <ulink
      url="http://www.oracle.com/technetwork/java/javase/downloads/index.html"><indexterm>
          <primary>Java</primary>

          <secondary>Java Development Kit</secondary>

          <tertiary>downloading</tertiary>
        </indexterm>http://www.oracle.com/technetwork/java/javase/downloads/index.html</ulink>,
      and download the latest Java 6 JDK or an older Java 5 JDK, either will
      work but Java 6 is recommended.

      <!-- TODO we should add that it also works fine with OpenJDK -->
      <!-- TODO we should document how a user can figure out if they got Java already installed
 -->
      </para>
    </section>

    <!-- TODO from here on it seems that all the documentation is the Nexus documentation
    with Nexus replaced with Hudson. That is however not the case so this has to be rewritten
    and it has to cover the install with the .war file as well as with the native packages -->
    <section id="ci-quickstart-sect-pro">
      <title>Installing Hudson</title>

      <para>The following instructions are for installing Hudson as a
      stand-alone server. Hudson is bundled with a Jetty instance which
      listens to all configured IP addresses on a host (0.0.0.0) and runs on
      port 8082 by default.</para> <!-- TODO its 8080 for me.. probably just a typo here -->

      <para><indexterm>
          <primary>Hudson</primary>

          <secondary>downloading</secondary>
        </indexterm><indexterm>
          <primary>Hudson</primary>

          <secondary>installation</secondary>
        </indexterm>

        <!-- TODO I believe the following to be wrong, there is no tar.gz file or so by default,
        just the war..
        -->Installing Hudson is
        straightforward -
        just
        unpack
        the Hudson
      distribution archive in a directory. If you are installing Hudson on a
      local workstation to give it a test run, you can install it in your home
      directory or wherever you like; Hudson doesn't have any hard coded
      directories, it will run from any directory. If you downloaded the
      <acronym>ZIP</acronym> archive, run:</para>

      <!-- TODO should we create a property in maven or a variable in docbook for the hudson version number
      so that we can just replace it in one place to stay up to date?  -->

      <screen>$ <command>unzip hudson-1.396.zip</command></screen>

      <para>And, if you download the GZip'd <acronym>TAR</acronym> archive,
      run:</para>

      <screen>$ <command>tar xvzf hudson-1.396.tgz</command></screen>

      <para><indexterm>
          <primary>Hudson</primary>
           <!-- TODO isnt /opt a better place? -->
          <secondary>installation directory</secondary>
        </indexterm>If you are installing Hudson on a server, you might want
      to use a directory other than your home directory. On a Unix machine,
      this book assumes that Hudson is installed in
      <filename>/usr/local/hudson-1.396</filename> with a symbolic link
      <filename>/usr/local/hudson</filename> to the hudson-1.396 directory.
      Using a symbolic link hudson to a directory which holds a specific
      version of Hudson is a common practice that makes it easier to upgrade
      to a newer version of Hudson.</para>

      <screen>$ <command>sudo cp hudson-1.396.tgz /usr/local</command>
$ <command>cd /usr/local</command>
$ <command>sudo tar xvzf hudson-1.396.tgz</command>
$ <command>ln -s hudson-1.396 hudson</command></screen>

      <para><indexterm>
          <primary>Environment Variables</primary>

          <secondary>HUDSON_HOME</secondary>
        </indexterm>Although it isn't required for Hudson to run, you may want
      to set an environment variable <varname>HUDSON_HOME</varname> in your
      environment which points to the installation directory of Hudson. This
      chapter will refer to this location as
      <varname>\${HUDSON_HOME}</varname>. The Hudson installation directory
      <filename>hudson-1.396</filename> has a sibling directory named
      <filename>sonatype-work</filename>. This directory contains all of the
      builds and configuration data for Hudson and is stored outside of the
      Hudson installation directory to make it easier to upgrade to a newer
      version of Hudson.</para>
    </section>

    <section id="ci-quickstart-sect-running">
      <title>Running Hudson</title>

      <para><indexterm>
          <primary>Hudson</primary>

          <secondary>running</secondary>
        </indexterm>When you start Hudson, you are starting a web server on
      the default port of <varname>localhost:8082</varname>. Hudson runs
      within a servlet container called <indexterm>
          <primary>Jetty</primary>
        </indexterm>Jetty and it is started with a native service wrapper
      called the <ulink
      url="http://wrapper.tanukisoftware.org/doc/english/introduction.html">Tanuki
      Java Service Wrapper</ulink>. This service wrapper can be configured to
      run Hudson as a <indexterm>
          <primary>Windows service</primary>
        </indexterm>Windows service or a Unix daemon. To start Hudson, you
      will need to find the appropriate startup script for your platform. To
      see the list of available platforms, list the contents of the
      <filename>\${HUDSON_HOME}/bin/jsw</filename> directory.</para>

      <para>The following example listing starts Hudson using the script for
      <indexterm>
          <primary>Installation</primary>

          <secondary>on Mac OSX</secondary>
        </indexterm>Mac OSX. First we list the contents of the
      <filename>\${HUDSON_HOME}/bin/jsw</filename> to show you the available
      platforms, then we make the contents of the bin directory executable
      with <command>chmod</command>. The Mac OS X wrapper is started with a
      call to <command>hudson start</command>, and then we tail the
      <filename>wrapper.log</filename> in
      <filename>\${HUDSON_HOME}/logs</filename>. Hudson will initialize itself
      and print a message stating what IP address and port it is listening
      on.</para>

      <screen>$ <command>cd /usr/local/hudson</command>
$ <command>ls ./bin/jsw/</command>
conf/                linux-x86-32/        solaris-sparc-32/
lib/                 linux-x86-64/        solaris-sparc-64/
license/             macosx-universal-32/ solaris-x86-32/
linux-ppc-64/        macosx-universal-64/ windows-x86-32/
$ <command>chmod -R a+x bin</command>
$ <command>./bin/jsw/macosx-universal-64/hudson start</command>
Starting Hudson...
Started Hudson.
$ <command>tail -f logs/wrapper.log</command> 
INFO  ... [ServletContainer:default] - SelectChannelConnector@0.0.0.0:8082
</screen>

      <para>At this point, Hudson will be running and listening on all IP
      addresses (0.0.0.0) that are configured for the current host on port
      8082. To use Hudson, fire up a web browser and type in the URL: <ulink
      url="http://localhost:8082/matrix">http://localhost:8082/hudson</ulink>.
      While we use "localhost" throughout this book, you may need to use the
      IP Loopback Address of "127.0.0.1" or the IP address assigned to the
      machine running Hudson.</para>

      <figure floatstyle="" id="fig-ci-quickstart-app-win">
        <title>Hudson Application Window</title>

        <screenshot>
          <mediaobject>
            <imageobject role="web">
              <imagedata align="center"
                         fileref="figs/web/ci-using-sonatype-matrix.png" />
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/ci-using-sonatype-matrix.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>
    </section>
  </section>

  <section>
    <title>Configuring Hudson as a Service</title>

    <para>When installing Hudson, you will often want to configure Hudson as a
    service. <indexterm>
        <primary>Windows service</primary>
      </indexterm>If you are on Windows, the Hudson distribution includes
    binaries that can work with the Windows Services subsystem and if you are
    on another platform such as Linux, <indexterm>
        <primary>Unix startup scripts</primary>
      </indexterm>Hudson also includes scripts that can be configured to start
    Hudson as a service. The following sections provide instructions for
    configuring Hudson as a service.</para>

    <section id="ci-quickstart-sect-startup-scripts">
      <title>Startup Scripts for Linux</title>

      <para><indexterm>
          <primary>Installation</primary>

          <secondary>Unix startup scripts</secondary>
        </indexterm>You can configure Hudson to start automatically, by
      copying the <filename>Hudson</filename> script to the
      <filename>/etc/init.d</filename> directory. On a Linux system (tested
      with Redhat, Fedora, Ubuntu, or CentOS) perform the following operations
      as the root user:</para>

      <orderedlist>
        <listitem>
          <para>Copy either
          <filename>\${MATRIX_HOME}/bin/jsw/linux-ppc-64/matrix</filename>,
          <filename>\${MATRIX_HOME}/bin/jsw/linux-x86-32/matrix</filename>, or
          <filename>\${MATRIX_HOME}/bin/jsw/linux-x86-64/matrix</filename> to
          <filename>/etc/init.d/matrix</filename>.</para>
        </listitem>

        <listitem>
          <para>Make the <filename>/etc/init.d/matrix</filename> script
          executable—<command>chmod 755 /etc/init.d/matrix</command></para>
        </listitem>

        <listitem>
          <para>Edit this script changing the following variables:</para>

          <itemizedlist>
            <listitem>
              <para>Change <varname>APP_NAME</varname> to "matrix"</para>
            </listitem>

            <listitem>
              <para>Change <varname>APP_LONG_NAME</varname> to "Hudson"</para>
            </listitem>

            <listitem>
              <para>Add a variable <varname>MATRIX_HOME</varname> which points
              to your Hudson installation directory</para>
            </listitem>

            <listitem>
              <para>Add a variable <varname>PLATFORM</varname> which contains
              either <varname>linux-x86-32</varname>,
              <varname>linux-x86-64</varname>, or
              <varname>linux-ppc-64</varname></para>
            </listitem>

            <listitem>
              <para>Change <varname>WRAPPER_CMD</varname> to
              <filename>\${MATRIX_HOME}/bin/jsw/\${PLATFORM}/wrapper</filename></para>
            </listitem>

            <listitem>
              <para>Change <varname>WRAPPER_CONF</varname> to
              <filename>\${MATRIX_HOME}/bin/jsw/conf/wrapper.conf</filename></para>
            </listitem>

            <listitem>
              <para>Change <varname>PIDDIR</varname> to
              <filename>/var/run</filename>.</para>
            </listitem>

            <listitem>
              <para>Add a <varname>JAVA_HOME</varname> variable which points
              to your local Java installation</para>
            </listitem>

            <listitem>
              <para>Add a <filename>\${JAVA_HOME}/bin</filename> to the
              <varname>PATH</varname></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>(Optional) Set the RUN_AS_USER to "matrix". If you do this,
          you will need to:</para>

          <itemizedlist>
            <listitem>
              <para>Create a Hudson user</para>
            </listitem>

            <listitem>
              <para>Change the Owner and Group of your Hudson install
              directory to matrix</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>If you set the "RUN_AS_USER" variable, you'll have to change
            the "pid" directory to point to a directory where this user has
            read/write permissions. In most Linux distributions, /var/run is
            only writable by root. The properties that would need to be added
            to customize the PID file location is "wrapper.pid". For more
            information about this property and how it would be configured in
            wrapper.conf, see: <ulink
            url="http://wrapper.tanukisoftware.com/doc/english/properties.html">http://wrapper.tanukisoftware.com/doc/english/properties.html</ulink></para>
          </note>
        </listitem>
      </orderedlist>

      <figure id="fig-ci-quickstart_bin-dir-l32">
        <title>Script Directory for 32-bit Linux in
        \${MATRIX_HOME}/bin/jsw</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata align="center"
                       fileref="figs/web/installing_bin-dir-l32.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/installing_bin-dir-l32.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>At the end of this you should have a file in
      <filename>/etc/init.d/matrix</filename> which starts with a series of
      configuration properties which look something like this (assuming that
      you've installed Hudson in <filename>/usr/local/matrix</filename> and
      that you have Java installed in
      <filename>/usr/java/latest</filename>):</para>

      <programlisting>JAVA_HOME=/usr/java/latest
PATH=\${PATH}:\${JAVA_HOME}/bin
APP_NAME="matrix"
APP_LONG_NAME="Hudson"
MATRIX_HOME=/usr/local/matrix
PLATFORM=linux-x86-64
WRAPPER_CMD="\${MATRIX_HOME}/bin/jsw/\${PLATFORM}/wrapper"
WRAPPER_CONF="\${MATRIX_HOME}/bin/jsw/conf/wrapper.conf"
PRIORITY=
PIDDIR="/var/run"
#RUN_AS_USER=matrix
</programlisting>

      <section id="ci-quickstart-sect-redhat-fedora">
        <title>Add Hudson as a Service on Redhat, Fedora, and CentOS</title>

        <para><indexterm>
            <primary>Installation</primary>

            <secondary>Redhat</secondary>
          </indexterm><indexterm>
            <primary>Installation</primary>

            <secondary>Fedora</secondary>
          </indexterm><indexterm>
            <primary>Installation</primary>

            <secondary>CentOS</secondary>
          </indexterm>This script has the appropriate
        <command>chkconfig</command> directives, so all you need to do to add
        Hudson as a service is run the following commands:</para>

        <screen>$ <command>cd /etc/init.d</command>
$ <command>chkconfig --add matrix</command>
$ <command>chkconfig --levels 345 matrix on</command>
$ <command>service matrix start</command>
Starting Hudson...
Started Hudson.
$ <command>tail -f /usr/local/matrix/logs/wrapper.log</command></screen>

        <para>The second command adds Hudson as a service to be started and
        stopped with the <command>service</command> command and managed by the
        <command>chkconfig</command> command. <command>chkconfig</command>
        manages the symbolic links in <filename>/etc/rc[0-6].d</filename>
        which control the services to be started and stopped when the
        operating system restarts or transitions between run-levels. The third
        command adds Hudson to run-levels 3, 4, and 5. The service command
        starts Hudson, and the last command tails the
        <filename>wrapper.log</filename> to verify that Hudson has been
        started successfully. If Hudson has started successfully, you should
        see a message notifying you that Hudson is listening for
        <acronym>HTTP</acronym> connections on a port.</para>
      </section>

      <section id="ci-quickstart-sect-ubntu">
        <title>Add Hudson as a Service on Ubuntu</title>

        <para><indexterm>
            <primary>Installation</primary>

            <secondary>Ubuntu</secondary>
          </indexterm>The process for setting Hudson up as a service on Ubuntu
        differs slightly from the process used on a Redhat variant. Instead of
        running chkconfig, you should run the following sequence of commands
        once you've configured the startup script in
        <filename>/etc/init.d</filename>:</para>

        <screen>$ <command>cd /etc/init.d</command>
$ <command>update-rc.d matrix defaults</command>
$ <command>service matrix start</command>
Starting Hudson...
Started Hudson.
$ <command>tail -f /usr/local/matrix/logs/wrapper.log</command>
</screen>
      </section>
    </section>
  </section>

  <section id="ci-quickstart-sect-upgrading">
    <title>Upgrading Hudson</title>

    <para><indexterm>
        <primary>Hudson</primary>

        <secondary>upgrading</secondary>
      </indexterm>Since Hudson separates it's configuration and data storage
    from the application, it is easy to upgrade an existing Hudson
    installation. To upgrade Hudson, unpack the Hudson archive in the
    directory which contains the existing Hudson installation. Once the
    archive is unpacked, the new Hudson application directory should be a
    sibling to your existing <filename>sonatype-work/</filename> directory. If
    you have defined a symbolic link for the version of Nexus to use, change
    that to point at the new Nexus application directory. When you start the
    new instance of Hudson it will read the existing repository configuration
    from the <filename>sonatype-work/</filename> directory.</para>
  </section>

  <section id="ci-quickstart-sect-behind-proxy">
    <title>Running Hudson Behind a Proxy</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>running behind proxy</secondary>
      </indexterm>If you installed Hudson as a stand-alone application, Hudson
    is running on a high-performance servlet container based on Java NIO. From
    a performance perspective, there is no reason for you not to run Hudson by
    itself without a proxy. Yet, more often than not, organizations run
    applications behind a proxy for security concerns and to consolidate
    applications using tools like <varname>mod_rewrite</varname> and
    <varname>mod_proxy</varname>. For this reason, we've included some brief
    instructions for configuration <varname><indexterm>
        <primary>Apache httpd</primary>

        <secondary>mod_proxy</secondary>
      </indexterm>mod_proxy</varname> in <indexterm>
        <primary>Apache httpd</primary>
      </indexterm>Apache httpd. We assume that you've already installed Apache
    2, and that you are using a Virtual Host for www.somecompany.com.</para>

    <para>Let's assume that you wanted to host Hudson behind Apache HTTPd at
    the <acronym>URL</acronym> <ulink
    url="http://www.somecompany.com">http://www.somecompany.com</ulink>. To do
    this, you'll need to change the context path that Hudson is served
    from.</para>

    <orderedlist>
      <listitem>
        <para>Edit <filename>matrix.xml</filename> in
        <filename>\${MATRIX_HOME}/runtime/apps/matrix/contexts</filename>.
        You'll see an element named <sgmltag>contextPath</sgmltag>. Change
        this value from "/matrix" to "/"</para>
      </listitem>

      <listitem>
        <para>Restart Hudson and verify that it is available on <ulink
        url="http://localhost:8082/">http://localhost:8082/</ulink>.</para>
      </listitem>

      <listitem>
        <para>Clear the Base <acronym>URL</acronym> in Hudson Application
        Server Settings in the administration interface.</para>
      </listitem>
    </orderedlist>

    <para>At this point, edit the HTTPd configuration file for the
    www.somecompany.com virtual host. Include the following to expose Hudson
    via <varname>mod_proxy</varname> at <ulink
    url="http://www.somecompany.com/">http://www.somecompany.com/</ulink>.</para>

    <programlisting>ProxyRequests Off 
ProxyPreserveHost On 

&lt;VirtualHost *:80&gt; 
  ServerName www.somecompany.com 
  ServerAdmin admin@somecompany.com 
  ProxyPass / http://localhost:8082/
  ProxyPassReverse / http://localhost:8082/
  ErrorLog logs/somecompany/matrix/error.log 
  CustomLog logs/somecompany/matrix/access.log common 
&lt;/VirtualHost&gt;</programlisting>

    <para>If you just wanted to continue to serve Hudson at the
    <filename>/matrix</filename> context path, you would not change the
    <sgmltag>contextPath</sgmltag> in
    <filename>\${MATRIX_HOME}/runtime/apps/matrix/contexts</filename> and you
    would include the context path in your <varname>ProxyPass</varname> and
    <varname>ProxyPassReverse</varname> directives as follows:</para>

    <programlisting>  ProxyPass /matrix/ http://localhost:8082/matrix/
  ProxyPassReverse /matrix/ http://localhost:8082/matrix/
</programlisting>

    <para>Apache configuration is going to vary based on your own
    application's requirements and the way you intend to expose Hudson to the
    outside world. If you need more details about Apache httpd and
    <varname>mod_proxy</varname>, please see <ulink
    url="http://httpd.apache.org">http://httpd.apache.org</ulink>.</para>
  </section>

  <section>
    <title>Hudson Directories</title>

    <para><indexterm>
        <primary>Hudson directories</primary>
      </indexterm>The following sections describe the various directories that
    are a part of any Hudson installation. When you install Hudson, you are
    creating two directories: a directory which contains the Hudson runtime
    and application, and a directory which contains your own configuration and
    data. When you upgrade to a newer version of Hudson, you replace the
    Hudson application directory and retain all of your own custom
    configuration and repository data in
    <filename>sonatype-work/</filename>.</para>

    <section id="sect-ci-quickstart-work-dir">
      <title>Hudson Work Directory</title>

      <para><indexterm>
          <primary>Sonatype work directory</primary>
        </indexterm>The <filename>sonatype-work/</filename> directory is
      installed as a sibling to the Hudson application directory, and the
      location of this directory can be configured via the
      <filename>plexus.properties</filename> file which is described in <xref
      linkend="sect-installing-conf-dir" />. <xref
      linkend="fig-installing_work-dir" xrefstyle="select:label" /> shows the
      Hudson work directory with the <filename>conf/</filename> directory
      expanded.</para>

      <figure id="fig-ci-quickstart_work-dir">
        <title>The Hudson Work Directory</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata align="center"
                       fileref="figs/web/installing_work-dir.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/installing_work-dir.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Hudson work directory contains the following
      subdirectories:</para>

      <variablelist>
        <varlistentry>
          <term><filename>backup/</filename></term>

          <listitem>
            <para><indexterm>
                <primary>configuration backups</primary>
              </indexterm>If you have configured a scheduled job to backup
            Hudson configuration, this directory is going to contain a number
            of ZIP archives that contain snapshots of Hudson configuration.
            Each ZIP file contains the contents of the
            <filename>conf/</filename> directory. (Automated backups are a
            feature of Hudson.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>conf/</filename></term>

          <listitem>
            <para><indexterm>
                <primary>Hudson configuration</primary>
              </indexterm>This directory contains the Hudson configuration.
            Settings that define the list of Hudson repositories, the logging
            configuration, the staging and procurement configuration, and the
            security settings are all captured in this directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>indexer/</filename></term>

          <listitem>
            <para>Contains a Hudson index for all repositories and repository
            groups managed by Hudson. A Hudson index is a Lucene index which
            is the standard for indexing and searching a Maven repository.
            Hudson maintains a local index for all repositories, and can also
            download a Hudson index from remote repositories.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>logs/</filename></term>

          <listitem>
            <para><indexterm>
                <primary>Hudson logs</primary>
              </indexterm><indexterm>
                <primary>log files</primary>
              </indexterm>Stores the <filename>Hudson.log</filename> file: the
            log file that contains information about a running instance of
            Hudson. This directory also contains archived copies of Hudson log
            files. Hudson log files are rotated every day. To reclaim disk
            space, you can delete old log files from the
            <filename>logs/</filename> directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>p2/</filename></term>

          <listitem>
            <para>If you are using the P2 repository management features of
            Hudson, this directory contains a local cache of P2 repository
            artifacts.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>proxy/</filename></term>

          <listitem>
            <para><indexterm>
                <primary>proxy storage directory</primary>
              </indexterm>Stores data about the files contained in a remote
            repository. Each proxy repository has a subdirectory in the
            <filename>proxy/attributes/</filename> directory and every file
            that Hudson has interacted with in the remote repository has an
            XML file which captures such data as the: last requested
            timestamp, the remote URL for a particular file, the length of the
            file, and the digests for a particular file among other things. If
            you need to backup the local cached contents of a proxy
            repository, you should also back up the contents of the proxy
            repository's directory under
            <filename>proxy/attributes/</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>storage/</filename></term>

          <listitem>
            <para>Stores artifacts and metadata for Hudson repositories. Each
            repository is a subdirectory which contains the artifacts in a
            repository. If the repository is a proxy repository, the storage
            directory will contain locally cached artifacts from the remote
            repository. If the repository is a hosted repository, the storage
            directory will contain all artifacts in the repository. If you
            need to backup the contents of a repository, you should backup the
            contents of the storage directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>template-store/</filename></term>

          <listitem>
            <para>Contains templates for default repositories. If you examine
            the XML files in this directory, you will see that they contain
            default templates for each different type of repository. For
            example, the
            <filename>repository-default_proxy_release.xml</filename> file
            contains defaults for a Proxy repository with a release
            policy.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>timeline/</filename></term>

          <listitem>
            <para>Contains an index which Hudson uses to store events and
            other information to support internal operations. Hudson uses this
            index to store feeds and history.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>trash/</filename></term>

          <listitem>
            <para><indexterm>
                <primary>trash directory</primary>
              </indexterm>If you have configured scheduled jobs to remove
            snapshot artifacts or to delete other information from
            repositories, the deleted data will be stored in this directory.
            To empty this trash folder, view a list of Hudson repositories,
            and then click on the Trash icon in the Hudson user
            interface.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <filename>conf/</filename> directory contains a number of
      files which allow for configuration and customization of Hudson. All of
      the files contained in this directory are altered by the Hudson
      administrative user interface. While you can change the configuration
      settings contained in these files with a text editor, Sonatype
      recommends that you modify the contents of these files using the Hudson
      administrative user interface.</para>

      <variablelist>
        <varlistentry>
          <term>l<filename>og4j.properties</filename></term>

          <listitem>
            <para><indexterm>
                <primary>log configuration</primary>
              </indexterm>Contains Log4J configuration, if you need to
            customize the detail of log messages, the frequency of log file
            rotation, or if you want to connect your own, custom Log4J
            appenders, you would alter this configuration file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>lvo-plugin.xml</filename></term>

          <listitem>
            <para>Contains configuration for the latest version plugin. This
            XML file contains the location of the properties file which Hudson
            queries to check for a newer version of Hudson.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>Hudson.xml</filename></term>

          <listitem>
            <para>The bulk of the configuration of Hudson is contained in this
            file. This file maintains a list of repositories, and all
            server-wide configuration like the SMTP settings, security realms,
            repository groups, targets, and path mappings.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>pgp.xml</filename></term>

          <listitem>
            <para>Contains PGP key server configuration.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>Hudson-obr-plugin.properties</filename></term>

          <listitem>
            <para>Contains configuration for the Hudson OSGi Bundle repository
            plugin in Hudson.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>procurement.xml</filename></term>

          <listitem>
            <para>Contains configuration for the Hudson Procurement plugin in
            Hudson.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>security.xml</filename></term>

          <listitem>
            <para>Contains security information about users and roles in
            Hudson.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>staging.xml</filename></term>

          <listitem>
            <para>Contains configuration for the Hudson Staging plugin in
            Hudson.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="sect-ci-quickstart-conf-dir">
      <title>Hudson Configuration Directory</title>

      <para><indexterm>
          <primary>configuration directory</primary>
        </indexterm>After installing Hudson, you will have a
      <filename>${matrix.version.name}/</filename> directory and a
      <filename>sonatype-work/</filename> directory, and after installing
      Hudson, you will have a <filename>${matrix.version.name}/</filename>
      directory and a <filename>sonatype-work/</filename> directory. This
      section details the contents of the <filename>conf</filename> directory
      that is shown in <xref linkend="fig-installing_conf-dir"
      xrefstyle="select:label" />. This directory contains configuration for
      the Jetty servlet container. You will only need to modify the files in
      this directory if you are customizing the configuration of <indexterm>
          <primary>Plexus</primary>
        </indexterm>Plexus, the <indexterm>
          <primary>Jetty</primary>
        </indexterm>Jetty servlet container, or the behavior of the scripts
      that start Hudson.</para>

      <figure id="fig-ci-quickstart_conf-dir">
        <title>Hudson Configuration Directory</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata align="center"
                       fileref="figs/web/installing_conf-dir.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/installing_conf-dir.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The files and folders contained in this directory are:</para>

      <variablelist>
        <varlistentry>
          <term><filename>classworlds.conf</filename></term>

          <listitem>
            <para>Defines the order in which resources and classes are loaded
            from the classpath. It is unlikely that even the most advanced
            ${product.ci.name} users will ever need to customize the contents
            of this file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>plexus.properties</filename></term>

          <listitem>
            <para>This file contains configuration variables which control the
            behavior of Plexus and the Jetty servlet container. If you are
            customizing the port and host that ${product.ci.name} will listen
            to, you would change the <varname>application-port</varname> and
            <varname>application-host</varname> properties defined in this
            file. If you wanted to customize the location of the Sonatype work
            directory, you would modify the value of the
            <varname>${product.ci.name}-work</varname> property in this
            configuration file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>plexus.xml</filename></term>

          <listitem>
            <para><indexterm>
                <primary>Plexus</primary>

                <secondary>configuration</secondary>
              </indexterm>Defines the class names and configuration of
            components which are loaded by Plexus at startup. This file should
            never be changed as all configurable values have been removed from
            this file and placed in
            <filename>plexus.properties</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>wrapper.conf</filename></term>

          <listitem>
            <para><indexterm>
                <primary>Java Service Wrapper</primary>

                <secondary>configuration</secondary>
              </indexterm>Contains configuration for the Java Service Wrapper.
            This file contains options that are passed to the JVM, the size of
            the JVM heap, and maximum size of any log files created by the
            Java Service Wrapper. If you need to affect the JVM or the way in
            which ${product.ci.name} is started, this file you should
            change.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty.xml</filename></term>

          <listitem>
            <para><indexterm>
                <primary>Jetty</primary>

                <secondary>configuration</secondary>
              </indexterm>If this file is present in the
            <filename>conf/</filename> directory, it will be used to configure
            Jetty.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <filename>conf/examples/</filename> directory contains sample
      Jetty configuration files which can be used to customize the behavior of
      the Jetty servlet container:</para>

      <variablelist>
        <varlistentry>
          <term><filename>jetty.xml</filename></term>

          <listitem>
            <para>contains a <filename>jetty.xml</filename> sample with no
            customizations. This sample file listens on the
            <varname>\${application-port}</varname> defined in
            <filename>plexus.properties</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-ajp.xml</filename></term>

          <listitem>
            <para>Contains a <filename>jetty.xml</filename> sample which will
            configure ${product.ci.name} to listen on an AJP port 8009. This
            configuration can be used if you are proxying your
            ${product.ci.name} server with web server which understands the
            AJP protocol such as Apache httpd with the mod_proxy_ajp
            module.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-dual-ports-with-ssl.xml</filename></term>

          <listitem>
            <para>Contains a <filename>jetty.xml</filename> sample which
            configures ${product.ci.name} to listen on both the
            <varname>\${application-port}</varname> and
            <varname>\${application-port-ssl}</varname> (as defined in
            <filename>plexus.properties</filename>). This sample configuration
            also contains the SSL redirect rule.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-faster-windows.xml</filename></term>

          <listitem>
            <para>Contains a <filename>jetty.xml</filename> sample which
            configures a response buffer size that will address performance
            issues on Windows 2003 Server, for more information about this fix
            see <ulink
            url="http://docs.codehaus.org/display/JETTY/Slow+Win2003">the
            Jetty Wiki</ulink>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-header-buffer.xml</filename></term>

          <listitem>
            <para>Contains a <filename>jetty.xml</filename> sample which
            increases the <varname>headerBufferSize</varname> to 8k from the
            default of 4k. Documentation about the header buffer size can be
            found on <ulink
            url="http://docs.codehaus.org/display/JETTY/Configuring+Connector">the
            Jetty Wiki</ulink>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-simple-https-proxy.xml</filename></term>

          <listitem>
            <para>Contains a <filename>jetty.xml</filename> sample which
            should be used if you are proxying a ${product.ci.name} instance
            with a web server that is handling SSL. For example, if you were
            proxying ${product.ci.name} with Apache httpd server using mod_ssl
            you would use this configuration to configure the Jetty
            <classname>RewriteHandler</classname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-ssl.xml</filename></term>

          <listitem>
            <para>Contains a <filename>jetty.xml</filename> sample which will
            only serve SSL encrypted content from
            <varname>\${application-port}</varname> (as defined in
            <filename>plexus.properties</filename>).</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <filename>conf/examples/proxy-https/</filename> directory
      contains two files: <filename>apache2.conf</filename> and
      <filename>jetty.xml</filename>. <filename>apache2.conf</filename>
      contains sample <indexterm>
          <primary>Apache httpd</primary>

          <secondary>mod_ssl</secondary>
        </indexterm>mod_ssl and <indexterm>
          <primary>Apache httpd</primary>

          <secondary>mod_proxy</secondary>
        </indexterm>mod_proxy directives to configure Apache httpd to handle
      <indexterm>
          <primary>Secure Sockets Layer (SSL)</primary>
        </indexterm><indexterm>
          <primary>Transport Layer Security (TLS)</primary>
        </indexterm>SSL, and <filename>jetty.xml</filename> contains the
      required Jetty configuration to configure ${product.ci.name} to operate
      behind a proxy that is handling SSL.</para>
    </section>
  </section>
</chapter>
