<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-install">
  <title>Installing and Running Hudson</title>

  <para>The following sections detail the installation process for Hudson.
  </para>

  <section id="section-install-preprequisites">
    <title>Hudson Prerequisites</title>

    <para>Hudson only has one prerequisite, a
      <indexterm>
        <primary>Java</primary>
        <secondary>Java Runtime Environment (JRE)</secondary>
      </indexterm>
      Java Runtime Environment (JRE) compatible with Java 5 or higher. Hudson is
      most often run with the JRE that is bundled with a
      <indexterm>
        <primary>Java</primary>

        <secondary>Java Development Kit (JDK)</secondary>
      </indexterm>
      Java Development Kit (JDK) installation. We recommend to use the latest
      version of the JDK/JRE that comes as part of your operating system.
    </para>

    <para>It can be run with the latest version of Oracle's JDK of Java 5 or
      Java 6. To download the latest release of the Oracle JDK, go to
      <ulink
          url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">
        <indexterm>
          <primary>Java</primary>
          <secondary>Java Development Kit</secondary>
          <tertiary>downloading</tertiary>
        </indexterm>
        http://www.oracle.com/technetwork/java/javase/downloads/index.html
      </ulink>
      , and download the latest Java 6 JDK or an older Java 5 JDK, either will
      work but Java 6 is recommended.
    </para>

    <para>OpenJDK as available with many Linux distributions as part of their
      package system is fully supported as a runtime for Hudson. Hudson is also
      known to work with other JVM implementations such HP-UX JDK and IBM JDK.
    </para>
  </section>

  <section id="section-install-war">
    <title>Installing Hudson with the WAR File Distribution</title>

    <para>The following instructions are for installing Hudson as a stand-alone
      server. Hudson is bundled with a Jetty instance which listens to all
      configured IP addresses on a host (0.0.0.0) and runs on port 8080 by
      default.
    </para>

    <para>
      <indexterm>
        <primary>Hudson</primary>
        <secondary>downloading</secondary>
      </indexterm>
      <indexterm>
        <primary>Hudson</primary>
        <secondary>installation</secondary>
      </indexterm>

      Installing Hudson is straightforward - just unpack the Hudson distribution
      archive in a directory. If you are installing Hudson on a local
      workstation to give it a test run, you can install it in your home
      directory or wherever you like; Hudson doesn't have any hard coded
      directories, it will run from any directory. If you downloaded the
      <acronym>ZIP</acronym>
      archive, run:
    </para>

    <screen>$
      <command>unzip hudson-1.396.zip</command>
    </screen>

    <para>And, if you download the GZip'd
      <acronym>TAR</acronym>
      archive, run:
    </para>

    <screen>$
      <command>tar xvzf hudson-1.396.tgz</command>
    </screen>

    <para>
      <indexterm>
        <primary>Hudson</primary>

        <!-- TODO isnt /opt a better place? -->

        <secondary>installation directory</secondary>
      </indexterm>
      If you are installing Hudson on a server, you might want to use a
      directory other than your home directory. On a Unix machine, this book
      assumes that Hudson is installed in
      <filename>/usr/local/hudson-1.396</filename>
      with a symbolic link
      <filename>/usr/local/hudson</filename>
      to the hudson-1.396 directory. Using a symbolic link hudson to a directory
      which holds a specific version of Hudson is a common practice that makes
      it easier to upgrade to a newer version of Hudson.
    </para>

    <screen>$
      <command>sudo cp hudson-1.396.tgz /usr/local</command>
      $
      <command>cd /usr/local</command>
      $
      <command>sudo tar xvzf hudson-1.396.tgz</command>
      $
      <command>ln -s hudson-1.396 hudson</command>
    </screen>

    <para>
      <indexterm>
        <primary>Environment Variables</primary>

        <secondary>HUDSON_HOME</secondary>
      </indexterm>
      Although it isn't required for Hudson to run, you may want to set an
      environment variable
      <varname>HUDSON_HOME</varname>
      in your environment which points to the installation directory of Hudson.
      This chapter will refer to this location as
      <varname>\${HUDSON_HOME}</varname>. The Hudson installation directory
      <filename>hudson-1.396</filename>
      has a sibling directory named
      <filename>sonatype-work</filename>. This directory contains all of the
      builds and configuration data for Hudson and is stored outside of the
      Hudson installation directory to make it easier to upgrade to a newer
      version of Hudson.
    </para>
  </section>

  <section id="section-install-deb">
    <title>Installing Hudson on Ubuntu/Debian</title>

    <para>Ubuntu 10.04 LTS and Ubuntu 11.04, Debian X</para>

    <procedure>
      <step>
        <para>Install a JDK. Either OpenJDK or the Oracle JDK.</para>
      </step>

      <step>
        <para>Update APT Repositories</para>
      </step>

      <step>
        <para>Install the daemon package</para>
      </step>

      <step>
        <para>Download the deb from Hudson</para>
      </step>

      <step>
        <para>Install the package using dpkg</para>
      </step>
    </procedure>
  </section>

  <section id="section-install-oracle">
    <title>Installing Hudson on Oracle Linux</title>

  </section>

  <section id="section-install-rpm">
    <title>Installing Hudson on Redhat Enterprise Linux, CentOS and Fedora
    </title>

    <para>Installing Hudson on Redhat Enterprise Linux 5.5 and CentOS 5.5,
      Fedora 15
    </para>
  </section>



      <!-- TODO add OpenSUSE documentation at a later stage -->
      <!--<section id="section-install-opensuse">-->
        <!--<title>Installing Hudson on OpenSUSE</title>-->

      <!--</section>-->

  <section>
      <para><indexterm>
          <primary>Hudson</primary>

          <secondary>running</secondary>
        </indexterm>When you start Hudson, you are starting a web server on
      the default port of <varname>localhost:8082</varname>. Hudson runs
      within a servlet container called <indexterm>
          <primary>Jetty</primary>
        </indexterm>Jetty and it is started with a native service wrapper
      called the <ulink
      url="http://wrapper.tanukisoftware.org/doc/english/introduction.html">Tanuki
      Java Service Wrapper</ulink>. This service wrapper can be configured to
      run Hudson as a <indexterm>
          <primary>Windows service</primary>
        </indexterm>Windows service or a Unix daemon. To start Hudson, you
      will need to find the appropriate startup script for your platform. To
      see the list of available platforms, list the contents of the
      <filename>\${HUDSON_HOME}/bin/jsw</filename> directory.</para>

      <para>The following example listing starts Hudson using the script for
      <indexterm>
          <primary>Installation</primary>

          <secondary>on Mac OSX</secondary>
        </indexterm>Mac OSX. First we list the contents of the
      <filename>\${HUDSON_HOME}/bin/jsw</filename> to show you the available
      platforms, then we make the contents of the bin directory executable
      with <command>chmod</command>. The Mac OS X wrapper is started with a
      call to <command>hudson start</command>, and then we tail the
      <filename>wrapper.log</filename> in
      <filename>\${HUDSON_HOME}/logs</filename>. Hudson will initialize itself
      and print a message stating what IP address and port it is listening
      on.</para>

      <screen>$ <command>cd /usr/local/hudson</command>
$ <command>ls ./bin/jsw/</command>
conf/                linux-x86-32/        solaris-sparc-32/
lib/                 linux-x86-64/        solaris-sparc-64/
license/             macosx-universal-32/ solaris-x86-32/
linux-ppc-64/        macosx-universal-64/ windows-x86-32/
$ <command>chmod -R a+x bin</command>
$ <command>./bin/jsw/macosx-universal-64/hudson start</command>
Starting Hudson...
Started Hudson.
$ <command>tail -f logs/wrapper.log</command> 
INFO  ... [ServletContainer:default] - SelectChannelConnector@0.0.0.0:8082
</screen>

      <para>At this point, Hudson will be running and listening on all IP
      addresses (0.0.0.0) that are configured for the current host on port
      8082. To use Hudson, fire up a web browser and type in the URL: <ulink
      url="http://localhost:8082/matrix">http://localhost:8082/hudson</ulink>.
      While we use "localhost" throughout this book, you may need to use the
      IP Loopback Address of "127.0.0.1" or the IP address assigned to the
      machine running Hudson.</para>

      <figure floatstyle="" id="fig-ci-quickstart-app-win">
        <title>Hudson Application Window</title>

        <screenshot>
          <mediaobject>
            <imageobject role="web">
              <imagedata align="center"
                         fileref="figs/web/home-job-list.png"/>
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/home-job-list.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>
    </section>

  <section>
    <title>Configuring Hudson as a Service</title>

    <!--TODO: Setting up Hudson as a Service should fall into the various platform-specific sections listed above.   If you are going to install Hudson on CentOS,
I don't want to have to force users to click through a series of pages, I want everything CentOS-specific to show up in a single procedure.

See HBOOK-11-->

    <para>When installing Hudson, you will often want to configure Hudson as a
    service. <indexterm>
        <primary>Windows service</primary>
      </indexterm>If you are on Windows, the Hudson distribution includes
    binaries that can work with the Windows Services subsystem and if you are
    on another platform such as Linux, <indexterm>
        <primary>Unix startup scripts</primary>
      </indexterm>Hudson also includes scripts that can be configured to start
    Hudson as a service. The following sections provide instructions for
    configuring Hudson as a service.</para>

    <section id="ci-quickstart-sect-startup-scripts">
      <title>Startup Scripts for Linux</title>

      <para><indexterm>
          <primary>Installation</primary>

          <secondary>Unix startup scripts</secondary>
        </indexterm>You can configure Hudson to start automatically, by
      copying the <filename>Hudson</filename> script to the
      <filename>/etc/init.d</filename> directory. On a Linux system (tested
      with Redhat, Fedora, Ubuntu, or CentOS) perform the following operations
      as the root user:</para>

      <orderedlist>
        <listitem>
          <para>Copy either
          <filename>\${MATRIX_HOME}/bin/jsw/linux-ppc-64/matrix</filename>,
          <filename>\${MATRIX_HOME}/bin/jsw/linux-x86-32/matrix</filename>, or
          <filename>\${MATRIX_HOME}/bin/jsw/linux-x86-64/matrix</filename> to
          <filename>/etc/init.d/matrix</filename>.</para>
        </listitem>

        <listitem>
          <para>Make the <filename>/etc/init.d/matrix</filename> script
          executable—<command>chmod 755 /etc/init.d/matrix</command></para>
        </listitem>

        <listitem>
          <para>Edit this script changing the following variables:</para>

          <itemizedlist>
            <listitem>
              <para>Change <varname>APP_NAME</varname> to "matrix"</para>
            </listitem>

            <listitem>
              <para>Change <varname>APP_LONG_NAME</varname> to "Hudson"</para>
            </listitem>

            <listitem>
              <para>Add a variable <varname>MATRIX_HOME</varname> which points
              to your Hudson installation directory</para>
            </listitem>

            <listitem>
              <para>Add a variable <varname>PLATFORM</varname> which contains
              either <varname>linux-x86-32</varname>,
              <varname>linux-x86-64</varname>, or
              <varname>linux-ppc-64</varname></para>
            </listitem>

            <listitem>
              <para>Change <varname>WRAPPER_CMD</varname> to
              <filename>\${MATRIX_HOME}/bin/jsw/\${PLATFORM}/wrapper</filename></para>
            </listitem>

            <listitem>
              <para>Change <varname>WRAPPER_CONF</varname> to
              <filename>\${MATRIX_HOME}/bin/jsw/conf/wrapper.conf</filename></para>
            </listitem>

            <listitem>
              <para>Change <varname>PIDDIR</varname> to
              <filename>/var/run</filename>.</para>
            </listitem>

            <listitem>
              <para>Add a <varname>JAVA_HOME</varname> variable which points
              to your local Java installation</para>
            </listitem>

            <listitem>
              <para>Add a <filename>\${JAVA_HOME}/bin</filename> to the
              <varname>PATH</varname></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>(Optional) Set the RUN_AS_USER to "matrix". If you do this,
          you will need to:</para>

          <itemizedlist>
            <listitem>
              <para>Create a Hudson user</para>
            </listitem>

            <listitem>
              <para>Change the Owner and Group of your Hudson install
              directory to matrix</para>
            </listitem>
          </itemizedlist>

          <note>
            <para>If you set the "RUN_AS_USER" variable, you'll have to change
            the "pid" directory to point to a directory where this user has
            read/write permissions. In most Linux distributions, /var/run is
            only writable by root. The properties that would need to be added
            to customize the PID file location is "wrapper.pid". For more
            information about this property and how it would be configured in
            wrapper.conf, see: <ulink
            url="http://wrapper.tanukisoftware.com/doc/english/properties.html">http://wrapper.tanukisoftware.com/doc/english/properties.html</ulink></para>
          </note>
        </listitem>
      </orderedlist>

      <figure id="fig-ci-quickstart_bin-dir-l32">
        <title>Script Directory for 32-bit Linux in
        \${MATRIX_HOME}/bin/jsw</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata align="center"
                       fileref="figs/web/installing_bin-dir-l32.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/installing_bin-dir-l32.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>At the end of this you should have a file in
      <filename>/etc/init.d/matrix</filename> which starts with a series of
      configuration properties which look something like this (assuming that
      you've installed Hudson in <filename>/usr/local/matrix</filename> and
      that you have Java installed in
      <filename>/usr/java/latest</filename>):</para>

      <programlisting>JAVA_HOME=/usr/java/latest
PATH=\${PATH}:\${JAVA_HOME}/bin
APP_NAME="matrix"
APP_LONG_NAME="Hudson"
MATRIX_HOME=/usr/local/matrix
PLATFORM=linux-x86-64
WRAPPER_CMD="\${MATRIX_HOME}/bin/jsw/\${PLATFORM}/wrapper"
WRAPPER_CONF="\${MATRIX_HOME}/bin/jsw/conf/wrapper.conf"
PRIORITY=
PIDDIR="/var/run"
#RUN_AS_USER=matrix
</programlisting>

      <section id="ci-quickstart-sect-redhat-fedora">
        <title>Add Hudson as a Service on Redhat, Fedora, and CentOS</title>

        <para><indexterm>
            <primary>Installation</primary>

            <secondary>Redhat</secondary>
          </indexterm><indexterm>
            <primary>Installation</primary>

            <secondary>Fedora</secondary>
          </indexterm><indexterm>
            <primary>Installation</primary>

            <secondary>CentOS</secondary>
          </indexterm>This script has the appropriate
        <command>chkconfig</command> directives, so all you need to do to add
        Hudson as a service is run the following commands:</para>

        <screen>$ <command>cd /etc/init.d</command>
$ <command>chkconfig --add matrix</command>
$ <command>chkconfig --levels 345 matrix on</command>
$ <command>service matrix start</command>
Starting Hudson...
Started Hudson.
$ <command>tail -f /usr/local/matrix/logs/wrapper.log</command></screen>

        <para>The second command adds Hudson as a service to be started and
        stopped with the <command>service</command> command and managed by the
        <command>chkconfig</command> command. <command>chkconfig</command>
        manages the symbolic links in <filename>/etc/rc[0-6].d</filename>
        which control the services to be started and stopped when the
        operating system restarts or transitions between run-levels. The third
        command adds Hudson to run-levels 3, 4, and 5. The service command
        starts Hudson, and the last command tails the
        <filename>wrapper.log</filename> to verify that Hudson has been
        started successfully. If Hudson has started successfully, you should
        see a message notifying you that Hudson is listening for
        <acronym>HTTP</acronym> connections on a port.</para>
      </section>

      <section id="ci-quickstart-sect-ubntu">
        <title>Add Hudson as a Service on Ubuntu</title>

        <para><indexterm>
            <primary>Installation</primary>

            <secondary>Ubuntu</secondary>
          </indexterm>The process for setting Hudson up as a service on Ubuntu
        differs slightly from the process used on a Redhat variant. Instead of
        running chkconfig, you should run the following sequence of commands
        once you've configured the startup script in
        <filename>/etc/init.d</filename>:</para>

        <screen>$ <command>cd /etc/init.d</command>
$ <command>update-rc.d matrix defaults</command>
$ <command>service matrix start</command>
Starting Hudson...
Started Hudson.
$ <command>tail -f /usr/local/matrix/logs/wrapper.log</command>
</screen>
      </section>
             </section>
    </section>

  <section id="ci-quickstart-sect-upgrading">
    <title>Upgrading Hudson</title>

    <para><indexterm>
        <primary>Hudson</primary>

        <secondary>upgrading</secondary>
      </indexterm>Since Hudson separates it's configuration and data storage
    from the application, it is easy to upgrade an existing Hudson
    installation. To upgrade Hudson, unpack the Hudson archive in the
    directory which contains the existing Hudson installation. Once the
    archive is unpacked, the new Hudson application directory should be a
    sibling to your existing <filename>sonatype-work/</filename> directory. If
    you have defined a symbolic link for the version of Nexus to use, change
    that to point at the new Nexus application directory. When you start the
    new instance of Hudson it will read the existing repository configuration
    from the <filename>sonatype-work/</filename> directory.</para>

    <!--TODO: See HBOOK-12 - this section needs massive expansion-->
  </section>

  <section id="ci-quickstart-sect-behind-proxy">
    <title>Running Hudson Behind a Proxy</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>running behind proxy</secondary>
      </indexterm>If you installed Hudson as a stand-alone application, Hudson
    is running on a high-performance servlet. From
    a performance perspective, there is no reason for you not to run Hudson by
    itself without a proxy. Yet, more often than not, organizations run
    applications behind a proxy for security concerns and to consolidate
    applications using tools like <varname>mod_rewrite</varname> and
    <varname>mod_proxy</varname>. For this reason, we've included some brief
    instructions for configuration <varname><indexterm>
        <primary>Apache httpd</primary>

        <secondary>mod_proxy</secondary>
      </indexterm>mod_proxy</varname> in <indexterm>
        <primary>Apache httpd</primary>
      </indexterm>Apache httpd. We assume that you've already installed Apache
    2, and that you are using a Virtual Host for www.somecompany.com.</para>

    <para>Let's assume that you wanted to host Hudson behind Apache HTTPd at
    the <acronym>URL</acronym> <ulink
    url="http://www.somecompany.com">http://www.somecompany.com</ulink>. To do
    this, you'll need to change the context path that Hudson is served
    from.</para>




    <orderedlist>
      <listitem>
        <para> Need to explain how to run Hudson in the root context here </para>
      </listitem>

      <listitem>
        <para>Restart Hudson and verify that it is available on <ulink
        url="http://localhost:8080/">http://localhost:8080/</ulink>.</para>
      </listitem>

      <listitem>
        <para>Clear the Base <acronym>URL</acronym> in Hudson Application
        Server Settings in the administration interface.</para>
      </listitem>
    </orderedlist>

    <para>At this point, edit the HTTPd configuration file for the
    www.somecompany.com virtual host. Include the following to expose Hudson
    via <varname>mod_proxy</varname> at <ulink
    url="http://www.somecompany.com/">http://www.somecompany.com/</ulink>.</para>

    <programlisting>ProxyRequests Off 
ProxyPreserveHost On 

&lt;VirtualHost *:80&gt; 
  ServerName www.somecompany.com 
  ServerAdmin admin@somecompany.com 
  ProxyPass / http://localhost:8080/
  ProxyPassReverse / http://localhost:8080/
  ErrorLog logs/somecompany/hudson/error.log
  CustomLog logs/somecompany/hudson/access.log common
&lt;/VirtualHost&gt;</programlisting>

    <para>If you just wanted to continue to serve Hudson at the
    <filename>/hudson</filename> context path, you
    would include the context path in your <varname>ProxyPass</varname> and
    <varname>ProxyPassReverse</varname> directives as follows:</para>

    <programlisting>  ProxyPass /matrix/ http://localhost:8082/matrix/
  ProxyPassReverse /matrix/ http://localhost:8082/matrix/
</programlisting>

    <para>Apache configuration is going to vary based on your own
    application's requirements and the way you intend to expose Hudson to the
    outside world. If you need more details about Apache httpd and
    <varname>mod_proxy</varname>, please see <ulink
    url="http://httpd.apache.org">http://httpd.apache.org</ulink>.</para>
  </section>


</chapter>
