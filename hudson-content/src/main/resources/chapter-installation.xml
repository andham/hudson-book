<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-install">
  <title>Installing and Running Hudson</title>

  <para>The following sections detail the installation process for Hudson. In
    general there are two different approaches available.
  </para>

  <variablelist>
    <varlistentry>
      <term>WAR File</term>
      <listitem>
        <para>The Hudson website provides a Java web archive file (WAR) for
          download. This file can either be started directly or used in an
          existing Java servlet container or application server.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Native Package</term>
      <listitem>
        <para>Besides the web archive you can download packages for Hudson
          suitable for the use with the native package management of Ubuntu/Debian,
          Oracle Linux, Redhat/Fedora/CentOS and openSUSE.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>As a server based application running 24x7 Hudson intrinsically should
    be installed as a operating system service, so that any system reboots
    necessary for maintenance or other reasons will automatically restart
    Hudson. The documentation for the Hudson install therefore includes
    documentation for setting up these services.
  </para>

  <section id="section-install-preprequisites">
    <title>Prerequisites</title>

    <para>Hudson only has one prerequisite, a
      <indexterm>
        <primary>Java</primary>
        <secondary>Java Runtime Environment (JRE)</secondary>
      </indexterm>
      Java Runtime Environment (JRE) compatible with Java 6 or higher.
      Hudson is
      most often run with the JRE that is bundled with a
      <indexterm>
        <primary>Java</primary>

        <secondary>Java Development Kit (JDK)</secondary>
      </indexterm>
      Java Development Kit (JDK) installation. We recommend to use the latest
      version of the JDK/JRE that comes as part of your operating system.
    </para>

    <para>The latest version of Oracle's JDK 6 is the officially supported
      runtime. To download the latest release of the Oracle JDK, go to
      <ulink
          url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">
        <indexterm>
          <primary>Java</primary>
          <secondary>Java Development Kit</secondary>
          <tertiary>downloading</tertiary>
        </indexterm>
        http://www.oracle.com/technetwork/java/javase/downloads/index.html
      </ulink>
      , and download the latest Java 6 JDK.
    </para>

    <para>OpenJDK as available with many Linux distributions as part of their
      package system is known to work as a runtime for Hudson as are other JVM
      implementations such Oracle JRockit, HP-UX JDK and IBM JDK.
    </para>
  </section>

  <section id="section-install-war">
    <title>Installing Hudson with the WAR File Distribution</title>

    <para>The WAR file available for download on the Hudson web site
      is an executable WAR that has a servlet container embedded. Once
      downloaded and copied to the desired directory, it
      is therefore possible to start Hudson with the command</para>
    <screen>
      <command>java -jar hudson.war</command>
    </screen>
    <para>This will start the servlet container as the current operating
      system user inheriting  access rights to the file system and so on. The
      Hudson home directory will be set to the <varname>.hudson</varname>
      folder in the users home directory. Once started the web based Hudson
      user interface will be available at <ulink
      url="http://localhost:8080/hudson">http://localhost:8080/hudson</ulink>
    </para>

     <figure floatstyle="" id="fig-ci-quickstart-app-win">
        <title>Hudson Application Window</title>

        <screenshot>
          <mediaobject>
            <imageobject role="web">
              <imagedata align="center"
                         fileref="figs/web/home-job-list.png"/>
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/home-job-list.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

    <para>This approach is suitable for testing and exploring Hudson,
      but it is not recommended to run Hudson like that in a production usage.
      Conveniently the WAR file is suitable to be deployed in most of the
      commonly used Java servlet containers and application server. The
      detailed process differs for these container but in general the
      required steps are:
    </para>
    <variablelist>
      <varlistentry>
        <term>Set up HUDSON_HOME</term>
        <listitem>
          <para>Hudson locates its configuration files and all other data in
            one folder and a multitude of sub folders. This folder should be
            configured by setting up an environment variable of
            <varname>HUDSON_HOME</varname>. The application will pick up this
            setting and use the specified folder.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Deploy to the server</term>
        <listitem>
          <para>Depending on the application server and your access rights
            you can deploy the WAR file via a web based administration
            console or by copying the WAR into a deployment folder.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <!-- TODO add a specific hudson user maybe .. but not when other stuff
    runs on app server .. then the app server user needs access to
    HUDSON_HOME and whatever..  -->
    <para>When using Hudson on your application server,
      you should ensure that the server is set up as a operating system
      service. The details of this setup widely vary between the various operating
      systems as well as the different application servers. The preferred and
      simpler method to install Hudson and run it as a service is a
      dedicated host and the operating system specific package as supplied by
      the Hudson website and documented in the following sections.
    </para>
  </section>

  <section id="section-install-deb">
    <title>Installing Hudson on Ubuntu/Debian</title>

    <para>Hudson provides a package repository of deb files for users of
      Debian based distributions such as Debian, Ubuntu and others. This package
      will install Hudson and set it up as a service.
    </para>

    <procedure>
      <step>
        <title>Install Java runtime</title>
        <para>In order to fulfill the prerequisite of an installed Java runtime
          on a Debian based distribution it is best to install the meta package
          <varname>default-jdk</varname>, which will install OpenJDK,
          with your preferred package manager user interface. Either use a
          graphical user interface like
          <varname>synaptic</varname>
          or install from on the command line with
        </para>
        <screen>
          <command>sudo apt-get install default-jdk</command>
        </screen>
        <para>If you prefer to use the Oracle Java runtime install it with</para>
        <screen>
          <command>sudo apt-get install sun-java6-jdk</command>
        </screen>
      </step>

      <step>
        <title>Add Hudson repository key to package management</title>
        <para>When you first install Hudson you will need to download and add
          the
          repository key to the package management system with</para>
        <screen>
          <command>sudo wget -q -O - http://hudson-ci.org/debian/hudson-ci.org.key | apt-key add -</command>
        </screen>
        <para>Future upgrades will not require this step to be repeated.</para>
      </step>

      <step>
        <title>Add Hudson repository URL to package management</title>
        <para>The Hudson project hosts its packages in its own repository
          server. In order to use it you have to add its URL to your list of
          package sources with
        </para>
        <screen>
          <command>sudo add-apt-repository "deb http://hudson-ci.org/debian binary/"</command>
        </screen>
        <para>or</para>
        <screen>
          <command>sudo sh -c "echo 'deb http://hudson-ci.org/debian binary/' \ </command>
          <command>> /etc/apt/sources.list.d/hudson.list"</command>
        </screen>
        <para>or by adding the APT line <varname>deb http://hudson-ci
          .org/debian binary/</varname> in your graphical package manager as
          a repository URL.
        </para>
        <para>Future upgrades will not require this step to be repeated
          .</para>
      </step>

      <step>
        <title>Update the list of available packages</title>
        <para>Once the prior steps are completed you can update the list of
          available packages in your graphical package manager or with
        </para>
        <screen>
          <command>sudo apt-get update</command>
        </screen>
        <para>This step has to be repeated whenever you want to check for the
          availability of upgrades. Common practice is for the update of the
          list to run automatically on a regular basis.
        </para>
      </step>

      <step>
        <title>Install Hudson</title>
        <para>Once your list of available packages is updated,
          you can install Hudson with</para>
        <screen>
          <command>sudo apt-get install hudson</command>
        </screen>
        <para>which will require you to confirm and will then proceed to
          install and start Hudson. Your console output will look similar to this
        </para>
        <screen>
          <command>
$ sudo apt-get install hudson
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  hudson
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 38.8 MB of archives.
After this operation, 39.7 MB of additional disk space will be used.
WARNING: The following packages cannot be authenticated!
  hudson
Install these packages without verification [y/N]? y
Get:1 http://hudson-ci.org/debian/ binary/ hudson 2.0.0 [38.8 MB]
Fetched 38.8 MB in 39s (981 kB/s)
Selecting previously deselected package hudson.
(Reading database ... 180192 files and directories currently installed.)
Unpacking hudson (from .../archives/hudson_2.0.0_all.deb) ...
Processing triggers for ureadahead ...
ureadahead will be reprofiled on next reboot
Setting up hudson (2.0.0) ...
Adding system user `hudson' (UID 114) ...
Adding new user `hudson' (UID 114) with group `nogroup' ...
Not creating home directory `/var/lib/hudson'.
 * Starting Hudson Continuous Integration Server hudson  [ OK ]
          </command>
        </screen>
        <para>As you can see from the output above a hudson user was created
          . This user will run the Hudson server. The Hudson home folder is
          configured to be located in <varname>/var/lib/hudson</varname>,
          which will contain configuration, workspaces and so on and
          should be added to your backup strategy.
        </para>
      </step>

      <step>
        <title>Upgrade Hudson</title>
        <para>To upgrade Hudson when a new release is available you would run
        </para>
        <screen>
          <command>sudo apt-get upgrade</command>
        </screen>
        <para>which will stop the running Hudson server,
          upgrade Hudson and restart the server. Prior to upgrading you might
        want to backup your Hudson data configuration located in
          <varname>/var/lib/hudson</varname> and owned by the hudson user.
          created.
        </para>
      </step>
    </procedure>


    <para>The install configured Hudson as a service so that you can stop and
      start the service with
    </para>
    <screen>
      <command>sudo service hudson stop</command>
      <command>sudo service hudson start</command>
    </screen>
    <para>or with the equivalent direct call</para>
    <screen>
      <command>sudo /etc/init.d/hudson stop</command>
      <command>sudo /etc/init.d/hudson start</command>
    </screen>

    <para>Following the Linux standard base convention Hudson will create its
      log files into  <varname>/var/log/hudson/hudson.log</varname> and the
      log files will be rotated so you will no accumulate large log files
      using up disk space.
    </para>

    <para>Looking at the list of files installed by the package</para>
    <screen>
      <command>
$ dpkg -L hudson
/.
/var
/var/log
/var/log/hudson
/var/lib
/var/lib/hudson
/var/run
/var/run/hudson
/usr
/usr/share
/usr/share/doc
/usr/share/doc/hudson
/usr/share/doc/hudson/changelog.gz
/usr/share/doc/hudson/copyright
/usr/share/hudson
/usr/share/hudson/hudson.war
/usr/bin
/usr/sbin
/etc
/etc/apt
/etc/apt/sources.list.d
/etc/apt/sources.list.d/hudson.list
/etc/default
/etc/default/hudson
/etc/init.d
/etc/init.d/hudson
/etc/logrotate.d
/etc/logrotate.d/hudson
      </command>
    </screen>
    <para>reveals that a configuration file <varname>/etc/default/hudson</varname>
      was created. It contains a number of configuration parameters that you
      might want to adapt to your needs. These include e.g. the
      <varname>JAVA_ARGS</varname> that can be used to increase the memory
      allocation for Hudson or the <varname>HTTP-PORT</varname> parameter set
      to the common 8080. If you modify this file to suit your needs,
      you should add it to you backup strategy.</para>
  </section>


 <section id="section-install-rpm">
    <title>Installing Hudson on Oracle Linux, Redhat Enterprise Linux, CentOS and Fedora
    </title>

    <!-- at a later stage we can split this up but not now while it is all
    the same package and infrastructure -->
    <para>Oracle Linux, Redhat Enterprise Linux, CentOS and Fedora all use
      the same rpm package provided by the Hudson project. This package
      will install Hudson and set it up as a service.
    </para>

    <procedure>
      <step>
        <title>Install Java runtime</title>
        <para>In order to fulfill the prerequisite of an installed Java runtime
          on a RedHat based distribution it is best to install the meta package
          <varname>java</varname>, which will install OpenJDK,
          with your preferred package manager user interface. Either use a
          graphical user interface like
          <varname>Add/Remove Software</varname>
          or install from on the command line with
        </para>
        <screen>
          <command>sudo yum install java</command>
        </screen>
      </step>

      <step>
        <title>Add Hudson repository key to package management</title>
        <para>When you first install Hudson you will need to download and add
          the repository key to the package management system with</para>
        <screen>
          <command>sudo rpm --import http://hudson-ci.org/redhat/hudson-ci.org.key</command>
        </screen>
        <para>Future upgrades will not require this step to be repeated.</para>
      </step>

      <step>
        <title>Add Hudson repository URL to package management</title>
        <para>The Hudson project hosts its packages in its own repository
          server. In order to use it you have to add the repository meta data to
          your list of package sources with
        </para>
        <screen>
          <command>sudo wget -O /etc/yum.repos.d/hudson.repo http://hudson-ci.org/redhat/hudson.repo</command>
        </screen>
        <para>Future upgrades will not require this step to be repeated.</para>
      </step>

      <step>
        <title>Update the list of available packages</title>
        <para>Once the prior steps are completed you can update the list of
          available packages in your graphical package manager or with
        </para>
        <screen>
          <command>sudo yum check-updates</command>
        </screen>
        <para>This step has to be repeated whenever you want to check for the
          availability of upgrades. Common practice is for the update of the
          list to run automatically on a regular basis.
        </para>
      </step>

      <step>
        <title>Install Hudson</title>
        <para>Once your list of available packages is updated,
          you can install Hudson with</para>
        <screen>
          <command>sudo yum install hudson</command>
        </screen>
        <para>which will require you to confirm and will then proceed to
          install and start Hudson. Your console output will look similar to this
        </para>
        <screen>
          <command>
$ sudo yum install hudson
TODO...
          </command>
        </screen>
        <para>As you can see from the output above a hudson user was created
          . This user will run the Hudson server. The Hudson home folder is
          configured to be located in <varname>/var/lib/hudson</varname>,
          which will contain configuration, workspaces and so on and
          should be added to your backup strategy.
        </para>
      </step>

      <step>
        <title>Upgrade Hudson</title>
        <para>To upgrade Hudson when a new release is available you would run
        </para>
        <screen>
          <command>sudo yum update</command>
        </screen>
        <para>which will stop the running Hudson server,
          upgrade Hudson and restart the server. Prior to upgrading you might
        want to backup your Hudson data configuration located in
          <varname>/var/lib/hudson</varname> and owned by the hudson user.
          created.
        </para>
      </step>
    </procedure>


    <para>The install configured Hudson as a service so that you can stop and
      start the service with
    </para>
    <screen>
      <command>sudo service hudson stop</command>
      <command>sudo service hudson start</command>
    </screen>

    <para>Following the Linux standard base convention Hudson will create its
      log files into  <varname>/var/log/hudson/hudson.log</varname> and the
      log files will be rotated so you will no accumulate large log files
      using up disk space.
    </para>

 <para>Looking at the list of files installed by the package</para>
    <screen>
      <command>
$ rpm -ql hudson
/etc/init.d/hudson
/etc/logrotate.d/hudson
/etc/sysconfig/hudson
/usr/lib/hudson
/usr/lib/hudson/hudson.war
/usr/sbin/hudson
/var/lib/hudson
/var/log/hudson
      </command>
    </screen>
    <para>reveals that a configuration file <varname>/etc/sysconfig/hudson</varname>
      was created. It contains a number of configuration parameters that you
      might want to adapt to your needs. These include e.g. the
      <varname>HUDSON_JAVA_OPTIONS</varname> that can be used to increase the
      memory
      allocation for Hudson or the <varname>HUDSON_PORT</varname> parameter set
      to the common 8080. If you modify this file to suit your needs,
      you should add it to you backup strategy.</para>

  </section>

  <!-- TODO add OpenSUSE documentation at a later stage -->
  <!--<section id="section-install-opensuse">-->
    <!--<title>Installing Hudson on OpenSUSE</title>-->

  <!--</section>-->

  <!--<section id="section-install-service-manually">-->
    <!--<title>Manually Configuring Hudson as a Service</title>-->

    <!-- TODO This is different for each OS .. and not necessary since we have
    the native packages ... therefore this chapter should be optional for now
 and it a nice to have for later  -->

    <!--<para>When installing Hudson, you will often want to configure Hudson -->
  <!--as a-->
    <!--service. <indexterm>-->
        <!--<primary>Windows service</primary>-->
      <!--</indexterm>If you are on Windows, the Hudson distribution includes-->
    <!--binaries that can work with the Windows Services subsystem and if you are-->
    <!--on another platform such as Linux, <indexterm>-->
        <!--<primary>Unix startup scripts</primary>-->
      <!--</indexterm>Hudson also includes scripts that can be configured to start-->
    <!--Hudson as a service. The following sections provide instructions for-->
    <!--configuring Hudson as a service.</para>-->
<!---->
    <!--<section id="ci-quickstart-sect-startup-scripts">-->
      <!--<title>Startup Scripts for Linux</title>-->
<!---->
      <!--<para>-->
        <!--<indexterm>-->
          <!--<primary>Installation</primary>-->
<!---->
          <!--<secondary>Unix startup scripts</secondary>-->
        <!--</indexterm>-->
        <!--You can configure Hudson to start automatically, by copying the-->
        <!--<filename>Hudson</filename>-->
        <!--script to the-->
        <!--<filename>/etc/init.d</filename>-->
        <!--directory. On a Linux system (tested with Redhat, Fedora, Ubuntu, or-->
        <!--CentOS) perform the following operations as the root user:-->
      <!--</para>-->
<!---->
      <!--<orderedlist>-->
        <!--<listitem>-->
          <!--<para>Create a init script needs to be documented...and then copy to-->
            <!--<filename>/etc/init.d/matrix</filename>.-->
          <!--</para>-->
        <!--</listitem>-->
<!---->
        <!--<listitem>-->
          <!--<para>Make the-->
            <!--<filename>/etc/init.d/hudson</filename>-->
            <!--script executable—-->
            <!--<command>chmod 755 /etc/init.d/hudson</command>-->
          <!--</para>-->
        <!--</listitem>-->
<!---->
        <!--<listitem>-->
          <!--<para>(Optional) Set the RUN_AS_USER to "hudson". If you do this, you-->
            <!--will need to:-->
          <!--</para>-->
<!---->
          <!--<itemizedlist>-->
            <!--<listitem>-->
              <!--<para>Create a Hudson user</para>-->
            <!--</listitem>-->
<!---->
            <!--<listitem>-->
              <!--<para>Change the Owner and Group of your Hudson install directory-->
                <!--to matrix-->
              <!--</para>-->
            <!--</listitem>-->
          <!--</itemizedlist>-->
<!---->
          <!--<note>-->
            <!--<para>If you set the "RUN_AS_USER" variable, you'll have to change-->
              <!--the "pid" directory to point to a directory where this user has-->
              <!--read/write permissions. In most Linux distributions, /var/run is-->
              <!--only writable by root. The properties that would need to be added-->
              <!--to customize the PID file location is "wrapper.pid". For more-->
              <!--information about this property and how it would be configured in-->
              <!--wrapper.conf, see:-->
              <!--<ulink-->
                  <!--url="http://wrapper.tanukisoftware.com/doc/english/properties.html">-->
                <!--http://wrapper.tanukisoftware.com/doc/english/properties.html-->
              <!--</ulink>-->
            <!--</para>-->
          <!--</note>-->
        <!--</listitem>-->
      <!--</orderedlist>-->
<!---->
<!---->
      <!--<para>At the end of this you should have a file in-->
        <!--<filename>/etc/init.d/matrix</filename>-->
        <!--which starts with a series of configuration properties which look-->
        <!--something like this (assuming that you've installed Hudson in-->
        <!--<filename>/usr/local/matrix</filename>-->
        <!--and that you have Java installed in-->
        <!--<filename>/usr/java/latest</filename>):-->
      <!--</para>-->
<!---->
<!---->
      <!--<section id="ci-quickstart-sect-redhat-fedora">-->
        <!--<title>Add Hudson as a Service on Redhat, Fedora, and CentOS</title>-->
<!---->
        <!--<para>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>Redhat</secondary>-->
          <!--</indexterm>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>Fedora</secondary>-->
          <!--</indexterm>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>CentOS</secondary>-->
          <!--</indexterm>-->
          <!--This script has the appropriate-->
          <!--<command>chkconfig</command>-->
          <!--directives, so all you need to do to add Hudson as a service is run-->
          <!--the following commands:-->
        <!--</para>-->
<!---->
        <!--<screen>$-->
          <!--<command>cd /etc/init.d</command>-->
          <!--$-->
          <!--<command>chkconfig -add matrix</command>-->
          <!--$-->
          <!--<command>chkconfig -levels 345 matrix on</command>-->
          <!--$-->
          <!--<command>service matrix start</command>-->
          <!--Starting Hudson... Started Hudson. $-->
          <!--<command>tail -f /usr/local/matrix/logs/wrapper.log</command>-->
        <!--</screen>-->
<!---->
        <!--<para>The second command adds Hudson as a service to be started and-->
          <!--stopped with the-->
          <!--<command>service</command>-->
          <!--command and managed by the-->
          <!--<command>chkconfig</command>-->
          <!--command.-->
          <!--<command>chkconfig</command>-->
          <!--manages the symbolic links in-->
          <!--<filename>/etc/rc[0-6].d</filename>-->
          <!--which control the services to be started and stopped when the-->
          <!--operating system restarts or transitions between run-levels. The third-->
          <!--command adds Hudson to run-levels 3, 4, and 5. The service command-->
          <!--starts Hudson, and the last command tails the-->
          <!--<filename>wrapper.log</filename>-->
          <!--to verify that Hudson has been started successfully. If Hudson has-->
          <!--started successfully, you should see a message notifying you that-->
          <!--Hudson is listening for-->
          <!--<acronym>HTTP</acronym>-->
          <!--connections on a port.-->
        <!--</para>-->
      <!--</section>-->
<!---->
      <!--<section id="ci-quickstart-sect-ubuntu">-->
        <!--<title>Add Hudson as a Service on Ubuntu</title>-->
<!---->
        <!--<para>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>Ubuntu</secondary>-->
          <!--</indexterm>-->
          <!--The process for setting Hudson up as a service on Ubuntu differs-->
          <!--slightly from the process used on a Redhat variant. Instead of running-->
          <!--chkconfig, you should run the following sequence of commands once-->
          <!--you've configured the startup script in-->
          <!--<filename>/etc/init.d</filename>:-->
        <!--</para>-->
<!---->
        <!--<screen>$-->
          <!--<command>cd /etc/init.d</command>-->
          <!--$-->
          <!--<command>update-rc.d matrix defaults</command>-->
          <!--$-->
          <!--<command>service matrix start</command>-->
          <!--Starting Hudson... Started Hudson. $-->
          <!--<command>tail -f /usr/local/matrix/logs/wrapper.log</command>-->
        <!--</screen>-->
      <!--</section>-->
    <!--</section>-->
  <!--</section>-->

  <section id="ci-quickstart-sect-upgrading">
    <title>Upgrading Hudson</title>

    <para><indexterm>
        <primary>Hudson</primary>

        <secondary>upgrading</secondary>
      </indexterm>Since Hudson separates it's configuration and data storage
    from the application, it is easy to upgrade an existing Hudson
    installation. For native package users this will be handled transparently
     with their package management system. For WAR file based installs,
      you only have to remove the old version WAR and replace it with the new
      version in your application server.</para>
    <!--TODO: See HBOOK-12 - this section needs  expansion-->
  </section>

  <section id="ci-quickstart-sect-behind-proxy">
    <title>Running Hudson Behind a Proxy</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>running behind proxy</secondary>
      </indexterm>If you installed Hudson as a stand-alone application, Hudson
    is running on a high-performance servlet. From
    a performance perspective, there is no reason for you not to run Hudson by
    itself without a proxy. Yet, more often than not, organizations run
    applications behind a proxy for security concerns and to consolidate
    applications using tools like <varname>mod_rewrite</varname> and
    <varname>mod_proxy</varname>. For this reason, we've included some brief
    instructions for configuration <varname><indexterm>
        <primary>Apache httpd</primary>

        <secondary>mod_proxy</secondary>
      </indexterm>mod_proxy</varname> in <indexterm>
        <primary>Apache httpd</primary>
      </indexterm>Apache httpd. We assume that you've already installed Apache
    2, and that you are using a Virtual Host for www.somecompany.com.</para>

    <para>Let's assume that you wanted to host Hudson behind Apache HTTPd at
    the <acronym>URL</acronym> <ulink
    url="http://www.somecompany.com">http://www.somecompany.com</ulink>. To do
    this, you'll need to change the context path that Hudson is served
    from.</para>




    <orderedlist>
      <listitem>
        <para>Need to explain how to run Hudson in the root context here </para>
      </listitem>

      <listitem>
        <para>Restart Hudson and verify that it is available on <ulink
        url="http://localhost:8080/">http://localhost:8080/</ulink>.</para>
      </listitem>

      <listitem>
        <para>Clear the Base <acronym>URL</acronym> in Hudson Application
        Server Settings in the administration interface.</para>
      </listitem>
    </orderedlist>

    <para>At this point, edit the HTTPd configuration file for the
    www.somecompany.com virtual host. Include the following to expose Hudson
    via <varname>mod_proxy</varname> at <ulink
    url="http://www.somecompany.com/">http://www.somecompany.com/</ulink>.</para>

    <programlisting>ProxyRequests Off 
ProxyPreserveHost On 

&lt;VirtualHost *:80&gt; 
  ServerName www.somecompany.com 
  ServerAdmin admin@somecompany.com 
  ProxyPass / http://localhost:8080/
  ProxyPassReverse / http://localhost:8080/
  ErrorLog logs/somecompany/hudson/error.log
  CustomLog logs/somecompany/hudson/access.log common
&lt;/VirtualHost&gt;</programlisting>

    <para>If you just wanted to continue to serve Hudson at the
    <filename>/hudson</filename> context path, you
    would include the context path in your <varname>ProxyPass</varname> and
    <varname>ProxyPassReverse</varname> directives as follows:</para>

    <programlisting>  ProxyPass /matrix/ http://localhost:8082/matrix/
  ProxyPassReverse /matrix/ http://localhost:8082/matrix/
</programlisting>

    <para>Apache configuration is going to vary based on your own
    application's requirements and the way you intend to expose Hudson to the
    outside world. If you need more details about Apache httpd and
    <varname>mod_proxy</varname>, please see <ulink
    url="http://httpd.apache.org">http://httpd.apache.org</ulink>.</para>
  </section>


</chapter>
