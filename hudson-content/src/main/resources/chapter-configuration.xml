<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Hudson Configuration</title>

  <para>To configure Hudson, click on the Manage Hudson link in the left-hand
  navigation menu, which will display the screen shown in <xref
  linkend="fig-using-manage-matrix" />. This section will focus on the
  <indexterm>
      <primary>Configure System</primary>
    </indexterm>Configure System section.</para>

  <figure id="fig-using-manage-matrix">
    <title>Managing Hudson</title>

    <mediaobject>
      <imageobject role="web">
        <imagedata contentdepth="100%"
                   fileref="figs/web/ci-using-manage-matrix.png" scalefit="1" />
      </imageobject>

      <imageobject role="print">
        <imagedata align="center"
                   fileref="figs/print/ci-using-manage-matrix.pdf"
                   scalefit="0" width="100%" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Depending on the plugins installed and activated on your Hudson system
  different sections will be available in the system configuration section.
  These will either be explained below or with a plugin specific section. For
  example the source code management related global configurations for the
  different SCM systems is available in the SCM chapter.</para>

  <!-- TODO xref-->

  <section>
    <title>Global Hudson Configuration</title>

    <para>The first configuration section in the Configure System screen as
    shown in <xref linkend="fig-using-manage-matrix" /> contains options that
    allow you to configure global Hudson configuration attributes. This
    section is shown in <xref linkend="fig-using-global-config" />.</para>

    <figure id="fig-using-global-config">
      <title>Configuring Global Hudson Configuration</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-global-config.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-global-config.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term>Home Directory</term>

        <listitem>
          <para>This is not a runtime configurable parameter. It is set by the
          server on startup. By default it will be the value of the
          HUDSON_HOME environment variable or the <varname>.hudson</varname>
          folder in the home directory of the operating system user running
          Hudson. The value is displayed here to allow the administrator to
          verify the correct setting.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>System Message</term>

        <listitem>
          <para>This is a global system message that is displayed by Hudson in
          the main screen above the list of projects. It can be used as a
          welcome message or to e.g. broadcast upcoming maintenance to users
          of the Hudson instance via the user interface. It support plain text
          as well a HTML snippets for formatting and enriching the
          message.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term># of Executors</term>

        <listitem>
          <para>This parameter controls the number of executors that can
          execute concurrent Hudson builds.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Quiet period</term>

        <listitem>
          <para>A quiet period as specified in this configuration causes
          Hudson to wait the specified number of seconds before a triggered
          build is started. If your Hudson project is constantly "flapping"
          (switching between failure and success frequently), you may want to
          set the Quiet period to achieve more build stability. Another
          scenario this can be helpful is when large commits to your source
          control system are typically carried out in multiple smaller commits
          within a short time frame, so that the committer has a chance to get
          everything in without a build kicking off straight after the first
          commit causing a build failure. Setting this number to a large
          amount can generally reduce the number of builds running for this
          project, which will reduce the overall load for your Hudson
          server.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>SCM checkout retry count</term>

        <listitem>
          <para>The SCM checkout retry count determines the number of attempts
          Hudson makes to check out any updates when polling the SCM system
          for changes and finds the system to be unavailable.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Enable Security</term>

        <listitem>
          <para>The "Enable Security" checkbox switches on the security system
          that will require username and password for any access to run builds
          or change configurations of Hudson and build projects. More
          information about securing Hudson can be found in <!-- TODO add xref --></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Prevent Cross Site Request Forgery exploits</term>

        <listitem>
          <para>This feature will enable improved security against Cross Site
          Request Forgery exploits and is recommended to be turned on when
          your Hudson instance is available to the public internet. On the
          other hand it can be necessary to have this feature disabled, when
          your Hudson web interface is embedded in a dashboard type interface
          that also contains web content from other domains or even only
          internal server names or sub networks. In general it will not be
          necessary to enable this feature on an internal network, where only
          trusted parties have access to Hudson.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Help make Hudson better...</term>

        <listitem>
          <!-- TODO need to create a JIRA issue updates the in app help pointing to a wiki page with more up to date
          info and results about the data gathered, remove link to old nabble list

SEE HBOOK-40          -->

          <para>By selecting this feature to be enabled you agree for
          anonymous usage statistics about your Hudson installation to be
          created and sent to the Hudson development team (TODO who actually
          gets the data and is this working at the moment?, who has access to
          it) periodically (whats the period?). The data sent consists of
          <itemizedlist>
              <listitem>
                <para>the Hudson version you are using</para>
              </listitem>

              <listitem>
                <para>operating system and number of executors for you master
                Hudson and any slaves being used</para>
              </listitem>

              <listitem>
                <para>the name and version of all activated plugins</para>
              </listitem>

              <listitem>
                <para>the number of each project type configured to run</para>
              </listitem>

              <listitem>
                <para>HTTP information as provided by your Hudson
                instance</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Global Properties Configuration</title>

    <para>The global properties configuration allows the definition of
    key-value pairs that are exposed to all running builds as environment
    variables. Depending on the build system used they can be picked up with
    different syntax e.g. $key or ${key}</para>

    <!-- TODO this has to be expanded in terms of usage as well as
      some concrete examples, 

SEE HBOOK-41-->
  </section>

  <section>
    <title>Configuring JDK Installations</title>

    <para>Hudson can support one or more JDK installations. Setting up
    multiple JDK installs allows the configuration of different projects being
    built by different Java versions in separate jobs. You can use this to
    ensure e.g. that builds as well as test suites run fine on an older Java
    version to ensure compatibility. Another application would be to run with
    JDK versions supplied by different vendors.</para>

    <para>The most common configuration of a JDK is to point to the already
    installed instance as used for running Hudson itself. This can be achieved
    simply by supplying a name like Oracle-JDK-6 in the name input field and
    the absolute path in the JAVA_HOME input field in the screen as shown in
    <xref linkend="fig-using-jdk-config" />.</para>

    <figure id="fig-using-jdk-config">
      <title>Configuring JDK Installations</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-jdk-config.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-jdk-config.pdf" scalefit="0"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Furthermore it is possible to configure a JDK to be installed
      automatically by specifying a name as before and then selecting the
      <option>Install Automatically</option>
      check box. This exposes a drop down labelled
      <option>Add installer</option>
      which lets you choose from the options
      <option>Install from Oracle</option>
      ,<!-- currently still says java.sun.com but changed and pull request on github done -->
      <option>Extract *.zip/*.tar.gz</option>
      and<option>Run Command</option>.

      All the automatic install configurations cause Hudson to wait for the
      first build, which is configured to use a named instance of the JDK to
      initiate the JDK installation.
    </para>
    <para>The option
      <option>Install from Oracle</option>
      brings up a drop down to choose the version as well as a checkbox that
      needs to be clicked to the JavaSE license agreement.
    </para>
    <para>If you select to use
      <option>Extract *.zip/*.tar.gz</option>
      you will be able to configure a
      <option>Label</option>, the
      <option>Download URL for binary archive</option>
      and the
      <option>Subdirectory of extracted archive</option>. If you specifiy a
      label, only Hudson nodes with the same label will use this installer. By
      using different labels it is possible for example to get the same tool
      installed on different nodes with different operating systems from
      different automatic install setups. The download url specifies the full
      url from which the JDK will be downloaded. The actual download is run off
      the Hudson master, so that any Hudson nodes that need the JDK installed do
      not need to have access to the url location. After successful download the
      JDK will be installed in the specified sub directory of the Hudson install
      directory.
    </para>
    <para>The last automatic installation option is to<option>Run a
      command</option>. The
      <option>Label</option>
      options works the same as for the archive extraction based install. The
      <option>Command</option>
      input allows you to specify the shell command to execute on the node for
      the install. Typically this is some package management invocation. The
      resulting tool directory has to be specified in the <option>Tool Home
      </option> input box.
    </para>

    <para>Once more than one JDK is configured in the global settings, each
      project configuration has an additional drop down which allows the
      selection of the JDK to be usd to build the project.
    </para>
  </section>

  <section>
    <title>Configuring Ant Installations</title>
    <para>In a similar fashion to the JDK install Apache Ant can be installed in
      multiple versions to be available for your Hudson configured builds. The
      default configuration is to supply a name for the Ant installation and a
      value in the
      <option>ANT_HOME</option>
      input that is defined by the absolute path to the folder containing your
      pre-existing local Apache Ant install.
    </para>
    <para>In addition to using an already existing Ant install e.g. from your
      operating system package management system, a provisioning system used or
      as part of a virtual machine image used Hudson can install a required
      Apache Ant version automatically when needed.
    </para>

    <para>The simplest way achieve this is to select the
      <option>Install automatically</option>
      checkbox and select
      <option>Install from Apache</option>
      and choose the desired version from the drop down.
    </para>
    <para>Similar to the JDK installation from Oracle it is possible to use
      <option>Install from Apache</option>
      to get Ant installed. The options to install from an archive or by
      running a command are available as well and work in the same way as for
      JDK installs.
    </para>
  </section>

  <section>
    <title>Configuring Maven Installations</title>

    <para>Hudson is designed with a special level of support for Maven builds.
    To use Maven, you must figure configure a Maven installation . To do
    this, go to the Maven section of the server configuration. You can
    configure one or more installations of Maven, to do so, click on the Add
    Maven button as shown in <xref linkend="fig-using-maven-config" />. Then
    assign your new created Maven installation a name which will be displayed
    in project configuration select lists.</para>

    <!-- TODO improve like JDK install

SEE HBOOK-43-->

    <figure id="fig-using-maven-config">
      <title>Configuring Maven Installations</title>

      <!-- TODO update screenshot to have Maven 3.0.3 and not a beta version -->

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-maven-config.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-maven-config.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To install a version of Maven automatically from the Apache Software
    Foundation, select "Install Automatically" and then click on "Add
    Installer". Clicking on Add Installer will bring up a list of Maven
    versions available to install. We recommend that you run your build using
    the latest Maven 3.0 release. At this point, Maven will not be
    automatically downloaded and installed. Instead, Hudson will initiate a
    Maven installation the first time a build is run which requires Maven.
    <!-- TODO MM document configuring already installed maven version via path 
--></para>
  </section>

  <section>
    <title>Configuring the Shell Executable</title>

    <!--See HBOOK-44-->

    <para>Hudson allows for the ability to configure Shell builds. If you have
    a build which requires the execution of bash script or a csh script, you
    can configure which interpreter is used to execute shell scripts in this
    configuration variable.</para>

    <figure id="fig-using-shell-execute">
      <title>Configuring Shell Executable</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-shell-execute.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-shell-execute.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Configuring E-mail Notification</title>

    <!-- TODO there should be more and better docu here for this critical
      feature.. 

SEE HBOOK-45-->

    <para>Email notification is a core feature of a continuous integration
    server, and you can configure the way in which Hudson will connect to an
    SMTP server in the Email Notification section of the server configuration
    screen. In this form you can configure an SMTP server, a default user
    e-mail suffix which is appended to build usernames. You can set the
    administrative email address, and the URL to be used in emails which link
    back to the Hudson UI.</para>

    <figure id="fig-using-email-notify">
      <title>Configuring Email Notification</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-email-notify.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-email-notify.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>In addition to basic SMTP configuration parameters, it is also
    possible to configure Hudson to use SMTP auth to send email through local
    services which require secure credentials for sending email or public
    services such as Gmail. To configure these parameters, populate the User
    Name, Password, SSL, SMTP Port parameters. Once you have completed the
    SMTP configuration, click on "Test configuration" to send a test email to
    the administrator email address.</para>
  </section>

  <!-- TODO this is not there by default, what triggers it (which plugin)
  and therefore where should it be documented.. maybe here anyway but with a
  remark..

See HBOOk-45
  -->

  <section>
    <title>Configuring SCM Polling Concurrency</title>

    <para>This is a simple, global parameter to Hudson which controls the
    number of concurrent threads to be used when polling an SCM system. Most
    CI systems discover code changes in an SCM by continuously polling source
    control. If you have enough project configured, this polling can grow to
    become a significant factor in SCM performance. If you are suffering
    performance issues because you have configured hundreds of projects to
    poll SCM, you can use this one property to define concurrency limits on
    Hudson's ability to concurrently poll an SCM.</para>

    <figure id="fig-using-scm-poll">
      <title>Configuring SCM Polling Concurrency</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-scm-poll.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center" fileref="figs/print/ci-using-scm-poll.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</chapter>
