<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-maven">
  <title>Working with Apache Maven Builds</title>

  <para>Apache Maven is the most widely used build tool for Java based
    applications and beyond. It has  excellent support in Hudson and is
    employed by most Hudson users.
  </para>

  <section id="section-installing-maven">
    <title>Installing and Configuring Apache Maven</title>
    <!-- HBOOK-69-->
    <para>In order to use Apache Maven for your project build you will have to
      configure one or more installs, as documented in
      <xref linkend="section-configure-maven"/>. Among the many factors that
      influence your choice of installation method you might want to consider
      the following:


      <variablelist>
        <varlistentry>
          <term>One or more Maven versions?</term>
          <listitem>
            <para>Depending on the variety of projects you aim to be building
              on Hudson, you might need to have more Maven versions
              for building your projects available. This can  be helpful to
              allow for
              a staged upgrade with one project at a time to minimize
              down times due to broken builds with newer versions as well.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Variety of operating systems in build cluster</term>
          <listitem>
            <para>Your build cluster might be using different operating system
              versions, which can make some installation methods harder or
              impossible to use. Reasons for using different operating systems
              in a cluster can be the need to run tests on them, facilitating
              pre-existing e.g. desktop workstations at night, the need to build
              native packages on their own platform or simply the fact that a
              certain build can only be done on a specific operating system.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Control software via Hudson or something else?</term>
          <listitem>
            <para>While Hudson has built in support to manage the JDK install as
              well as Apache Ant and Maven, your builds can require any number
              of further software to work. A high number of these additional
              software requirements can make it increasingly difficult to keep
              your build cluster setup working. Your company might already be
              using a provisioning software or virtual machine or operating
              system snapshots for similar purposes and it would then make sense
              to reuse the existing facilities and setup.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Available expertise</term>
          <listitem>
            <para>Your team or yourself might have pre-existing expertise with
              native package management, provisioning software, virtual machine
              snapshots or Hudson itself than can be an influencing factor on
              how to set up your Maven installs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Control Maven installation</term>
          <listitem>
            <para>Some installation methods like using a pre-existing Maven
              install from an operating system package rely on third parties
              to create these installations at first. While convenient this
              implies a loss of control that might not be desired and has to
              be weighed against the additional effort of different install
              methods.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

    </para>

    <para>With assessing these influencing parameters you will be able to derive
      a strategy for your Maven install(s), that will work across the different
      machines in your build cluster and for all your projects. This strategy
      can potentially involve different installation methods. A minimal setup of
      one Maven install can be used to set up your first project, that is built
      with Maven on Hudson.
    </para>
  </section>

  <section>
    <title>Maven 2 or Maven 3</title>
    <para>Explain difference between Maven 2 (Legacy) and Maven 3
      configuration and build steps as well as the deprecated Maven project
      type, do that either here or in an earlier section or chapter
    </para>
  </section>

  <section id="section-maven-example">
    <title>A Simple Example for a Apache Maven built project</title>
    <!-- HBOOK-70-->
        <para>should be a simple project which just calls mvn clean install,
      talk about pros and cons of using clean, also talk about plugin:goal
      steps?
    </para>
  </section>

  <section id="section-maven-3-build-configuration">
    <title>Details of Configuring Maven 3 Build Options</title>

    <para>After configuring the general project options
      (see <xref linkend="chapter-build-creation"/>),
      you can configure one
      or more build steps. To add a build step, click on the Add build step
      button as shown in <xref linkend="fig-using-new-build-config"/>. To
      configure a Maven build, select <option>Invoke Maven 3</option>.
    </para>

    <para>The basic and advanced options for configuring a Maven 3 build steps
      are shown in <xref linkend="fig-maven-3-build-step-default"/> and
      <xref linkend="fig-maven-3-build-step-advanced"/>
      . When adding a new Maven 3 build step all parameters are prepopulated
      with the default parameters defined for Maven 3 build steps. These are
      configured in the global Hudson configuration documented in
      <xref linkend="chapter-configuration"/> in
      <xref linkend="section-configure-maven-3-builder-defaults"/>.
    </para>

    <figure id="fig-maven-3-build-step-default">
      <title>Configuring a Maven 3 Build Step - Default Options</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-step-maven-3-default.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-step-maven-3-default.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <figure id="fig-maven-3-build-step-advanced">
      <title>Configuring a Maven 3 Build Step - Advanced Options</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-step-maven-3-advanced-.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-step-maven-3-advanced.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term>Maven Version</term>
        <listitem>
          <para>Your Hudson installation may have one or more Maven 3
            installations configured as part of the global Hudson configuration.
            This drop down allows you to specify the version of Maven 3 to
            use
            with the current build step. By default the Maven 3 integration
            will use a bundled version of Maven 3, that is installed as part
            of the Maven 3 integration itself.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Goals</term>
        <listitem>
          <para>This field allows you to specify the goals and phases you would
            like to use for the Maven 3 invocation, separate by spaces and in
            order of desired invocation just like you would use Maven 3 on the
            command line. Typically these would be<varname>clean
              install</varname>, but depending on your project and build step
            others may apply. The plugin with automatically show the Maven
            version and operate in batch mode equivalent to the
            <varname>-V</varname>
            and
            <varname>-B</varname>
            options. It is also to specify other specific Maven to command-line
            options like
            <varname>-P</varname>
            for profile selection, selection of a specific
            <varname>settings.xml</varname>
            file,
            <varname>-X</varname>
            for debuggin logging and so on. However this is not recommended
            since there are specific configuration settings for most parameters
            in the
            <option>Advanced</option>
            section. Specifying them in their separate option allows for
            programmatic changes across project defined in your Hudson instance
            and is easier scriptable in the Hudson console.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Properties</term>
        <listitem>
          <para>You can pass one or more properties to the Maven process. This
            field accepts a list of properties with lines in a
            <option>key=value</option> format. These properties will be
            passed into the Maven build step invocation using the standard
            way of passing properties of <option>-Dkey1=value1
              -Dkey2=value2</option>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>POM File</term>
        <listitem>
          <para>If your project uses the standard
            <varname>pom.xml</varname>
            filename, there is no need to specify a POM. If your projects uses a
            POM with an alternative name or path other than directly in the
            project root, you can specify that file name and path here. This
            setting is equivalent to the command line option
            <option>-f pomfilepath</option>
            or<option>--file pomfilepath</option>. The path specified has to be
            relative to the project root.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Private repository</term>
        <listitem>
          <para>By default a Maven invocation will use a private repository in
            the project workspace in a
            <varname>.maven/repo</varname>
            folder. This ensures that other project builds do not have any side
            effects. However it can cause considerable usage of storage space,
            which consequently should be monitored carefully. If this option is
            disabled the standard Maven repository location in the current users
            home directory will be used. The user will the operating system user
            running Hudson and therefore invoking Maven 3 via the plugin.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Private temporary directory</term>
        <listitem>
          <para>When this option is activated the java environment variable
            <varname>java.io .tmpdir</varname>
            will be set to a folder
            <varname>.maven/tmp</varname>
            in the project specific workspace. This is useful when your build
            accesses the temporary directory for storage of artifacts or any
            temporary files e.g. used while running tests. When using the option
            with builds that produce large amounts of data in the temporary
            folder it is important to monitor the size of the folder and
            potentially add a clean up routine to the host operating system
            regular scheduled jobs.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Offline</term>
        <listitem>
          <para>Activating this option causes Maven to be run with the
            <varname>-o</varname> offline option enabled and it will
            therefore not access any remote repositories.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Profiles</term>
        <listitem>
          <para>Adding a comma or space separated list of profile names
            causes the Maven 3 integration to pass them to the invocation
            with the <varname>-P</varname> parameter.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Show Errors</term>
        <listitem>
          <para>Enabling the
            <option>Show Errors</option>
            option is equivalent to use the
            <varname>-e</varname>
            command line parameter, which will cause Maven to output any errors
            in the console.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Verbosity</term>
        <listitem>
          <para>Configure the verbosity of the log output to the console by
            Maven to be at normal, quiet or debug levels. These levels are
            equivalent to no option and the
            <varname>-q</varname>
            and
            <varname>-X</varname>
            options for Maven command line invocation.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Checksum Mode</term>
        <listitem>
          <para>Configure the strictness of the checksum validation when
            downloading artifacts from repositories to be at normal, lax or
            strict levels. These level are equivalent to no option and the
            <varname>-c</varname>
            and
            <varname>-C</varname>
            options for Maven command line invocation.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Snapshot Updates</term>
        <listitem>
          <para>The <option>Snapshot Updates</option> options provides
            control over the way Maven treats
            <varname>SNAPSHOT</varname> artifacts. The
            <option>NORMAL</option> activates the standard Maven behaviour,
            where as <option>FORCE</option> and <option>SUPPRESS</option>
            will activate the <varname>-U</varname> and
            <varname>-nsu</varname> options.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Recursive</term>
        <listitem>
          <para>Just like for normal Maven invocation this options is activated
            by default, which means that nested modules in a multi-module
            project will be build. Deactivating this feature is equivalent to
            the non-recursive command line option
            <varname>-N</varname>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Projects</term>
        <listitem>
          <para>The
            <option>Projects</option>
            option allows you to specify the projects that should be added to
            the reactor during build. You can either specify them by the
            relative path in your project workspace or by
            <varname>artifactId</varname>
            and optionally
            <varname>groupId</varname>
            in a
            <varname>groupId:artifactId</varname>
            format. The equivalent command line option is<varname>-pl</varname>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Resume From</term>
        <listitem>
          <para>The
            <option>Resume From</option>
            uses the same syntax as the
            <option>Projects</option>
            and sets the
            <varname>-rf</varname>
            command line option to resume the build from the specified artifact.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Fail Mode</term>
        <listitem>
          <para>The <option>Fail Mode</option> option support the modes
            <option>NORMAL</option>, <option>FAST</option>,
            <option>AT_END</option> and <option>NEVER</option> that determine
          how your Maven build proceeds in case of any failures. The equivalent
           command line options are no option, <varname>-ff</varname>,
            <varname>-fae</varname> and <varname>-fn</varname>. This can have
            considerable impact on the load on your Hudson server e.g. by not
            proceeding past failed tests  but instead failing the build so
            that developer can fix it before a long running build needs to be
            kicked off again.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Make Mode</term>
        <listitem>
          <para>The <option>Make Mode</option> option can be used to enable
            Make-like build behaviour of Maven. The options are the default
            behaviour equivalent to <option>NONE</option> and
            <option>DEPENDENCIES</option>, <option>DEPENDENTS</option> and
            <option>BOTH</option> respectively <varname>-am</varname>,
            <varname>-amd</varname> and <varname>-am -amd</varname>.

            <!-- TODO add url to external resource explaining this more and
            explain how this can work with a project in relation to checked
            out workspace project and external dependencies,
            also how does thsi work with Hudson upstream,
            downstream dependencies and so on  -->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Threading</term>
        <listitem>
          <para>This input takes the value for the
            <varname>-T</varname>
            command line option that enables the experimental support for
            parallel builds in Maven 3. A value of
            <varname>4</varname>
            enables four threads for the build. A value of
            <varname>2.5C</varname>
            would enable 2.5 threads per CPU core. When activating this feature,
            keep the experiemental nature of this feature as well as the not yet
            wide spread support for this feature in the various plugins.<!-- add link to external link like
            https://cwiki.apache.org/MAVEN/parallel-builds-in-maven-3.html
            maybe-->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Settings</term>
        <listitem>
          <para>This option corresponds to the
            <varname>-s</varname>
            command-line option for Maven 3 and supplies a Maven 3 build step
            with a custom settings configuration file. The dropdown for this
            field is populated with the Maven 3 Settings files configured in the
            Hudson Maven 3 Configuration page as shown in
            <xref linkend="fig-manage-mvn-3-settings"/>.
            <!-- TODO do we need to talk about security and injection of the
            settings like on the built in help or in more detail?
            -->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Global Settings</term>
        <listitem>
          <para>This option corresponds to the
            <varname>-gs</varname>
            command-line option for Maven and isn't used as frequently as the
            <varname>-s</varname>
            option. This option allows you to reference a custom global
            configuration file that is an alternative to the global settings
            file that ships with Apache Maven.
            <!-- TODO do we need to talk about security and injection of the
            settings like on the built in help or in more detail?
            -->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Tool Chains</term>
        <listitem>
          <para>Tool chains for Maven 3 build steps can be configured
            globally for your Hudson install as documented in
            <xref linkend="section-configure-maven-3-configuration"/>. The
            drop allows you to select one of these configured tool chains for
            to be used for the build step.
          </para>
          <!-- link to
          http://maven.apache.org/guides/mini/guide-using-toolchains.html
          -->
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>JVM Options</term>
        <listitem>
          <para>If your build requires specific JVM options, they can be set in
            this field. The options are passed straight through as MAVEN_OPTS
            and use the normal
            <option>java</option>
            command line options syntax. A common configuration for complex
            builds is to specify a larger memory for the JVM running Maven via
            <option>-Xmx1024m</option>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="section-maven-2-build-configuration">
    <title>Details of Configuring Maven 2 (Legacy) Build Options</title>

    <para>If for some reason you are still using Maven 2 and can not upgrade to
      Maven 3 and therefore take advantage of the advanced performance and
      features of Maven 3 and the
      Maven 3
      integration of Hudson offers you, you should use the Maven 2 (Legacy)
      integration in a free-style project build step. After configuring the
      general project options (see<xref linkend="chapter-build-creation"/>), you
      can configure one
      or more build steps. To add a build step, click on the Add build step
      button as shown in <xref linkend="fig-using-new-build-config"/>. To
      configure a Maven build, select <option>Invoke top-level Maven targets</option>.
    </para>
    <!-- TODO Change to Invoke Maven 2 (Legacy) -->

    <!-- TODO new screen shot with Maven 2 and Maven 3 when its in a release -->
    <figure id="fig-using-new-build-config">
      <title>Configuring Project Build Options</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-new-build-config.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-new-build-config.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The basic and advanced options for invoking a top-level Maven
    target are shown in <xref linkend="fig-using-top-level-maven" />.</para>

    <figure id="fig-using-top-level-maven">
      <title>Configuring a Maven 2 (Legacy) Build Step</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-top-level-maven.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-top-level-maven.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term>Maven Version</term>
        <listitem>
          <para>Your Hudson installation may have one or more Maven
            installations configured as part of the global Hudson configuration.
            This drop down allows you to specify the version of Maven for usage
            with the current build step.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Goals</term>
        <listitem>
          <para>This field allows you to specify the command line
            parameters used for the Maven invocation. These are phases,
            plugin goals as well as specific Maven command-line options like
            <varname>-P</varname> for profile selection, selection of a specific
            <varname>settings.xml</varname> file
            and
            so on.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>POM</term>
        <listitem>
          <para>If your project uses the standard
            <varname>pom.xml</varname>
            filename, there is no need to specify a POM. If your projects uses a
            POM with an alternative name or path other than directly in the
            project root, you can specify that file name and path here. This
            setting is equivalent to the command line option
            <option>-f pomfilepath</option>
            or<option>--file pomfilepath</option>. The path specified has to be
            relative to the project root.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Properties</term>
        <listitem>
          <para>You can pass one or more properties to the Maven process. This
            field accepts a list of properties with lines in a
            <option>key=value</option> format. These properties will be
            passed into the Maven build step invocation using the standard
            way of passing properties of <option>-Dkey1=value1
              -Dkey2=value2</option>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>JVM Options</term>
        <listitem>
          <para>If your build requires specific JVM options, they can be set in
            this field. The options are passed straight through as MAVEN_OPTS
            and use the normal
            <option>java</option>
            command line options syntax. A common configuration for complex
            builds is to specify a larger memory for the JVM running Maven via
            <option>-Xmx1024m</option>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Use private Maven repository</term>
        <listitem>
          <para>By default a Maven invocation will use a local repository in the
            current users home directory taking any further repository
            configuration done in
            <option>settings.xml</option>
            into account. Depending on the necessary separation of the different
            jobs running on Hudson it can be useful to have a separate Maven
            repository for each project. Activating this feature will cause the
            creation of a separate Maven repository in a
            <varname>.repository</varname>
            folder in the projects workspace. This can cause considerable usage
            of storage space, which consequently should be monitored carefully.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      The standard way of invoking a Maven build is to run the
      <option>clean</option>
      and
      <option>install</option>
      lifecycle phases in a command line call like<command>mvn clean
      install</command>. This can be easily achieved by adding a Maven build
      step and adding
      <option>clean install</option>
      as a
      <option>Goals</option>
      parameter. If so desired these two lifecycle phases can also be invoked
      separately by creating two Maven build steps with separate
      <option>clean</option>
      and
      <option>install</option>
      parameters. This would cause two separate invocations of Maven in
      sequence equivalent to <command>mvn clean; mvn install</command>
      Breaking up the invocations allows you to add further build steps in
      between and build an arbitrarily complex sequence of Maven and other
      invocations with completely separate parameters and so on. The You could
      for
      example slip a plugin goal invocation in between the clean and install
      invocations that prepares the execution environment for your build for
      example by setting up a test environment like an emulator or a specific
      database and content. Since you can do this in a separate build step you
      can invoke a shell script or an Ant target for such tasks, in case it is
      not automated via a Maven plugin or configuration.
    </para>

     <figure id="fig-using-top-level-maven-two-times">
      <title>Configuring two build steps as top-level Maven invocations</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-steps-maven-twice.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-steps-maven-twice.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="section-maven-artifacts">
    <title>Managing the Build Artifacts of a Maven Build</title>
    <!-- HBOOK-72 -->
    <para>in hudson artifact, Nexus, Sonar, in hudson maven repo plugin.
      .</para>
  </section>

  <section id="section-maven-multi-module">
    <title>Complex Builds with Maven Multi-module Setup</title>
    <!-- HBOOK-73-->
    <para></para>
  </section>

  <section id="section-maven-hudson-dependencies">
    <title>Complex Builds with Hudson Job Dependencies</title>
    <!-- HBOOK-74-->
    <para></para>
  </section>

  <section id="section-maven-release-build">
    <title>Automating Release Builds</title>
    <!-- HBOOK-75-->
    <para></para>
  </section>

</chapter>
