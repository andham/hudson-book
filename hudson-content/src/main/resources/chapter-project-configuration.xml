<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-build-creation">
  <title>Creating Hudson Projects</title>

  <section id="section-creating-new-project">
    <title>Creating New Hudson Projects</title>

    <para>To create a new Hudson project, click on
      <option>New Job</option> in
      the left navigation menu, which will display the form shown in
      <xref linkend="fig-using-new-project"/>.
    </para>

    <figure id="fig-using-new-project">
      <title>Creating a New Job in Hudson</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/create-new-job.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/create-new-job.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The most common way to create a new job using Hudson is to select
      <option>Build a free-style software project</option>. This will allow you
      to invoke a number of external and internal executions. If you are
      creating a project that is similar to an existing Hudson build, you may
      also choose
      <option>Copy an existing job</option>
      and then type in the name of the Hudson job in the
      <option>Copy from</option>
      text field. Once you have made your selection and provided a name for the
      new job, click on
      <option>OK</option>
      to continue.
    </para>

    <para>You can also configure Hudson to
      <option>Monitor an external job</option>
      like cron jobs, which can then affect other jobs. The last job type
      supported by Hudson is to
      <option>Build a multi-configuration project</option>, which can act like a
      container for a variety of different job executions.
    </para>

    <warning>
      <para>Your Hudson installation may provide an option to<option>
        Build a Maven 2/3 project (Legacy)</option>. This feature has numerous
        issues
        with the use of different Maven versions, especially Maven 3 versions
        and is not supported in Hudson. We recommend not to use this job type.
        Instead, we encourage you to use the native Maven support which is
        available in a free-style software project.
      </para>
    </warning>

    <figure id="fig-using-new-project-result">
      <title>Result of New Project Creation</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/new-project-result.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/new-project-result.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Once your job has been created, you will see a screen similar to the
      one shown in
      <xref linkend="fig-using-new-project-result" xrefstyle="select:label"/>,
      depending on your job type selection. You can now proceed to configure
      your project. If you need to change any of these settings at a later
      stage, navigate to a particular Hudson Project's Summary page by clicking
      on the name of the project on the main Hudson page. Once you are on a
      Hudson Project's Summary page, click on
      <option>Configure</option>
      in the left-hand navigation to load the Project Configuration screen.
    </para>
  </section>

  <section id="section-common-job-configurations">
    <title>Configuring Common Job Configuration Settings</title>

    <para>Independent of the job type you selected you will be able to configure
    a few common settings separated in the following sections:</para>
    <variablelist>
      <varlistentry>
        <term>General Project Settings</term>
        <listitem>
          <para>configure name, description and other general parameters</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Advanced Project Options</term>
        <listitem>
          <para>configure miscellaneous settings for advanced usage </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Source Code Management</term>
        <listitem>
          <para>configure source code management related parameters for
            various systems</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Build Triggers</term>
        <listitem>
          <para>configure how builds are started</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Post-build Actions</term>
        <listitem>
          <para>configure steps taken after a build completion</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Depending on the job type you chose additional sections will be
      present that will be explained later. Lets start with the common
      sections.
    </para>

    <section id="section-configuring-general-project-settings">
      <title>Configuring General Project Settings</title>

      <para>The first section on the Project Screen is the general project
      information, which is shown in <xref linkend="fig-using-project-info"
      xrefstyle="select:label" />.</para>

      <figure id="fig-using-project-info">
        <title>Configuring Project Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ci-using-proj-info.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ci-using-proj-info.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The section shown in the previous figure contains the following
      fields:</para>

      <variablelist>
        <varlistentry>
          <term>Project Name</term>
          <listitem>
            <para>The
              <option>Project Name</option>
              should be a short descriptive name, that easily allows your Hudson
              users to see what this project is. Consider this to be the
              identifier that Hudson uses to keep track of everything associated
              to this project. We recommend that your project names consist of
              simple alphanumeric characters and dashes. While Hudson will save
              a Project name contains spaces, the file path of the workspace
              will also contain spaces. The presence of spaces in a project name
              can cause unforeseen issues with builds and may results in build
              failure. We suggest to use e.g. underscores instead. The project
              name will be visible in the main Hudson page on the list of jobs.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>The
              <option>Description</option>
              should contain a paragraph that will inform Hudson users about the
              nature and purpose of a give Hudson project. Useful information
              for the users could for example be various source code management
              related parameters like branch or version or other parameters like
              target platform for the build artifacts. This will widely vary and
              depend on your job type. The description is visible on the main
              project specific page.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Discard Old Builds</term>
          <listitem>
            <para>If
              <option>Discard Old Builds</option>
              is not checked, Hudson will archive the results of all the builds
              it performs. Depending on build log and artifact size this can
              produce considerable amounts of storage space being used, which
              should in turn be monitored carefully.
            </para>
            <para>If
              <option>Discard Old Builds</option>
              is checked, the project configuration screen will display
              additional input fields that allow you to specify the number of
              builds and the number of days to retain builds.
            </para>
            <para>After pressing the
              <option>Advanced</option>
              button you can provide for separate configuration for the number
              of days the build artifacts are kept. Setting this value will
              cause older build artifacts to get deleted, without the logs,
              reports etc. getting deleted.
            </para>
            <para>An additional advanced configuration allows to set maximum
              number of builds to keep including its artifacts.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>This Build is Parameterized</term>
          <listitem>
            <para></para><!-- TODO build is parameterized-->
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Disable Build</term>
          <listitem>
            <para>If
              <option>Disable Build</option>
              is selected, no new builds will be executed until the project is
              re-enabled. This means that any builds that might have been
              triggered by SCM activity or by a periodic schedule will not be
              executed. This feature is very useful if you need to fix an issue
              with a build or build specific related infrastructure like source
              code management system and you want to temporarily take a
              particular Hudson job offline without affecting the rest of your
              Hudson setup and jobs.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Execute concurrent builds if necessary (beta)</term>
          <listitem>
            <para>If this checkbox is selected, Hudson will be able to execute
              more than one build for this project at the same time. This can be
              useful if your project is parameterized, or if you have a longer
              build, which may need to run multiple concurrent builds in
              response to independent changes to SCM. In many cases this setting
              is particularly useful, when Hudson is set up as a build cluster.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
        <term>JDK</term>
          <listitem>
            <para>This dropdown allows the selection of a specific Java
              Development Kit (JDK) for the project. It will only be available
              if multiple JDK's are configure in the global Hudson configuration
              as documented in
              <xref linkend="section-configure-jdk"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrict where this project can be run</term>
          <listitem>
            <para>If
              <option>Restrict where this project can be run</option>
              is checked, Hudson will display options that will allow you to
              specify the nodes on which a project build can be executed.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <warning>
        <para>If you are creating a continuous integration build that will run
          frequently, don't forget to check
          <option>Discard Old Builds</option>
          and configure Hudson to free up drive space. If your project is built
          regularly due to frequent changes in source control or small times
          between fixed scheduled builds you can easily fill up even the largest
          hard drive potentially resulting in your build server going offline.
        </para>
      </warning>
    </section>

    <section id="section-configuring-advanced-project-options">
      <title>Configuring Advanced Project Options</title>
      <para>The next section after the general project configuration is the
      <option>Advanced Project Options</option> section shown in <xref
      linkend="fig-using-adv-opt" xrefstyle="select:label" />.</para>

      <figure id="fig-using-adv-opt">
        <title>Configuring Advanced Project Options</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ci-using-adv-opt.png" scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ci-using-adv-opt.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>It contains the following fields:</para>

      <variablelist>
        <varlistentry>
          <term>Quiet period</term>
          <listitem>
            <para>The project specific
              <option>Quiet Period</option>
              set in this section overrides the global configuration documented
              in
              <xref linkend="section-global-hudson-configuration"/> and
              has the same effect. This settings depends on your build trigger
              configuration as documented below.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Retry Count</term>
          <listitem>
            <para>The project specific
              <option>Retry Count</option>
              overrides the global
              <option>SCM checkout retry count</option>
              and has the same effect.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Block build when upstream/downstream project is building</term>
          <listitem>
            <para>Hudson builds can be configured to have upstream as well
              downstream dependencies. Upstream dependencies are projects upon
              which this particular project's build depends. Downstream
              dependencies are projects that depend on the current builds
              results. If
              <option>Block build when upstream/downstream project is building</option>
              is selected this project will not start a build, if an
              upstream/downstream project is in the middle of a build or in the
              build queue.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Use custom workspace</term>
          <listitem>
            <para>If this selection is checked, you can instruct Hudson to use a
              custom directory for this project's workspace. If this option is
              not checked, Hudson will automatically assign a workspace location
              that is based on the project's name. As such it can be used to
              have projects names with spaces or other characters potentially
              causing file system level issues while using a save name for the
              workspace folder name.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section-configuring-source-code-management">
      <title>Configuring Source Code Management</title>
      <para>Hudson is typically used in conjunction with the source of the
        project available in a source code management system. Support for a
        large variety of SCM's is one the strength's of Hudson. This section
        allows for the configuration of the respective settings for your SCM of
        choice. The available list of choices will contain all SCM systems
        provided by Hudson and the installed plugins.
        <xref linkend="chapter-plugin-management"/>
        explains how to get support for your SCM installed, if it is not yet
        available. Once installed each SCM configuration will have different
        parameters, which are documented in
        <xref linkend="chapter-source-control"/>.
      </para>
    </section>

    <section id="section-configuring-build-triggers">
      <title>Configuring Build Triggers</title>
      <para>The next section to configure is
        <option>Build Triggers</option>. A Hudson job can
      be configured to build in response to build activity on a Hudson
      instance, in accordance with a regular schedule, or as a reaction to
      activity in a SCM system. Build triggers are configured on a Project's
      Configuration screen and the section is shown in <xref
      linkend="fig-using-build-triggers" xrefstyle="select:label" />.</para>

      <figure id="fig-using-build-triggers">
        <title>Configuring Build Triggers</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ci-using-build-triggers.png"
                       scalefit="1" />
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ci-using-build-triggers.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following types of build triggers can be configured:</para>

      <variablelist>
        <varlistentry>
          <term>Build after other projects are built</term>

          <listitem>
            <para>If this option is selected, Hudson will present you with a
              text field that accepts the names of one or more projects. If this
              field is populated, Hudson will trigger this project's build after
              a successful completion of one of the projects listed in this text
              field. The reverse behaviour of triggering a different project
              based on this projects build completing can be configured in the
              Post-build Actions.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build when Maven dependencies have been updated</term>
          <listitem>
            <para>Hudson projects can be configured to send out a notification
              to all projects that Maven dependencies have been updated as post
              build action (see
              <xref linkend="section-configuring-post-build-actions"/>). When
              you activate this build trigger a build of the project will be
              started once a such a notification is received.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Poll SCM</term>
          <listitem>
            <para>Selecting
              <option>Poll SCM</option>
              will cause Hudson to periodically poll your source code management
              system for changes and trigger a build if changes have been found
              and successfully retrieved.
            </para>
            <para>Selecting this option displays a text area, which accepts a
              standard cron expression. This allows for arbitrary polling
              interval from minutes to weekly and way beyond. It is important to
              consider the impact of this polling frequency setting on your SCM
              infrastructure, since it can cause significant load specifically
              when multiple projects with small polling frequencies all access
              the same SCM server.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build periodically</term>
          <listitem>
            <para>The
              <option>Build periodically</option>
              setting will cause Hudson to start a build of the project in
              regular intervals. Changes will be retrieved from the configured
              SCM, but a build will be triggered even if no changes were found.
              The interval configuration in the exposed text field accepts the
              same cron syntax as the
              <option>Poll SCM</option>
              configuration.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section-configuring-post-build-actions">
      <title>Configuring Post-build Actions</title>

      <para>Post build actions are an important part of Hudson. They allow you
        to trigger a number of events upon build completion. These include the
        communication of the results of the build in various ways as well as
        chain other builds to this build. As such these actions fulfill a
        crucial role of a continuous integration server as communication tool.
        Other important actions allow you to deal with the various artifacts
        produced by the build in the form of test results, documentation as well
        as actual executables or archives produced.
      </para>

      <para>Beyond the core post-build actions documented in the following,
        various plugins will make additional actions available. Source code
        management related plugin documentation can be found in
        <xref linkend="chapter-source-control"/>. Other plugins are
        documented in
        <xref linkend="chapter-plugins"/>. The minimum list of build actions
        available is visible in <xref linkend="fig-post-build-actions"/> and
        documented in more detail below.
      </para>

      <figure id="fig-post-build-actions">
        <title>Configuring Project Post-build Options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/post-build-actions.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/post-build-actions.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>


      <variablelist>
        <varlistentry>
          <term>Archive Maven 3 artifacts</term>
          <listitem>
            <para>Activating this option and potentially the detail option
              <option>Include generate POMs</option> will trigger Hudson to
              archive the artifacts built by Maven 3 build steps during the
              project build
              and potentially the associated POM files. With the option
            <option>Discard old artifacts</option> set,
              old artifacts will be removed after each successful build. It
              is a Maven 3 build step specific automation of the option to
              <option>Archive artifacts</option> without the need to specify the
              artifacts. The artifacts will be made available on the web
              interface like other archived artifacts. This option is especially
              useful in refactorings of the project and the resulting artifacts,
              since all artifacts are always archived and name or folder changes
              do not affect the archiving. Since there is no necessity to
              configure matching patterns, this option is more robust.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Record fingerprints of Maven artifacts</term>
          <listitem>
            <para>This option activated will trigger the Maven 3 integration
              of Hudson to record fingerprints of the created Maven
              artifacts, which will allow Hudson to keep track of when these
              artifacts are produced and used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Publish Javadoc</term>
          <listitem>
            <figure id="fig-post-build-actions-javadoc">
              <title>Configuring the Javadoc post build action</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-javadoc.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-javadoc.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>If your build produces Javadoc you can configure Hudson to
              make it available to users on the project page of Hudson:
            </para>
            <figure id="fig-post-build-actions-javadoc-junit-project">
              <title>Project page providing access to Javadoc and latest test
                results
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-javadoc-junit-project.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-javadoc-junit-project.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>

            <para>
              To configure this you have to select the checkbox and provide the
              relative path to the Javadoc in the
              <option>Javadoc directory</option>
              input field. Checking the
              <option>Retain Javadoc for each successful build</option>
              will keep the generated Javadoc for all successful builds in the
              specified folder for older builds instead of overwriting the
              documentation with each build.
            </para>
            <para>If a warning of
              <option>No such directory</option>
              is visible, it means that the current project workspace does
              not contain the specified path. This is not a problem as long as
              your build will create the folder. The
              <option>Console Output</option>
              of a specific build contains logging information started by
              <option>Publishing Javadoc</option>
              that can be used to debug any problems.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Aggregate downstream test results</term>
          <listitem>
            <figure id="fig-post-build-actions-aggregate-test">
              <title>Configuring the test result aggregation post build action
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-aggregate-test.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-aggregate-test.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>

            <para>This feature allows you to pull the test results of this
              project and any downstream projects together. This is especially
              useful when long running test are set up as separate
              downstream projects. You can either let Hudson figure out all
              downstream projects automatically or supply a specific list of
              projects in the <option>Jobs to aggregate</option> input box.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Publish JUnit test result report</term>
          <listitem>
            <figure id="fig-post-build-actions-junit">
              <title>Configuring the JUnit test result report post build
                action
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-junit.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-junit.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Activating this feature allows Hudson to interpret the JUnit
              test report format, produced by your test runs in the project and
              produce historic test result trends, a web interface for viewing
              the reports accessible from the project page as visible in <xref
                  linkend="fig-post-build-actions-javadoc-junit-project"/>. The
              location of the produced xml files has to be specified in the text
              input box, which allows the use of patterns to find files in
              multiple sub folders of the project.In addition it is possible to
              retain the build log output by checking the
              <option>Retain long standard output/error</option>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Archive the artifacts</term>
          <listitem>
            <figure id="fig-post-build-actions-archive-artifacts">
              <title>Configuring the artifacts archival post build action</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-archive-artifacts.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-archive-artifacts.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>
              With this feature enabled Hudson will keep the specified artifacts
              and make them available on the web interface. Using a wildcard
              syntax in the
              <option>Files to archive</option>
              as well as the
              <option>Excludes</option>
              input boxes you can specify the artifacts that should be saved
              after each successful build.The artifacts of the last successful
              build are available on the project overview page as visible in
              <xref linkend="fig-post-build-actions-archive-artifacts-project"/>.
            </para>
            <figure id="fig-post-build-actions-archive-artifacts-project">
              <title>A project overview page for the Hudson book build with the
                latest build artifact available for download
              </title>
              <mediaobject>
                <!-- TODO this screenshot needs to be updated when the
                changed wording for the artifacts is deployed on the server
                see https://github.com/hudson/hudson/pull/40 -->
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-archive-artifacts-project.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-archive-artifacts-project.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>In addition
              <xref linkend="fig-post-build-actions-archive-artifacts-build"/>
              shows how the artifacts produced by a specific build can be
              accessed on build specific page.
            </para>
            <figure id="fig-post-build-actions-archive-artifacts-build">
              <title>A build specific page for the Hudson book build with build
                artifact available for download
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-archive-artifacts-build.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-archive-artifacts-build.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>
              This feature is useful to make release artifacts like war, ear or
              zip files available for retrieval by other users and for archival
              purposes. Hudson can be used as the reference storage place for
              these artifacts that are in turn used e.g. for QA and production
              deployments or for distribution to customers.
            </para>
            <para>If your artifacts are created by a Maven 3 based build using
              Maven 3 build steps, it might be a better option to activate the
              option
              <option>Archive Maven 3 artifacts</option>
              for better archiving robustness as documented above in the
              respective section.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Recording fingerprints of files to track usage</term>
          <listitem>
            <figure id="fig-post-build-actions-fingerprint">
              <title>Configuring the fingerprinting post build action</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-fingerprint.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-fingerprint.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>The feature to
              <option>Record fingerprints of files to track usage</option>
              can help you track down, where files are used and produced. It
              will allow you to determine the build number that created an
              artifact by looking at the fingerprint, which is a unique
              identifier for the file that Hudson creates and keep track of.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build other projects</term>
          <listitem>
            <figure id="fig-post-build-actions-build-other">
              <title>Configuring downstream builds post build action
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-build-other.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-build-other.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>

            <para>Building other projects after completion of the current
              project build, is one of the key features that allows you to set
              up chains of project builds. They can then all be small in focus
              and build time. However in the bigger picture you are able to to
              run a build for very large and complex systems. The input box
              <option>Projects to build</option>
              accepts a comma separated list of projects to build together with
              a checkbox that allows you to trigger the dependent builds even if
              the current project build failed.
            </para>
            <para>Some examples for the usage of this feature are a main project
              triggering separate projects that invoke unit and/integration
              tests, shared libraries invoking server as well as client side
              application builds or build system plugin builds triggering all
              projects that use the plugin.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>E-mail Notification</term>
          <listitem>
              <figure id="fig-post-build-actions-email">
                <title>Configuring the email notification post build action
                </title>
                <mediaobject>
                  <imageobject role="web">
                    <imagedata contentdepth="100%"
                               fileref="figs/web/post-build-actions-email.png"
                               scalefit="1"/>
                  </imageobject>
                  <imageobject role="print">
                    <imagedata align="center"
                               fileref="figs/print/post-build-actions-email.pdf"
                               scalefit="0" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure>

            <para>A very valuable post-build action for a
              continuous
              integration build is the sending of build notification emails.
              Hudson can be configured to send out build failure notices to any
              email address. In most instances it will be best to send the
              notices to an email list allowing the potential recipients to
              opt-in and out as well as access archives. This email is one of
              the primary ways in which developers are notified of build
              failures.
            </para>
            <para>To configure this feature, check the checkbox next to E-mail
              Notification and then specify a recipient email addresses in
              Recipients separate by whitespace. Selecting
              <option>Send e-mail for every unstable build</option>
              will instruct Hudson to send an email for each build even if a
              build experience consecutive failures. Selecting
              <option>Send separate e-mails to individuals who broke the build
              </option>
              will send email to all SCM committers that affected a build that
              broke. The email will be sent with the configuration specified in
              <xref linkend="section-configure-email-notification"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notify that Maven dependencies have been updated</term>
          <listitem>
            <para>
              When activating this option Hudson will notify all projects with a
              build trigger configured to watch for Maven dependencies that have
              been updated (see<xref
              linkend="section-configuring-build-triggers"/>). When the
              additional option
              <option>Notify even when build is unstable</option>
              is selected this notification will occur even when an unstable
              build ran. A sideeffect of this could be that only some Maven
              dependencies have been updated, which could lead to further
              failures of the dependent projects.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

  </section>


  <section id="section-configuring-free-style-project">
    <title>Configuring Free-style Projects</title>
    <para>In addition to the common project configurations we discussed prior,
      a free-style Hudson project has a section for the build definition that
      allows you to add individual build steps. Press the <option>Add build
      step</option> button in the <option>Build</option> configuration 
      section to set up one or multiple steps that define your build.
    </para>
    <variablelist>
      <varlistentry>
        <term>Execute Windows batch command</term>
        <listitem>
          <para>The <option>Command</option> input allows you to specify the the
            name of the batch file to execute. The script has to return an error
            level value of zero to be recognized as a build success by Hudson.
            The script will be executed with the current workspace of the
            project as the directory. A number of environment variables about
            Hudson and the current project are passed to the execution of the
            script and can be used from within the script.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Execute shell</term>
        <listitem>
          <para>Executing a shell script as a build step is configured just like
            a Windows batch command. The unix convention to use the first line
            with a #! and the path to a executable allows you to write shell
            scripts in many available shell and scripting languages.
          </para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term>Invoke Ant</term>
        <listitem>
          <para>Invoking an Ant target can be added just like a shell script
            task, but with more configuration options. Find out more on how
            to configure Ant invocations in
            <xref linkend="section-ant-build-configuration"/>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    
    <variablelist>
      <varlistentry>
        <term>Invoke top-level Maven targets</term>
        <listitem>
          <para>A Maven based build step can be configured as documented in
            <xref linkend="section-maven-build-configuration"/>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

  </section>


  <section id="section-configuring-multi-config-project">
    <title>Configuring Multi-Configuration Projects</title>
    <!-- HBOOK-66 -->
    <para></para>
  </section>

  <section id="section-configuring-external-monitoring-project">
    <title>Configuring External Monitoring Projects</title>
    <!-- HBOOK-65 -->
    <para></para>
  </section>


</chapter>
