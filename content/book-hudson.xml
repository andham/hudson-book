<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<book id="book-hudson">
  <?dbhtml filename="index.html"?>

  <title>${book.title}</title>

  <bookinfo>
    <!--<isbn>9780984243303</isbn>-->

    <edition>${project.version}</edition>

    <author>
      <surname>Oracle, Inc.</surname>
    </author>

    <author>
      <surname>Sonatype, Inc.</surname>
    </author>

    <author>
      <surname>Moser</surname>
      <firstname>Manfred</firstname>
    </author>

    <!--<author>
      <surname>Prakash</surname>
      <firstname>Winston</firstname>
    </author>

    <author>
      <surname>van Zyl</surname>
      <firstname>Jason</firstname>
    </author>-->

    <author>
      <surname>O'Brien</surname>
      <firstname>Tim</firstname>
    </author>

    <editor>
      <othername>Tim O'Brien</othername>
    </editor>

    <copyright>
      <year>${copyright.year}</year>
      <holder>Oracle, Inc.</holder>
    </copyright>

    <date>${release.date}</date>

    <publisher>
      <publishername>Sonatype, Inc.</publishername>
      <address><street>12501 Prosperity Drive, Suite 350</street><city>Silver Spring</city><state>MD</state><postcode>20904</postcode></address>
    </publisher>

    <abstract>
      <para>This is the abstract of the Hudson book, it is such an amazingly
      awesome book...</para>
    </abstract>

    <subjectset>
      <subject>
        <subjectterm>COM018000</subjectterm>
      </subject>
    </subjectset>
  </bookinfo>


 <preface id="copyright" role="copyrightpg">
  <title>Copyright</title>

  <para>Copyright © ${copyright.year} ${project.organization.name}. All rights
  reserved.</para>

  <para>Online version published by ${project.organization.name},
  ${organization.address}.</para>

  <para>Hudson is a registered trademark of Oracle, Inc., in the United States
  and other countries.</para>

  <para>Nexus™, Nexus Professional™, and all Nexus-related logos are
  trademarks or registered trademarks of Sonatype, Inc., in the United States
  and other countries.</para>

  <para>Java™ and all Java-based trademarks and logos are trademarks or
  registered trademarks of Oracle, Inc., in the United States
  and other countries.</para>

  <para>IBM® and WebSphere® are trademarks or registered trademarks of
  International Business Machines, Inc., in the United States and other
  countries.</para>

  <para>Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United
  States and other countries.</para>

  <para>Apache and the Apache feather logo are trademarks of The Apache
  Software Foundation.</para>

  <para>Linux® is the registered trademark of Linus Torvalds in the U.S. and
  other countries.</para>

  <para>Many of the designations used by manufacturers and sellers to
  distinguish their products are claimed as trademarks. Where those
  designations appear in this book, and ${project.organization.name} was aware
  of a trademark claim, the designations have been printed in caps or initial
  caps.</para>

  <para>While every precaution has been taken in the preparation of this book,
  the publisher and authors assume no responsibility for errors or omissions,
  or for damages resulting from the use of the information contained
  herein.</para>
</preface>

<preface id="foreword">
  <title>Foreword: ${project.version}</title>

  <para>This book covers Hudson, the most widely used open source Continuous
  Integration Server. Oracle is excited to support the continued development
  of Hudson as the Hudson community completes its transition to the Eclipse
  Foundation.</para>

  <para>If you have any feedback or questions, you are encouraged to post on
  the Hudson project mailing lists.</para>

  <para>The Hudson Book Authors</para>

  <para>${release.month}, ${copyright.year}</para>

  <para>Edition: ${project.version}</para>
</preface>

<chapter id="chapter-introduction">
  <title>Introducing Hudson</title>

  <section id="intro-sect-intro">
    <title>What is Hudson?</title>

    <para>Hudson is a powerful and widely used open source continuous
    integration server. </para>

    <section>
      <title>Continuous Integration</title>

      <para>Martin Fowler and Kent Beck are largely credited with the first
      use of the term "Continuous Integration" as applied to the software
      development with Kent Beck's seminal 1999 book Extreme Programming
      Explained<footnote>
          <para>Beck, Kent (1999). Extreme Programming Explained. ISBN
          0-201-61641-6.</para>
        </footnote> being the first published work touching upon the idea of
      creating systems to continuously build and test systems in response to
      changes in source control.</para>
    </section>

    <section>
      <title>General Purpose Scheduler</title>

      <para></para>
    </section>

    <section>
      <title>Automation Platform</title>

      <para>Beyond the more traditional use cases of continuous integration
      and scheduled task execution, Hudson is a logic place to base automation
      efforts especially as they are related to the deployment of production
      code.</para>
    </section>
  </section>

  <section id="intro-sect-community">
    <title>The Hudson Community</title>

    <para>Hudson has a large user and developer community on its own and it
    part of the large Eclipse Foundation and community.</para>
  </section>

  <section id="intro-sect-project">
    <title>The Hudson Project</title>

    <para>The central access to the Hudson project is the web site hosted at
    <ulink url="http://hudson-ci.org">http://hudson-ci.org</ulink> and
    contains links to resources like wiki, issue tracker, mailing lists,
    source code and more.</para>
  </section>

  <section id="intro-sect-license">
    <title>Hudson's license</title>

    <para>Hudson and its components are licensed under various open source
    licenses.</para>

    <para>The migration of Hudson under the governance of the Eclipse
    Foundation will change the license to of all components to the Eclipse
    Public License.</para>
  </section>
</chapter>

<chapter id="chapter-ci">
  <title>Understanding Continuous Integration</title>

  <section id="section-ci-what">
    <title>What is Continuous Integration</title>
    <para>Continuous integration is a software development practice invented
      by Martin Fowler and Kent Beck during the emergence of the Extreme
      Programming software development methodology.
    </para>
    <para>
      Read more about it all on
      <ulink url="http://martinfowler.com/articles/continuousIntegration.html">
      Martin Fowler's web site</ulink> and
      <ulink url="http://en.wikipedia.org/wiki/Continuous_integration">wikipedia</ulink>
    </para>
    <para>While continuous integration is slowly becoming a mainstream best
      practice the more advanced usage of Hudson for continuous delivery or
      continuous deployment is not yet widespread.
    </para>
  </section>

    <!--<section id="section-ci-case">-->
      <!--<title>Case Study: Climbing without a Rope</title>-->
    <!--</section>-->

    <!--<section id="section-ci-heartbeat">-->
      <!--<title>Heartbeat for Development</title>-->
    <!--</section>-->
</chapter>

<chapter id="chapter-install">
  <title>Installing and Running Hudson</title>

  <para>The following sections detail the installation process for Hudson. In
    general there are two different approaches available.
  </para>

  <variablelist>
    <varlistentry>
      <term>WAR File</term>
      <listitem>
       section-maven-3-build-configuration <para>The Hudson website provides a Java web archive file (WAR) for
          download. This file can either be started directly or used in an
          existing Java servlet container or application server.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Native Package</term>
      <listitem>
        <para>Besides the web archive you can download packages for Hudson
          suitable for the use with the native package management of Ubuntu/Debian,
          Oracle Linux, Redhat/Fedora/CentOS and openSUSE.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>As a server-based application running 24x7 Hudson intrinsically should
    be installed as an operating system service, so that any system reboots
    necessary for maintenance or other reasons will automatically restart
    Hudson. The documentation for the Hudson install therefore includes
    documentation for setting up these services.
  </para>

  <section id="section-install-preprequisites">
    <title>Prerequisites</title>

    <para>Hudson only has one prerequisite, a
      <indexterm>
        <primary>Java</primary>
        <secondary>Java Runtime Environment (JRE)</secondary>
      </indexterm>
      Java Runtime Environment (JRE) compatible with Java 6 or higher.
      Hudson is
      most often run with the JRE that is bundled with a
      <indexterm>
        <primary>Java</primary>

        <secondary>Java Development Kit (JDK)</secondary>
      </indexterm>
      Java Development Kit (JDK) installation. We recommend using the latest
      version of the JDK/JRE that comes as part of your operating system.
    </para>

    <para>The latest version of Oracle's JDK 6 is the officially supported
      runtime. To download the latest release of the Oracle JDK, go to
      <ulink
          url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">
        <indexterm>
          <primary>Java</primary>
          <secondary>Java Development Kit</secondary>
          <tertiary>downloading</tertiary>
        </indexterm>
        http://www.oracle.com/technetwork/java/javase/downloads/index.html
      </ulink>
      , and download the latest Java 6 JDK.
    </para>

    <para>OpenJDK as available with many Linux distributions as part of their
      package system is known to work as a runtime for Hudson as are other JVM
      implementations such Oracle JRockit, HP-UX JDK and IBM JDK.
    </para>
  </section>

  <section id="section-install-war">
    <title>Installing Hudson with the WAR File Distribution</title>

    <para>The WAR file available for download on the Hudson web site
      is an executable WAR that has a servlet container embedded. Once
      downloaded and copied to the desired directory, it
      is therefore possible to start Hudson with the command</para>
    <screen>
      <command>java -jar hudson.war</command>
    </screen>
    <para>This will start the servlet container as the current operating
      system user inheriting  access rights to the file system and so on. The
      Hudson home directory will be set to the <varname>.hudson</varname>
      folder in the users home directory. Once started the web-based Hudson
      user interface will be available at <ulink
      url="http://localhost:8080/hudson">http://localhost:8080/hudson</ulink>
    </para>

     <figure floatstyle="" id="fig-ci-quickstart-app-win">
        <title>Hudson Application Window</title>

        <screenshot>
          <mediaobject>
            <imageobject role="web">
              <imagedata align="center"
                         fileref="figs/web/home-job-list.png"/>
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/home-job-list.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

    <para>This approach is suitable for testing and exploring Hudson,
      but it is not recommended to run Hudson like that in a production usage.
      Conveniently the WAR file is suitable to be deployed in most of the
      commonly used Java servlet containers and application server. The
      detailed process differs for these containers but in general the
      required steps are:
    </para>
    <variablelist>
      <varlistentry>
        <term>Set up HUDSON_HOME</term>
        <listitem>
          <para>Hudson locates its configuration files and all other data in
            one folder and a multitude of sub folders. This folder should be
            configured by setting up an environment variable of
            <varname>HUDSON_HOME</varname>. The application will pick up this
            setting and use the specified folder.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Deploy to the server</term>
        <listitem>
          <para>Depending on the application server and your access rights
            you can deploy the WAR file via a web-based administration
            console or by copying the WAR into a deployment folder.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <!-- TODO add a specific hudson user maybe .. but not when other stuff
    runs on app server .. then the app server user needs access to
    HUDSON_HOME and whatever..  -->
    <para>When using Hudson on your application server,
      you should ensure that the server is set up as an operating system
      service. The details of this setup widely vary between the various operating
      systems as well as the different application servers. The preferred and
      simpler method to install Hudson and run it as a service is a
      dedicated host and the operating system-specific package as supplied by
      the Hudson website and documented in the following sections.
    </para>
  </section>

  <section id="section-install-deb">
    <title>Installing Hudson on Ubuntu/Debian</title>

    <para>Hudson provides a package repository of deb files for users of
      Debian based distributions such as Debian, Ubuntu and others. This package
      will install Hudson and set it up as a service.
    </para>

    <procedure>
      <step>
        <title>Install Java runtime</title>
        <para>In order to fulfill the prerequisite of an installed Java runtime
          on a Debian based distribution it is best to install the meta package
          <varname>default-jdk</varname>, which will install OpenJDK,
          with your preferred package manager user interface. Either use a
          graphical user interface like
          <varname>synaptic</varname>
          or install from on the command-line with
        </para>
        <screen>
          <command>sudo apt-get install default-jdk</command>
        </screen>
        <para>If you prefer to use the Oracle Java runtime install it with</para>
        <screen>
          <command>sudo apt-get install sun-java6-jdk</command>
        </screen>
      </step>

      <step>
        <title>Add Hudson repository URL to package management</title>
        <para>The Hudson project hosts its packages in its own repository
          server. In order to use it you have to add its URL to your list of
          package sources with
        </para>
        <!-- this does not work since sources deb is missing on
        the repo -->
        <!--<screen>-->
          <!--<command>sudo add-apt-repository "deb http://hudson-ci.org/debian binary/"</command>-->
        <!--</screen>-->
        <!--<para>or</para>-->
        <screen>
          <command>sudo sh -c "echo 'deb http://hudson-ci.org/debian binary/' \ </command>
          <command>> /etc/apt/sources.list.d/hudson.list"</command>
        </screen>
        <para>or by adding the APT line <varname>deb http://hudson-ci.org/debian binary/</varname>
          in your graphical package manager as a repository URL.
        </para>
        <para>Future upgrades will not require this step to be repeated .</para>
      </step>

      <step>
        <title>Update the list of available packages</title>
        <para>Once the prior steps are completed you can update the list of
          available packages in your graphical package manager or with
        </para>
        <screen>
          <command>sudo apt-get update</command>
        </screen>
        <para>This step has to be repeated whenever you want to check for the
          availability of upgrades. Common practice is for the update of the
          list to run automatically on a regular basis.
        </para>
      </step>

      <step>
        <title>Install Hudson</title>
        <para>Once your list of available packages is updated,
          you can install Hudson with</para>
        <screen>
          <command>sudo apt-get install hudson</command>
        </screen>
        <para>which will require you to confirm and will then proceed to
          install and start Hudson. Your console output will look similar to this
        </para>
        <screen>
          <command>
$ sudo apt-get install hudson
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  hudson
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 38.8 MB of archives.
After this operation, 39.7 MB of additional disk space will be used.
WARNING: The following packages cannot be authenticated!
  hudson
Install these packages without verification [y/N]? y
Get:1 http://hudson-ci.org/debian/ binary/ hudson 2.0.0 [38.8 MB]
Fetched 38.8 MB in 39s (981 kB/s)
Selecting previously deselected package hudson.
(Reading database ... 180192 files and directories currently installed.)
Unpacking hudson (from .../archives/hudson_2.0.0_all.deb) ...
Processing triggers for ureadahead ...
ureadahead will be reprofiled on next reboot
Setting up hudson (2.0.0) ...
Adding system user `hudson' (UID 114) ...
Adding new user `hudson' (UID 114) with group `nogroup' ...
Not creating home directory `/var/lib/hudson'.
 * Starting Hudson Continuous Integration Server hudson  [ OK ]
          </command>
        </screen>
        <para>As you can see from the output above a hudson user was created
          . This user will run the Hudson server. The Hudson home folder is
          configured to be located in <varname>/var/lib/hudson</varname>,
          which will contain configuration, workspaces and so on and
          should be added to your backup strategy.
        </para>
      </step>

      <step>
        <title>Upgrade Hudson</title>
        <para>To upgrade Hudson when a new release is available you would run
        </para>
        <screen>
          <command>sudo apt-get upgrade</command>
        </screen>
        <para>which will stop the running Hudson server,
          upgrade Hudson and restart the server. Prior to upgrading you might
        want to backup your Hudson data configuration located in
          <varname>/var/lib/hudson</varname> and owned by the hudson user.
          created.
        </para>
      </step>
    </procedure>


    <para>The install configured Hudson as a service so that you can stop and
      start the service with
    </para>
    <screen>
      <command>sudo service hudson stop</command>
      <command>sudo service hudson start</command>
    </screen>
    <para>or with the equivalent direct call</para>
    <screen>
      <command>sudo /etc/init.d/hudson stop</command>
      <command>sudo /etc/init.d/hudson start</command>
    </screen>

    <para>Following the Linux standard base convention Hudson will create its
      log files into  <varname>/var/log/hudson/hudson.log</varname> and the
      log files will be rotated so you will no accumulate large log files
      using up disk space.
    </para>

    <para>Looking at the list of files installed by the package</para>
    <screen>
      <command>
$ dpkg -L hudson
/.
/var
/var/log
/var/log/hudson
/var/lib
/var/lib/hudson
/var/run
/var/run/hudson
/usr
/usr/share
/usr/share/doc
/usr/share/doc/hudson
/usr/share/doc/hudson/changelog.gz
/usr/share/doc/hudson/copyright
/usr/share/hudson
/usr/share/hudson/hudson.war
/usr/bin
/usr/sbin
/etc
/etc/apt
/etc/apt/sources.list.d
/etc/apt/sources.list.d/hudson.list
/etc/default
/etc/default/hudson
/etc/init.d
/etc/init.d/hudson
/etc/logrotate.d
/etc/logrotate.d/hudson
      </command>
    </screen>
    <para>reveals that a configuration file <varname>/etc/default/hudson</varname>
      was created. It contains a number of configuration parameters that you
      might want to adapt to your needs. These include e.g. the
      <varname>JAVA_ARGS</varname> that can be used to increase the memory
      allocation for Hudson or the <varname>HTTP-PORT</varname> parameter set
      to the common 8080. If you modify this file to suit your needs,
      you should add it to you backup strategy.</para>
  </section>


 <section id="section-install-rpm">
    <title>Installing Hudson on Oracle Linux, Redhat Enterprise Linux, CentOS and Fedora
    </title>
    <!-- at a later stage we can split this up but not now while it is all
    the same package and infrastructure -->
    <para>Oracle Linux, Redhat Enterprise Linux, CentOS and Fedora all use
      the same rpm package provided by the Hudson project. This package
      will install Hudson and set it up as a service.
    </para>

    <procedure>
      <step>
        <title>Install Java runtime</title>
        <para>In order to fulfill the prerequisite of an installed Java runtime
          on a RedHat based distribution it is best to install the meta package
          <varname>java</varname>, which will install OpenJDK,
          with your preferred package manager user interface. Either use a
          graphical user interface like
          <varname>Add/Remove Software</varname>
          or install from on the command-line with
        </para>
        <screen>
          <command>sudo yum install java</command>
        </screen>
      </step>

      <step>
        <title>Add Hudson repository URL to package management</title>
        <para>The Hudson project hosts its packages in its own repository
          server. In order to use it you have to add the repository meta data to
          your list of package sources with
        </para>
        <screen>
          <command>sudo wget -O /etc/yum.repos.d/hudson.repo http://hudson-ci.org/redhat/hudson.repo</command>
        </screen>
        <para>Future upgrades will not require this step to be repeated.</para>
      </step>

      <step>
        <title>Update the list of available packages</title>
        <para>Once the prior steps are completed you can update the list of
          available packages in your graphical package manager or with
        </para>
        <screen>
          <command>sudo yum check-update</command>
        </screen>
        <para>This step has to be repeated whenever you want to check for the
          availability of upgrades. Common practice is for the update of the
          list to run automatically on a regular basis.
        </para>
      </step>

      <step>
        <title>Install Hudson</title>
        <para>Once your list of available packages is updated,
          you can install Hudson with</para>
        <screen>
          <command>sudo yum install hudson</command>
      </screen>
      <para>which will require you to confirm and will then proceed to
        install and start Hudson. Your console output will look similar to this
      </para>
      <screen>
        <command>
$ sudo yum install hudson
Loaded plugins: langpacks, presto, refresh-packagekit
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package hudson.noarch 0:2.0.1-1.1 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

======================================================================
 Package       	Arch          	Version          	Repository   	Size
======================================================================
Installing:
 hudson        	noarch        	2.0.1-1.1        	test         	37 M

Transaction Summary
======================================================================
Install   	1 Package(s)

Total download size: 37 M
Installed size: 37 M
Is this ok [y/N]: y
Downloading Packages:
Setting up and reading Presto delta metadata
Processing delta metadata
Package(s) data still to download: 37 M
hudson-2.0.1-1.1.noarch.100% [=======] 953 kB/s | 37 MB 	00:40
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : hudson-2.0.1-1.1.noarch  	1/1

Installed:
  hudson.noarch 0:2.0.1-1.1

Complete!</command>
      </screen>
    </step>

   <step>
     <title>Upgrade Hudson</title>
     <para>To upgrade Hudson when a new release is available you would run
     </para>
     <screen>
       <command>sudo yum update</command>
     </screen>
     <para>which will stop the running Hudson server,
       upgrade Hudson and restart the server. Prior to upgrading you might
       want to backup your Hudson data configuration located in
       <varname>/var/lib/hudson</varname> and owned by the hudson user.
       created.
     </para>
   </step>
 </procedure>


  <para>The install configured Hudson as a service so that you can stop and
    start the service with
  </para>
  <screen>
    <command>sudo service hudson stop</command>
    <command>sudo service hudson start</command>
  </screen>

  <para>Following the Linux standard base convention Hudson will create its
    log files into  <varname>/var/log/hudson/hudson.log</varname> and the
    log files will be rotated so you will no accumulate large log files
    using up disk space.
  </para>

  <para>Looking at the list of files installed by the package</para>
  <screen>
    <command>
$ rpm -ql hudson
/etc/init.d/hudson
/etc/logrotate.d/hudson
/etc/sysconfig/hudson
/usr/lib/hudson
/usr/lib/hudson/hudson.war
/usr/sbin/hudson
/var/lib/hudson
/var/log/hudson
    </command>
  </screen>
   <para>reveals that a configuration file
     <varname>/etc/sysconfig/hudson</varname>
     was created. It contains a number of configuration parameters that you
     might want to adapt to your needs. These include e.g. the
     <varname>HUDSON_JAVA_OPTIONS</varname>
     that can be used to increase the memory allocation for Hudson or the
     <varname>HUDSON_PORT</varname>
     parameter set to the common 8080. If you modify this file to suit your
     needs, you should add it to you backup strategy.
   </para>
   <para>As part of the install a hudson user was created . This user will run
     the Hudson server. The Hudson home folder is configured to be located in
     <varname>/var/lib/hudson</varname>, which will contain configuration,
     workspaces and so on and should be added to your backup strategy.
   </para>
 </section>

  <section id="section-install-opensuse">
    <title>Installing Hudson on OpenSUSE</title>

    <para>OpenSUSE uses a special rpm package provided by the Hudson project.
      This package will install Hudson and set it up as a service.
    </para>

    <procedure>
      <step>
        <title>Install Java runtime</title>
        <para>In order to fulfill the prerequisite of an installed Java runtime
          on openSUSE it is best to install the meta package
          <varname>java</varname>, which will install OpenJDK,
          with your preferred package manager user interface. Either use a
          graphical user interface like
          <varname>YaST</varname>
          or install from on the command-line with
        </para>
        <screen>
          <command>sudo zypper install java</command>
        </screen>
      </step>

      <step>
        <title>Add Hudson repository URL to package management</title>
        <para>The Hudson project hosts its packages in its own repository
          server. In order to use it you have to add the repository meta data to
          your list of package sources with
        </para>
        <screen>
<command>sudo wget -O /etc/zypp/repos.d/hudson.repo http://hudson-ci.org/opensuse/hudson.repo</command>
        </screen>
        <para>Future upgrades will not require this step to be repeated.</para>
      </step>

      <step>
        <title>Update the list of available packages</title>
        <para>Once the prior steps are completed you can update the list of
          available packages in your graphical package manager or with
        </para>
        <screen>
          <command>sudo zypper refresh</command>
        </screen>
        <para>This step has to be repeated whenever you want to check for the
          availability of upgrades. Common practice is for the update of the
          list to run automatically on a regular basis.
        </para>
      </step>

      <step>
        <title>Install Hudson</title>
        <para>Once your list of available packages is updated,
          you can install Hudson with</para>
        <screen>
          <command>sudo zypper install hudson</command>
      </screen>
      <para>which will require you to confirm and will then proceed to
        install and start Hudson. Your console output will look similar to this
      </para>
      <screen>
        <command>
$ sudo zypper install hudson
Loading repository data...
Reading installed packages...
Resolving package dependencies...

The following NEW package is going to be installed:
  hudson

1 new package to install.
Overall download size: 37.1 MiB. After the operation, additional 37.1 MiB will be
used.
Continue? [y/n/?] (y):
Installing: hudson-2.0.1-1.1 [done]
Additional rpm output:
hudson                    0:off  1:off  2:off  3:on   4:off  5:on   6:off
        </command>
      </screen>

    </step>

   <step>
     <title>Upgrade Hudson</title>
     <para>To upgrade Hudson when a new release is available you would run
     </para>
     <screen>
       <command>sudo zypper update</command>
     </screen>
     <para>which will stop the running Hudson server,
       upgrade Hudson and restart the server. Prior to upgrading you might
       want to backup your Hudson data configuration located in
       <varname>/var/lib/hudson</varname> and owned by the hudson user.
       created.
     </para>
   </step>
 </procedure>


  <para>The install configured Hudson as a service so that you can stop and
    start the service with
  </para>
  <screen>
    <command>sudo /etc/init.d/hudson stop</command>
    <command>sudo /etc/init.d/hudson start</command>
  </screen>

  <!-- -->
    <para>Following the Linux standard base convention Hudson will
    create its
    log files into  <varname>/var/log/hudson/hudson.log</varname> and the
    log files will be rotated so you will no accumulate large log files
    using up disk space.
  </para>

  <para>Looking at the list of files installed by the package</para>
  <screen>
    <command>
$ rpm -ql hudson
/etc/init.d/hudson
/etc/logrotate.d/hudson
/etc/sysconfig/hudson
/etc/zypp/repos.d/hudson.repo
/usr/lib/hudson
/usr/lib/hudson/hudson.war
/usr/sbin/rchudson
/var/lib/hudson
/var/log/hudson
    </command>
  </screen>
    <para>reveals that a configuration file
      <varname>/etc/sysconfig/hudson</varname>
      was created. It contains a number of configuration parameters that you
      might want to adapt to your needs. These include e.g. the
      <varname>HUDSON_JAVA_OPTIONS</varname>
      that can be used to increase the memory allocation for Hudson or the
      <varname>HUDSON_PORT</varname>
      parameter set to the common 8080. If you modify this file to suit your
      needs, you should add it to you backup strategy.
    </para>
    <para>As part of the install a hudson user was created . This user will run
      the Hudson server. The Hudson home folder is configured to be located in
      <varname>/var/lib/hudson</varname>, which will contain configuration,
      workspaces and so on and should be added to your backup strategy.
    </para>
  </section>

  <!--<section id="section-install-service-manually">-->
    <!--<title>Manually Configuring Hudson as a Service</title>-->

    <!-- TODO This is different for each OS .. and not necessary since we have
    the native packages ... therefore this chapter should be optional for now
 and it a nice to have for later  -->

    <!--<para>When installing Hudson, you will often want to configure Hudson -->
  <!--as a-->
    <!--service. <indexterm>-->
        <!--<primary>Windows service</primary>-->
      <!--</indexterm>If you are on Windows, the Hudson distribution includes-->
    <!--binaries that can work with the Windows Services subsystem and if you are-->
    <!--on another platform such as Linux, <indexterm>-->
        <!--<primary>Unix startup scripts</primary>-->
      <!--</indexterm>Hudson also includes scripts that can be configured to start-->
    <!--Hudson as a service. The following sections provide instructions for-->
    <!--configuring Hudson as a service.</para>-->
<!---->
    <!--<section id="ci-quickstart-sect-startup-scripts">-->
      <!--<title>Startup Scripts for Linux</title>-->
<!---->
      <!--<para>-->
        <!--<indexterm>-->
          <!--<primary>Installation</primary>-->
<!---->
          <!--<secondary>Unix startup scripts</secondary>-->
        <!--</indexterm>-->
        <!--You can configure Hudson to start automatically, by copying the-->
        <!--<filename>Hudson</filename>-->
        <!--script to the-->
        <!--<filename>/etc/init.d</filename>-->
        <!--directory. On a Linux system (tested with Redhat, Fedora, Ubuntu, or-->
        <!--CentOS) perform the following operations as the root user:-->
      <!--</para>-->
<!---->
      <!--<orderedlist>-->
        <!--<listitem>-->
          <!--<para>Create a init script needs to be documented...and then copy to-->
            <!--<filename>/etc/init.d/matrix</filename>.-->
          <!--</para>-->
        <!--</listitem>-->
<!---->
        <!--<listitem>-->
          <!--<para>Make the-->
            <!--<filename>/etc/init.d/hudson</filename>-->
            <!--script executable—-->
            <!--<command>chmod 755 /etc/init.d/hudson</command>-->
          <!--</para>-->
        <!--</listitem>-->
<!---->
        <!--<listitem>-->
          <!--<para>(Optional) Set the RUN_AS_USER to "hudson". If you do this, you-->
            <!--will need to:-->
          <!--</para>-->
<!---->
          <!--<itemizedlist>-->
            <!--<listitem>-->
              <!--<para>Create a Hudson user</para>-->
            <!--</listitem>-->
<!---->
            <!--<listitem>-->
              <!--<para>Change the Owner and Group of your Hudson install directory-->
                <!--to matrix-->
              <!--</para>-->
            <!--</listitem>-->
          <!--</itemizedlist>-->
<!---->
          <!--<note>-->
            <!--<para>If you set the "RUN_AS_USER" variable, you'll have to change-->
              <!--the "pid" directory to point to a directory where this user has-->
              <!--read/write permissions. In most Linux distributions, /var/run is-->
              <!--only writable by root. The properties that would need to be added-->
              <!--to customize the PID file location is "wrapper.pid". For more-->
              <!--information about this property and how it would be configured in-->
              <!--wrapper.conf, see:-->
              <!--<ulink-->
                  <!--url="http://wrapper.tanukisoftware.com/doc/english/properties.html">-->
                <!--http://wrapper.tanukisoftware.com/doc/english/properties.html-->
              <!--</ulink>-->
            <!--</para>-->
          <!--</note>-->
        <!--</listitem>-->
      <!--</orderedlist>-->
<!---->
<!---->
      <!--<para>At the end of this you should have a file in-->
        <!--<filename>/etc/init.d/matrix</filename>-->
        <!--which starts with a series of configuration properties which look-->
        <!--something like this (assuming that you've installed Hudson in-->
        <!--<filename>/usr/local/matrix</filename>-->
        <!--and that you have Java installed in-->
        <!--<filename>/usr/java/latest</filename>):-->
      <!--</para>-->
<!---->
<!---->
      <!--<section id="ci-quickstart-sect-redhat-fedora">-->
        <!--<title>Add Hudson as a Service on Redhat, Fedora, and CentOS</title>-->
<!---->
        <!--<para>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>Redhat</secondary>-->
          <!--</indexterm>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>Fedora</secondary>-->
          <!--</indexterm>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>CentOS</secondary>-->
          <!--</indexterm>-->
          <!--This script has the appropriate-->
          <!--<command>chkconfig</command>-->
          <!--directives, so all you need to do to add Hudson as a service is run-->
          <!--the following commands:-->
        <!--</para>-->
<!---->
        <!--<screen>$-->
          <!--<command>cd /etc/init.d</command>-->
          <!--$-->
          <!--<command>chkconfig -add matrix</command>-->
          <!--$-->
          <!--<command>chkconfig -levels 345 matrix on</command>-->
          <!--$-->
          <!--<command>service matrix start</command>-->
          <!--Starting Hudson... Started Hudson. $-->
          <!--<command>tail -f /usr/local/matrix/logs/wrapper.log</command>-->
        <!--</screen>-->
<!---->
        <!--<para>The second command adds Hudson as a service to be started and-->
          <!--stopped with the-->
          <!--<command>service</command>-->
          <!--command and managed by the-->
          <!--<command>chkconfig</command>-->
          <!--command.-->
          <!--<command>chkconfig</command>-->
          <!--manages the symbolic links in-->
          <!--<filename>/etc/rc[0-6].d</filename>-->
          <!--which control the services to be started and stopped when the-->
          <!--operating system restarts or transitions between run-levels. The third-->
          <!--command adds Hudson to run-levels 3, 4, and 5. The service command-->
          <!--starts Hudson, and the last command tails the-->
          <!--<filename>wrapper.log</filename>-->
          <!--to verify that Hudson has been started successfully. If Hudson has-->
          <!--started successfully, you should see a message notifying you that-->
          <!--Hudson is listening for-->
          <!--<acronym>HTTP</acronym>-->
          <!--connections on a port.-->
        <!--</para>-->
      <!--</section>-->
<!---->
      <!--<section id="ci-quickstart-sect-ubuntu">-->
        <!--<title>Add Hudson as a Service on Ubuntu</title>-->
<!---->
        <!--<para>-->
          <!--<indexterm>-->
            <!--<primary>Installation</primary>-->
<!---->
            <!--<secondary>Ubuntu</secondary>-->
          <!--</indexterm>-->
          <!--The process for setting Hudson up as a service on Ubuntu differs-->
          <!--slightly from the process used on a Redhat variant. Instead of running-->
          <!--chkconfig, you should run the following sequence of commands once-->
          <!--you've configured the startup script in-->
          <!--<filename>/etc/init.d</filename>:-->
        <!--</para>-->
<!---->
        <!--<screen>$-->
          <!--<command>cd /etc/init.d</command>-->
          <!--$-->
          <!--<command>update-rc.d matrix defaults</command>-->
          <!--$-->
          <!--<command>service matrix start</command>-->
          <!--Starting Hudson... Started Hudson. $-->
          <!--<command>tail -f /usr/local/matrix/logs/wrapper.log</command>-->
        <!--</screen>-->
      <!--</section>-->
    <!--</section>-->
  <!--</section>-->

  <section id="ci-quickstart-sect-upgrading">
    <title>Upgrading Hudson</title>

    <para><indexterm>
      <primary>Hudson</primary>
      <secondary>upgrading</secondary>
    </indexterm>
      Since Hudson separates it's configuration and data storage from the
      application, it is easy to upgrade an existing Hudson installation. After
      a full backup of all configuration and data, you should be ready to
      proceed after notifying your users about potential downtime. You might
      also want to disable all jobs before proceeding.
    </para>
    <para>
      . For native package users this will be handled transparently with their
      package management system. For WAR file based installs, you only have to
      remove the old version WAR and replace it with the new version in your
      application server.
    </para>
    <!--TODO: See HBOOK-12 - this section needs  expansion-->
  </section>

  <section id="ci-quickstart-sect-behind-proxy">
    <title>Running Hudson Behind a Proxy</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>running behind proxy</secondary>
      </indexterm>If you installed Hudson as a stand-alone application, Hudson
    is running on a high-performance servlet. From
    a performance perspective, there is no reason for you not to run Hudson by
    itself without a proxy. Yet, more often than not, organizations run
    applications behind a proxy for security concerns and to consolidate
    applications using tools like <varname>mod_rewrite</varname> and
    <varname>mod_proxy</varname>. For this reason, we've included some brief
    instructions for configuration <varname><indexterm>
        <primary>Apache httpd</primary>

        <secondary>mod_proxy</secondary>
      </indexterm>mod_proxy</varname> in <indexterm>
        <primary>Apache httpd</primary>
      </indexterm>Apache httpd. We assume that you've already installed Apache
    2, and that you are using a Virtual Host for www.somecompany.com.</para>

    <para>Let's assume that you wanted to host Hudson behind Apache HTTPd at
    the <acronym>URL</acronym> <ulink
    url="http://www.somecompany.com">http://www.somecompany.com</ulink>. To do
    this, you'll need to change the context path that Hudson is served
    from.</para>




    <orderedlist>
      <listitem>
        <para>Need to explain how to run Hudson in the root context here </para>
      </listitem>

      <listitem>
        <para>Restart Hudson and verify that it is available on <ulink
        url="http://localhost:8080/">http://localhost:8080/</ulink>.</para>
      </listitem>

      <listitem>
        <para>Clear the Base <acronym>URL</acronym> in Hudson Application
        Server Settings in the administration interface.</para>
      </listitem>
    </orderedlist>

    <para>At this point, edit the HTTPd configuration file for the
    www.somecompany.com virtual host. Include the following to expose Hudson
    via <varname>mod_proxy</varname> at <ulink
    url="http://www.somecompany.com/">http://www.somecompany.com/</ulink>.</para>

    <programlisting>ProxyRequests Off 
ProxyPreserveHost On 

&lt;VirtualHost *:80&gt; 
  ServerName www.somecompany.com 
  ServerAdmin admin@somecompany.com 
  ProxyPass / http://localhost:8080/
  ProxyPassReverse / http://localhost:8080/
  ErrorLog logs/somecompany/hudson/error.log
  CustomLog logs/somecompany/hudson/access.log common
&lt;/VirtualHost&gt;</programlisting>

    <para>If you just wanted to continue to serve Hudson at the
    <filename>/hudson</filename> context path, you
    would include the context path in your <varname>ProxyPass</varname> and
    <varname>ProxyPassReverse</varname> directives as follows:</para>

    <programlisting>  ProxyPass /matrix/ http://localhost:8082/matrix/
  ProxyPassReverse /matrix/ http://localhost:8082/matrix/
</programlisting>

    <para>Apache configuration is going to vary based on your own
    application's requirements and the way you intend to expose Hudson to the
    outside world. If you need more details about Apache httpd and
    <varname>mod_proxy</varname>, please see <ulink
    url="http://httpd.apache.org">http://httpd.apache.org</ulink>.</para>
  </section>


</chapter>

<chapter id="chapter-by-example">
    <title>Learning Hudson by Example</title>

    <section id="example-sect-sampleproject">
      <title>A Sample Project</title>
    </section>

    <section id="example-sect-creatingjob">
      <title>Creating a Hudson Job</title>
    </section>

    <section id="example-sect-usecases">
      <title>Demonstrating Various Use Cases</title>
    </section>
</chapter>

<chapter id="chapter-configuration">
  <title>Hudson Configuration</title>

  <para>To configure Hudson, click on the Manage Hudson link in the left-hand
  navigation menu, which will display the screen shown in <xref
  linkend="fig-config-manage-hudson" />. This chapter will focus on the
  <indexterm>
      <primary>Configure System</primary>
    </indexterm><option>Configure System</option>
      section.</para>

  <figure id="fig-config-manage-hudson">
    <title>Managing Hudson</title>
    <mediaobject>
      <imageobject role="web">
        <imagedata contentdepth="100%"
                   fileref="figs/web/manage-hudson.png" scalefit="1" />
      </imageobject>

      <imageobject role="print">
        <imagedata align="center"
                   fileref="figs/print/manage-hudson.pdf"
                   scalefit="0" width="100%" />
      </imageobject>
    </mediaobject>
  </figure>

  <para>Depending on the plugins installed and activated on your Hudson system,
  different sections will be available in the system configuration section.
  These will either be explained below or with a plugin-specific section. For
  example the source code management-related global configurations for the
  different SCM systems is available in <xref
      linkend="chapter-source-control"/>.</para>
  <section id="section-global-hudson-configuration">
    <title>Global Hudson Configuration</title>

    <para>The first section in the
      <option>Configure System</option>
      screen contains options that allow you to configure global Hudson
      configuration attributes. This section is shown in
      <xref linkend="fig-global-hudson-configuration"/>.
    </para>

    <figure id="fig-global-hudson-configuration">
      <title>Configuring Global Hudson Configuration</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/global-hudson-configuration.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/global-hudson-configuration.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term>Home Directory</term>

        <listitem>
          <para>This parameter displays the absolute installation path of the
            currently running Hudson system. It is not a runtime configurable
            parameter. It is set by the server on startup. By default it will be
            the value of the HUDSON_HOME environment variable or the
            <varname>.hudson</varname>
            folder in the home directory of the operating system user running
            Hudson. The value is displayed here to allow the administrator to
            verify the correct setting.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>System Message</term>

        <listitem>
          <para>This message is displayed by Hudson in
          the main screen above the list of projects. It can be used as a
          welcome message or to e.g. broadcast upcoming maintenance to users
          of the Hudson instance via the user interface. It supports plain text
          as well as HTML snippets for formatting and enriching the
          message with dynamic content.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term># of Executors</term>

        <listitem>
          <para>This parameter controls the number of concurrent builds
            Hudson is configured to run. Optimal values in terms of performance
            will depend on the number of CPU's, IO performance and other hardware
            characteristics of the server running Hudson as well as the type
            of builds configured to run. A good starting point for
            experimentation is the number of CPUs.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Quiet period</term>

        <listitem>
          <para>A
            <option>Quiet Period</option>
            as specified in this configuration causes Hudson to wait the
            specified number of seconds before a triggered build is started. If
            your Hudson project is constantly "flapping" (switching between
            failure and success frequently), you may want to set the Quiet
            period to achieve more build stability. Another scenario this can be
            helpful is when large commits to your source control system are
            typically carried out in multiple smaller commits within a short
            time frame, so that the committer has a chance to get everything in
            without a build kicking off straight after the first commit causing
            a build failure. Setting this number to a large amount can generally
            reduce the number of builds running for this project, which will
            reduce the overall load for your Hudson server.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
      <term>SCM checkout retry count</term>

        <listitem>
          <para>The
            <option>SCM checkout retry count</option>
            determines the number of attempts Hudson makes to check out any
            updates when polling the SCM system for changes and finds the system
            to be unavailable.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Enable Security</term>

        <listitem>
          <para>The
            <option>Enable Security</option>
            checkbox switches on the security system that will require username
            and password for any access to run builds or change configurations
            of Hudson and build projects. A large number of configuration
            options and security providers can be used and more information can
            be found in
            <xref linkend="chapter-security"/>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Prevent Cross Site Request Forgery exploits</term>

        <listitem>
          <para>This feature will enable improved security against Cross Site
          Request Forgery exploits and is recommended to be turned on when
          your Hudson instance is available to the public internet. On the
          other hand it can be necessary to have this feature disabled, when
          your Hudson web interface is embedded in a dashboard type interface
          that also contains web content from other domains or even only
          internal server names or sub networks. In general it will not be
          necessary to enable this feature on an internal network, where only
          trusted parties have access to Hudson.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Help make Hudson better...</term>

        <listitem>
          <para>By selecting this feature to be enabled you agree for anonymous
            usage statistics about your Hudson installation to be created and
            securely sent to the Hudson development team and made available to
            the user community. The data sent consists of
            <itemizedlist>
              <listitem>
              <para>the Hudson version you are using</para>
              </listitem>

              <listitem>
                <para>operating system, JVM and number of executors for your
                  master Hudson and any slaves being used
                </para>
              </listitem>

              <listitem>
                <para>the name and version of all activated plugins</para>
              </listitem>

              <listitem>
                <para>the number of each project type configured to run</para>
              </listitem>

              <listitem>
                <para>HTTP information as provided by your Hudson
                instance</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="section-configure-global-properties">
    <title>Global Properties Configuration</title>

    <para>The global properties configuration allows the definition of key-value
      pairs that are exposed to all running builds as environment variables.
      Simply select the check box
      <option>Environment Variables</option>
      and add the desired name and value for the property in the interface
      displayed in<xref linkend="fig-configure-global-properties"/>.

    </para>

    <figure id="fig-configure-global-properties">
      <title>Configuring global properties</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/configure-global-properties.png"
                     scalefit="1"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/configure-global-properties.pdf"
                     scalefit="0" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      Depending on the build system used they can be picked up with different
      syntax e.g. $key or ${key}. By default a number of default variables are
      populated by Hudson automatically. These include job-related ones like
      <varname>JOB_NAME</varname>,
      <varname>BUILD_TAG</varname>
      or<varname>BUILD_NUMBER</varname>, Hudson node-related ones like
      <varname>NODE_NAME</varname>
      or more global ones like
      <varname>JAVA_HOME</varname>. A comprehensive list is available at
      <ulink url="env-vars.html">env-vars.html</ulink> on your Hudson server as
      linked from the inline help for the properties configuration.
    </para>
  </section>
  <section id="section-configure-jdk">
    <title>Configuring JDK Installations</title>

    <para>Hudson can support one or more JDK installations used for running your
      builds. Setting up multiple JDK installs allows the configuration of
      different projects being built by different Java versions in separate
      jobs. You can use this to ensure e.g. that builds as well as test suites
      run fine on an older Java version to ensure compatibility. Another
      application would be to run with JDK versions supplied by different
      vendors.
    </para>

    <para>The most common configuration of a JDK is to point to the already
      installed instance as used for running Hudson itself. This can be achieved
      simply by supplying a name like
      <varname>Open JDK 6</varname>
      in the
      <option>Name</option>
      input field and the absolute path in the
      <option>JAVA_HOME</option>
      input field in the screen as shown in
      <xref linkend="fig-using-jdk-config"/>.
    </para>

    <figure id="fig-using-jdk-config">
      <title>Configuring JDK Installations</title>
      <!-- HBOOK-56 -->
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/configure-jdk.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/configure-jdk.pdf" scalefit="0"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Furthermore it is possible to configure a JDK to be installed
      automatically by specifying a name as before and then selecting the
      <option>Install Automatically</option>
      check box. This exposes a drop-down labelled
      <option>Add installer</option>
      which lets you choose from the options
      <option>Install from Oracle</option>,
      <option>Extract *.zip/*.tar.gz</option>
      and<option>Run Command</option> as visible in <xref
        linkend="fig-using-jdk-config"/>.</para>

    <para>All the automatic install configurations cause Hudson to wait for the
      first build, which is configured to use a named instance of the JDK to
      initiate the JDK installation.
    </para>

    <para>The option
      <option>Install from Oracle</option>
      brings up a drop-down to choose the version as well as a checkbox that
      needs to be clicked to the JavaSE license agreement.
    </para>

    <para>If you select to use
      <option>Extract *.zip/*.tar.gz</option>
      as shown in
      <xref linkend="fig-extract-archive-installer"/>
      you will be able to configure a
      <option>Label</option>, the
      <option>Download URL for binary archive</option>
      and the
      <option>Subdirectory of extracted archive</option>.
    </para>


    <figure id="fig-extract-archive-installer">
      <title>Extract *zip/*.tar.gz archive Installer Configuration</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/extract-archive-installer.png"
                     scalefit="1"/>
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/extract-archive-installer.pdf"
                     scalefit="0" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>
      If you specify a label, only Hudson nodes with the same label will use
      this installer. By using different labels it is possible for example to
      get the same tool installed on different nodes with different operating
      systems from different automatic install setups. The download url
      specifies the full url from which the JDK will be downloaded. The actual
      download is run off the Hudson master, so that any Hudson nodes that need
      the JDK installed do not need to have access to the url location. After
      successful download the JDK will be installed in the specified sub
      directory of the Hudson install directory.
    </para>

    <figure id="fig-run-command-installer">
      <title>Run Command Installer Configuration</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/run-command-installer.png"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/run-command-installer.pdf" scalefit="0"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The last automatic installation option is the
      <option>Run a command</option>
      option displayed in<xref linkend="fig-run-command-installer"/>. The
      <option>Label</option>
      options works the same as for the archive extraction based install. The
      <option>Command</option>
      input allows you to specify the shell command to execute on the node for
      the install. Typically this is some package management invocation. The
      resulting tool directory has to be specified in the
      <option>Tool Home</option>
      input box.
    </para>

    <para>Once more than one JDK is configured in the global settings, each
      project configuration has an additional drop-down, which allows the
      selection of the JDK to be usd to build the project and is visible in
      <xref linkend="fig-extract-archive-installer"/>
    </para>
  </section>

  <section id="section-configure-ant">
    <title>Configuring Ant Installations</title>
    <para>In a similar fashion to the JDK install Apache Ant can be installed in
      multiple versions to be available for your Hudson configured builds. The
      default configuration is to supply a name like
      <varname>Apache Ant 1 .8.2</varname>
      for the Ant installation and a value in the
      <option>ANT_HOME</option>
      input that is defined by the absolute path to the folder containing your
      pre-existing local Apache Ant install e.g.
      <varname>/opt/apache-ant-1.8.2</varname>
    </para>

    <para>Using a preinstalled Ant requires manual install or the use of your
      operating system package management system, a provisioning system or as
      part of a virtual machine image management. To avoid this need Hudson can
      install a required Apache Ant version automatically when needed.
    </para>

    <para>The simplest way to achieve this is to select the
      <option>Install automatically</option>
      checkbox and select
      <option>Install from Apache</option>
      and choose the desired version from the drop-down.
    </para>

    <para>Similar to the JDK installation from Oracle it is possible to use
      <option>Install from Apache</option>
      to get Ant installed. The options to install from an archive or by
      running a command are available as well and work in the same way as for
      JDK installs. A use case for an install from a file would be a custom
      Ant distribution with libraries for in-house tasks and maybe Ant
      contrib included as documented in detail in
      <xref linkend="chapter-ant"/></para>
  </section>

  <section id="section-configure-maven">
    <title>Configuring Maven Installations</title>

    <para>One of the main uses cases for Hudson is building projects with Apache
      Maven. As explained in more detail in
      <xref linkend="chapter-maven"/>
      the preferred way to build Maven projects is the Maven 3 integration. It
      comes with a bundled Maven 3 install so you do not actually need to
      install Maven 3 at all to get started. However if you want, you can
      install additional Maven 3 installs with the user interface displayed in
      <xref linkend="fig-configure-maven-3-installation"/>.
    </para>

    <figure id="fig-configure-maven-3-installation">
      <title>Configuring Maven 3 Installations</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/configure-maven-3.png" scalefit="1"/>
        </imageobject>

        <imageobject role="print">
          <imagedata align="center" fileref="figs/print/configure-maven-3.pdf"
                     scalefit="0" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      The legacy Maven project type and Maven plugin use a separate installer as
      displayed in<xref linkend="fig-configure-maven-installation"/>. In
      addition to the same features as the Maven 3 installer it can be
      configured to download a Maven version from the Apache website when
      required.
    </para>
    <figure id="fig-configure-maven-installation">
      <title>Configuring Maven Installations</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%" fileref="figs/web/configure-maven.png"
                     scalefit="1"/>
        </imageobject>

        <imageobject role="print">
          <imagedata align="center" fileref="figs/print/configure-maven.pdf"
                     scalefit="0" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Both the Maven 3 and the Maven installation work in a similar way to
      the JDK and Ant installation options:
    </para>
    <variablelist>
      <varlistentry>
        <term>Use an existing installation</term>
        <listitem>
          <para>Specify a
            <option>Name</option>
            and add the path to your Maven install in the
            <option>MAVEN_HOME</option>
            input control.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Automatically install from Apache</term>
        <listitem>
          <para>Select the
            <option>Install automatically</option>
            checkbox and
            <option>Install from Apache</option>
            in the drop-down and choose the Maven version, you wish to install.
            This option is only available for the Maven installation.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Automatically install from an archive file</term>
        <listitem>
          <para>Select the
            <option>Install automatically</option>
            checkbox and
            <option>Extract *zip/*.tar.gz</option>
            and configure the installation as documented in
            <xref linkend="section-configure-jdk"/>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Automatically install via a command</term>
        <listitem>
          <para>Select the
            <option>Install automatically</option>
            checkbox and
            <option>Run Command</option>
            and configure the installation as documented in<xref
              linkend="section-configure-jdk"/>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>In general we recommend that you run your build using the latest Maven
      3.0 release. With multiple Maven installations configured a dropdown in
      the project build step configuration will allow you to choose the desired
      Maven version.
      <xref linkend="chapter-maven"/>
      provides an in-depth documentation for using Maven with Hudson.
    </para>
  </section>

  <section id="section-configure-maven-3-builder-defaults">
    <title>Maven 3 Builder Defaults</title>
    <para>The Maven 3 integration allows for a set of default values to be
      defined that are used when a new build step for invoking Maven 3 is added.
      These values can be defined in the section
      <option>Maven 3 Builder Defaults</option>
      in the global Hudson configuration here. The individual fields and their
      purpose and usage are documented in
      <xref linkend="section-maven-3-build-configuration"/>.
    </para>
  </section>

  <section id="section-configure-shell">
    <title>Configuring the Shell Executable</title>
    <para>Hudson allows for the ability to configure shell builds. If you
      have a
      build that requires the execution of shell scripts Hudson will by default
      execute<varname>/bin/sh</varname>. For more complex builds scripts running
      on different *nix environments, this can cause problems.
      <varname>/bin/sh</varname>
      often symlinks to a concrete shell like bash, ash, zsh or ksh. This setup
      of a specific shell will change from operating system to operating system
      as well as from user to user. If your scripts depend on a specific shell
      you should therefore specify your default shell in this input to e.g.
      <varname>/bin/bash</varname>. In a similar way you can add the path to
      a cygwin install of e.g. bash on your Windows server to run unix
      scripts as part of your build.
    </para>

    <figure id="fig-using-shell-execute">
      <title>Configuring Shell Executable</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ci-using-shell-execute.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/ci-using-shell-execute.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="section-configure-email-notification">
    <title>Configuring E-mail Notification</title>

    <!-- SEE HBOOK-45-->
    <para>Notification of build results and email-based notification
      specifically is a core feature of a continuous integration server. This
      configuration section as displayed in
      <xref linkend="fig-configure-email-notification"/>
      allows you to configure the SMTP-related settings to connect to the server
      and send the emails.
    </para>

    <tip>In general it can be advantageous to configure all email recipients in
      Hudson as mailing list addresses. Combined with a mailing list management
      system available to your potential recipients e.g. development and QA team
      members, this setup allows users to join any mailing list and therefore
      notifications for specific jobs without any configuration changes on
      Hudson.
    </tip>         `

    <figure id="fig-configure-email-notification">
      <title>Configuring Email Notification</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/configure-email-notification.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/configure-email-notification.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The following options can be configured:</para>

    <variablelist>
       <varlistentry>
         <term>SMTP Server</term>

         <listitem>
           <para>The
             <option>SMTP server</option>
             configuration is typically the IP number of the mail server or a
             fully qualified name including the domain e.g.
             <varname>smtp.example.com</varname>
             . If the mail server is reachable by host name or some alias e.g.
             <varname>hermes</varname> from the Hudson server you can use it as
             the SMTP server configuration.
           </para>
         </listitem>
       </varlistentry>

      <varlistentry>
        <term>Default user e-mail suffix</term>

        <listitem>
          <para>This suffix is appended to the Hudson user names used to log in
            to Hudson and the result can be used for e-mail notification. E.g.
            if the Hudson instance runs for
            <varname>example.com</varname>
            you could supply the suffix of <varname>@example.com</varname>. A
            Hudson user with username
            <varname>jane.doe</varname> would then receive email
            notifications at the email<varname>jane.doe@example.com</varname>.
            This can be especially useful with security setups using an identity
            management system like LDAP for Hudson access as well as email
            address setup as documented in <xref linkend="chapter-security"/>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>System Admin E-Mail Address</term>
       <listitem>
          <para>This is the email address used as the email sender in any
            E-mail notification sent by the server. When configuring this
            email you should either ensure that emails sent back as a reply
            are monitored by somebody or bounced by the server with some
            meaningful error message.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Hudson URL</term>

        <listitem>
          <para>The <option>Hudson URL</option> value will be used in the
            email notifications sent out to provide links to build results
            and so on. Provide a URL that will be valid for the audience of
            your notifications. If all recipients will be on an intranet or
            VPN you can use a non-public URL or IP number.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>In addition to basic SMTP configuration parameters,
      you can click the <option>Advanced Options</option> button for further
      configuration that allows you to send email via servers that require
      authentication. Most SMTP servers will require at least user name and
      password to be accessed.</para>
    <variablelist>

      <varlistentry>
        <term>Use SMTP Authentication</term>

        <listitem>
          <para>Clicking on the checkbox will reveal
            <option>User Name</option>
            and
            <option>Password</option>
            input fields. Depending on the server configuration your user name
            will be just the login name or the full email address or either.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Use SSL</term>

        <listitem>
          <para>Select this checkbox if your SMTP server supports connecting
            with SSL activated.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>SMTP Port</term>

        <listitem>
          <para>This configuration allows you to specify a custom port for
            the communication with mail server. If the field is left empty the
            default ports are used. These are 25 for SMTP and 465 for SSL
            secured SMTP. It is a common practice to configure a different
            port, so be sure to check with the administrator of the mail
            server what port you should be using.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Charset</term>

        <listitem>
          <para>The <option>Charset</option> configuration determines the
            character set used for the composed e-mail message.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Test configuration</term>

        <listitem>
          <para>Pressing this button will execute the current configuration
            for sending emails. Depending on your configuration and network
            setup you should receive an email after a short while.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="section-configure-email-gmail">
      <title>E-mail Notification Via Gmail</title>
      <!-- HBOOK-60 -->
      <para>In order to use GMail to send your emails you will need to
        configure the <option>SMTP server</option> to <varname>smtp.gmail
          .com</varname>. In addition you will have to have a Gmail account
        and provide the GMail e-mail address, or any other email address
        configured to be accepted in your Gmail account, as the <option>User
        Name</option> and configure the <option>Password</option>.

<!--        Does it support SSL? What port? See http://184.73.106.215:8080/ -->
      </para>
    </section>

    <section id="section-configure-email-exchange">
      <title>E-mail Notification Via Exchange Server</title>
      <!-- HBOOK-58 -->
      <!-- <para>need to explain how to setup different advanced config related
      to
        SSL and others by using javamail parameters in system properties as
        linked in the built in help, </para> -->
    </section>

    <section id="section-configure-email-advanced">
      <title>Advanced configuration with JavaMail system properties</title>
      <!-- HBOOK-57 -->
    </section>
    <section>
      <title>Troubleshooting E-mail Notification</title>
      <para>not sure what to put here..
      </para>
      <variablelist>
        <varlistentry>
          <term>Spam filter related problems</term>
          <listitem>
            <para>One of the common problems for build server notification
              emails not being received are spam filter setting on the server
              and/or client side of the recipient. Most spam filter systems will
              allow you to access a list of filtered message and configure a
              white list of senders. Adding the <option>System Admin
              E-mail Address</option> to the white list will ensure that your
            build notifications reach you.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="section-configure-maven-3-configuration">
     <title>Managing Maven 3 Configuration</title>

     <para>The Maven 3 integration of Hudson provides you with the ability to
     manage custom Maven configuration files directly through the Hudson user
     interface. You can manage:</para>

     <itemizedlist>
       <listitem>
         <para>Maven Settings Configuration</para>
       </listitem>

       <listitem>
         <para>Maven Toolchains Configuration</para>
       </listitem>
     </itemizedlist>

    <section>
      <title>Opening the Maven 3 Configuration Page</title>

      <para>To open the Maven 3 Configuration page, click on
        <option>Manage Server</option>
        in the left-hand Hudson menu, and then select the
        <option>Maven 3 Configuration</option>
        item shown in<xref linkend="fig-config-manage-hudson"/>.
      </para>

      <para>Once you select the Maven 3 Configuration option, you will see the
        page shown in<xref linkend="fig-manage-mvn-3-configurations"/>. If you
        have already configured Maven Settings or Maven Toolchains configuration
        documents they will appear in the list of documents shown on this page.
        If you have not configured any Maven configuration documents, you will
        see the empty configuration screen shown in<xref
            linkend="fig-manage-mvn-3-configurations"/>.
      </para>

      <figure id="fig-manage-mvn-3-configurations">
        <title>The Maven 3 Configuration Page</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/manage-mvn-3-configurations.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/manage-mvn-3-configurations.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>To create a new Maven 3 Configuration document, click on the
        <option>Add</option>
        button. This will create a new configuration document and display a form
        that will allow you to name the document, describe the document, select
        a document type, and supply configuration content for a configuration
        document.
      </para>

      <para>To remove an existing document, select the document from the list of
        documents shown and click on the
        <option>Remove</option>
        button. This will load a confirmation dialog. If the action is
        confirmed, the document will be permanently removed from your Hudson
        instance.
      </para>

      <para>Click the Refresh button in the interface to reload the Hudson
        configuration and display any configuration documents which may have
        been altered since you first loaded this page.
      </para>
    </section>

    <section>
      <title>Managing Maven 3 Settings Configuration</title>

      <para>To create a new Maven 3 Setting configuration file which can be
        referenced by a Hudson Maven 3 build step, click on the
        <option>Add</option>
        button as shown in<xref linkend="fig-manage-mvn-3-configurations"/>.
        Clicking on Add will display a form containing the ID, Type, Name,
        Description, and Attribute fields as shown in<xref
            linkend="fig-manage-mvn-3-settings"/>. Select
        <option>SETTINGS</option>
        for the Type field.
      </para>

      <figure id="fig-manage-mvn-3-settings">
        <title>Managing Maven 3 Settings in Hudson</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/manage-mvn-3-config-settings.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/manage-mvn-3-config-settings.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The sample Maven 3 Settings configuration shown in
        <xref linkend="fig-manage-mvn-3-settings"/>
        define a General Maven 3 Settings file which configures all Maven 3
        builds to read artifacts from a corporate Nexus repository. This sample
        XML was copied from
        <ulink
            url="http://www.sonatype.com/books/nexus-book/reference/maven-sect-single-group.html">
          the Maven 3 Settings example
        </ulink>
        in the Sonatype Nexus book and customized to reference a hypothetical
        server running on
        <varname>nexus.sonatype.org:8081</varname>.
      </para>

      <para>Usage of the Maven 3 Settings configuration file in a Hudson job is
        documented in <xref linkend="section-maven-3-build-configuration"/>.
      </para>


      <!-- TODO add more stuff about tool chains and link to
      http://maven.apache.org/guides/mini/guide-using-toolchains.html
      potentially
      -->
    </section>
  </section>

</chapter>

<chapter id="chapter-security">
  <title>Securing Hudson</title>

  <para>As an important part for a software development infrastructure Hudson
  is often installed on local networks. No further security requirements 
    might be needed, when all users on the network are trusted. However with 
    distributed teams, cooperation between companies, 
    external contractors or just open source projects publicly available 
    there are plenty of use cases that require Hudson to be secured. </para>


  <section>
    <title>Security Settings Overview</title>
    <para>Out of the box Hudson has no security enabled, but it can easily be
      turned on by checking
      <option>Enable security</option>
      in the global configuration of Hudson as displayed in <xref
        linkend="fig-global-hudson-configuration"/> and you will be able to
      set up your desired security settings with the options visible in
      <xref linkend="fig-security-overview"/> and documented in this chapter.
    </para>
    <figure id="fig-security-overview">
      <title>Overview of the available security settings</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/security-overview.png" scalefit="1"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center" fileref="figs/print/security-overview.pdf"
                     scalefit="0" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

  </section>

  <section>
    <title>Miscellaneous Security Related Settings</title>

    <variablelist>
      <varlistentry>
        <term>TCP port for JNLP slave agents</term>
        <listitem>
          <para>The port configuration should be set to
            <option>Disable</option> for Hudson deployments without any slave
            nodes. With slave nodes you can set the port to the default
            <option>Random</option> port. Hudson will randomly choose a port
            avoid port collisions with other services. When running the
            Hudson cluster within a firewall secured environment between the
            nodes, you can choose a fixed port and then ensure that the port
            is open on the respective servers.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Markup Formatter</term>
        <listitem>
          <para>Raw HTML</para> is the default setting that causes Hudson to
          render any input data from text fields as HTML in the user
          interface. This allows for added links and more,
          but also has the potential for cross site scripting XSS attacks.
          <!-- TODO there are not plugins or anything that add a different
          formatter!?, asked on the mailing list -->
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Access Control</title>

    <para>With security enabled, Hudson supports the following security
      realms out of the box. Further options are available as plugins. </para>

    <itemizedlist>
      <listitem>
        <para>Delegate to servlet container</para>
      </listitem>
      <listitem>
        <para>Unix user/group database</para>
      </listitem>
      <listitem>
        <para>Hudson's own user database</para>
      </listitem>
      <listitem>
        <para>LDAP (Lightweight Directory Access Protocol</para>
      </listitem>
    </itemizedlist>

    <para>Authorization schemes available are</para>
    <itemizedlist>
      <listitem>
        <para>Logged-in users can do anything</para>
      </listitem>
      <listitem>
        <para>Matrix-based security</para>
      </listitem>
      <listitem>
        <para>Project-based Matrix Authorizations Strategy</para>
      </listitem>
      <listitem>
        <para>Legacy mode</para>
      </listitem>
      <listitem>
        <para>Anyone can do anything</para>
      </listitem>
    </itemizedlist>
    <para>which can be seen in <xref linkend="fig-security-overview"/> and
      are documented in detail below.</para>

    <section>
      <title>Configuring Security Realms</title>
      <para>The configuration of the security realm allows you to define
        where user names and passwords are stored and administrated.
        Depending on your deployment it can be useful to tie into already
        existing systems or run a separate realm for Hudson.
      </para>

      <section>
        <title>Delegating to a Servlet Container</title>
        <!--We need a walk-through for how this works.  We also need to
        motivation and explanation.   What protocol is used?  How does this work?
        SEE HBOOK-47-->
        <para>By default running from the war directly Hudson is running in the
          winstone servlet container and there will be no security provided by
          it. However for production usage the preferred deployment method is to
          have Hudson running within a servlet container like Tomcat or Jetty or
          an application server like Glassfish or JBoss AS as documented in
          detail in
          <xref linkend="chapter-install"/>.
        </para>
        <para>Depending on the servlet container you will have access to
          management consoles that allow you to maintain and administrate users
          and groups, which Hudson can then use for authorization.
        </para>
        <para>This feature can be especially useful if other application are
          already using the servlet container authorization and you want to
          achieve a single-sign on for all applications running on this
          server or cluster of servers or you simply prefer to manage your
          users from the application server user interface.
        </para>
        <para>When using this security realm, you will need to use matrix based security
          as documented in <xref linkend="section-security-authorization-matrix"/>
          or  project-based matrix authorization strategy as documented in
          <xref linkend="section-security-authorization-project"/> and set up the user/group
          you want to allow in Hudson in the matrix with the desired access rights.</para>
      </section>

      <section>
        <title>Relying on Unix Users and Groups</title>
        <para>If you select this option, Hudson will consult the Unix user/group
          database on the machine it is running on. To do so it will use the
          Pluggable Authentication Modules (PAM)
          <ulink
            url="http://en.wikipedia.org/wiki/Pluggable_Authentication_Modules"/>
          library. The user running Hudson has to be able to access PAM and be a
          member of the
          <code>shadow</code>
          group. As visible in
          <xref linkend="fig-security-unix"/>
          the setup allows for the definition of a service name and test via
          provided button.
        </para>
        <figure id="fig-security-unix">
          <title>Overview of the available security settings</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-unix.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center" fileref="figs/print/security-unix.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>

        <tip>
          If you get a stack trace about not being able to find the file
          libpam.so it might work to create the correct symlink like this
          <screen>
            <command>
sudo ln -s /lib/x86_64-linux-gnu/libpam.so.0 /lib/x86_64-linux-gnu/libpam.so
            </command>
          </screen>
        </tip>

        <para>Commonly the users and groups are stored in
          <code>/etc/passwd</code>
          and<code>/etc/group</code>, but depending on the Unix/Linux version
          and the security setup the setup might vary a lot. With this setup
          user and group administration is entirely separate from your Hudson
          install. Use the your preferred administration tool on the command
          line or a graphical user interface.
        </para>

        <para>A consequence of using this security realm is that the Hudson
          instance and access details are tied to the specific server Hudson is
          running on. This means that the user and group setup as to be backed
          up in addition to Hudson data itself and it can not be easily migrated
          unless some sort of single sign on is used across all servers. However
          on the other hand if this sort of infrastructure already exists users
          can just reuse their current login details and have should have access
          to change password and other facilities.
        </para>
      </section>

      <section>
        <title>Using the Hudson Internal User Database</title>
        <para>A convenient method to control access to Hudson without
          external dependencies is to use the internal user database of
          Hudson itself. To activate this feature select
          <option>Hudson's own user database</option> as displayed in
          <xref linkend="fig-security-hudson-db"/></para>
        <figure id="fig-security-hudson-db">
          <title>Overview of the available security settings</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-hudson-db.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center" fileref="figs/print/security-hudson-db.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The option <option>Allow user to sign up</option> activates the
          <option>Sign Up</option> screen as displayed in
          <xref linkend="fig-security-signup"/>, which also displays a
          captcha that is displayed when the option <option>Enable captcha on
            sign up</option> is activated.
        </para>

        <figure id="fig-security-signup">
          <title>Sign up screen for new users</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-signup.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center" fileref="figs/print/security-signup.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>By providing all details in the sign up form a user can create an
          account to access Hudson. Once a user is signed up and logged in he
          can use then click on his user name in the top left corner and then on
          the
          <option>Configure</option>
          option in the left hand menu to access the user configuration screen,
          which allows password resets among other tasks.
        </para>
        <figure id="fig-security-user-configure">
          <title>User configuration</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-user-configure.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center" fileref="figs/print/security-user-configure.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>Light-weight Directory Authentication Protocol (LDAP)</title>
        <para>If you have an LDAP server, Hudson can be configured to use
        this server to authenticate users. The administration interface in
            <xref linkend="fig-security-ldap"/> allows you to provide all the necessary details
        for Hudson to connect to your LDAP server.</para>
        <figure id="fig-security-ldap">
          <title>Overview of the available security settings</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-ldap.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center" fileref="figs/print/security-ldap.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <variablelist>
            <varlistentry>
                <term>Server</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>root DN</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>User search base</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>User search filter</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Group search base</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Manager DN</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Manager Password</term>
                <listitem>
                    <para></para>
                </listitem>
            </varlistentry>
        </variablelist>

        <!--We need a section to motivate the LDAP realm, talk about when to use it.
        This section also needs to talk about compatibility with
  various LDAP implementations, and it needs to provide a step-by-step walkthrough.
  SEE HBOOK-48-->

          <!-- LDAP
Select LDAP for the Security Realm and click the help icon for each configuration option to see information about the settings.

If login attempts result in "OperationNotSupportedException - Function Not Implemented", "Administrative Limit Exceeded" or similar error, the LDAP query to determine the group membership for the user may be triggering this. First try setting the "Group search base" setting as specific as possible for your LDAP structure, to reduce the scope of the query. If the error persists, you may need to edit the WEB-INF/security/LDAPBindSecurityRealm.groovy file that is included in hudson.war. Change the line with groupSearchFilter = "(| (member={0}) (uniqueMember={0}) (memberUid={1}))"; to query only of the field used in your LDAP for group membership, such as groupSearchFilter = "(member={0})"; (then restart Hudson).

Groups
Prefix LDAP groups with ROLE_ and convert them to uppercase when assigning privileges to LDAP groups. For example, the LDAP group Developers (cn=Developers) would be used as ROLE_DEVELOPERS in Hudson
Group names with non-alpha characters such as hyphen (-), space and comma do not seem to work.
Hudson does not support indirect group memberships, i.e. if a user is a member of a group A which is itself a member of group B, the user would not get the privileges (e.g. "Adminster Hudson") defined for B - only those defined for A.


One has to add groups prefixing with "ROLE_" (without quotes). I'm using OpenLDAP as its backend.-->
        <para></para>
      </section>

    </section>

    <section>

      <title>Configuring an Authorization Strategy</title>
      <para>Once you decided upon the security realm you basically know how
        users and groups will be created and what has to be done for a user
        to be able to log in to Hudson. As a next step you need to decide on
        the authorization strategy, which determines what user can do once
        they are logged in.
      </para>

      <section>
        <title>Logged-in users can do anything</title>
        <para>This authorization strategy grants read access to Hudson anybody,
          but reserves any modifications for users with a valid account. Once
          the user is logged-in however they have full access rights to
          everything including project deletion and other critical
          functionality. You therefore should be certain to have a good backup
          strategy in place for critical data and that your users are capable
          of using Hudson in an administrative function.
        </para>
      </section>

      <section id="section-security-authorization-matrix">
        <title>Matrix-based security</title>
        <para>For more fine grained control over what specific users or
          groups of users can do you can configure Hudson to use
          <option>Matrix-based security</option> as visible in a minimal
          configuration in <xref linkend="fig-security-authorization-matrix"/>.
        </para>
        <figure id="fig-security-authorization-matrix">
          <title>Matrix based security</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-authorization-matrix.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/security-authorization-matrix.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Using the input field for <option>User/group to add</option>
          you can create new rows in the security matrix. The matrix provides
          sections to configure access rights for
        </para>
        <itemizedlist>
          <listitem>
            <para>Overall</para>
          </listitem>
          <listitem>
            <para>Slave</para>
          </listitem>
          <listitem>
            <para>Job</para>
          </listitem>
          <listitem>
            <para>Run</para>
          </listitem>
          <listitem>
            <para>View</para>
          </listitem>
          <listitem>
            <para>SCM</para>
          </listitem>
        </itemizedlist>
        <para>A typical minimal configuration as shown would be to grant all
          rights to an administrative user or group and only read access for
          Overall and Jobs to anonymous users.
        </para>
        <para>By adding further groups or individual users you can e.g. grant
          full administrative access rights to other trusted users without
          sharing the main admin account.
        </para>
        <para>A safe administrative use would be to grant full rights to a
          group of admin users without granting any <option>Delete</option>
          rights.
        </para>
      </section>

      <section id="section-security-authorization-project">
        <title>Project-based Matrix Authorization Strategy</title>
        <para>Taking the concept of matrix based authorization as described
          in <xref linkend="section-security-authorization-matrix"/> a
          step further is <option>Project-based Matrix Authorization
            Strategy</option>. The global configuration
          possible as displayed in
          <xref linkend="fig-security-authorization-project"/> works the same
        as matrix-based security.
        </para>
        <figure id="fig-security-authorization-project">
          <title>Project-based Matrix Authorization Strategy</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-authorization-project.png" scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center" fileref="figs/print/security-authorization-project.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>In addition you can enable project-based security in each
          project configuration individually for each project. Enabling the
          option <option>Enable project-based security</option> will display
          a matrix of access rights as visible in
          <xref linkend="fig-security-authorization-project-specific"/>. It
          will allow you to add users and groups just like for the global
          configuration and assign rights as desired.
        </para>
        <figure id="fig-security-authorization-project-specific">
          <title>Project specific authorization</title>
          <mediaobject>
            <imageobject role="web">
              <imagedata contentdepth="100%"
                         fileref="figs/web/security-authorization-project-specific.png"
                         scalefit="1"/>
            </imageobject>
            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/security-authorization-project-specific.pdf"
                         scalefit="0" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Using groups accessing a group of projects you could e.g.
          enable administrative rights for a limited number of projects to a
          specific user or user group.
        </para>
      </section>

      <section>
        <title>Using the Legacy Authorization Strategy</title>

        <!--SEE HBOOK-52 - Legacy to what?   Explain what this mode means to the user.-->

        <para></para>
      </section>

      <section>
        <title>Anyone can do anything</title>
        <para>Setting your authorization strategy to the option
          <option>Anyone can do anything</option> effectively turns off
          security. In a scenario where everybody able to access Hudson e
          .g. in a trusted intranet this setting is recommended as an
          alternative to completely disabled security. The advantage for the
          users is that while they do not need to login to use Hudson and
          everyone has access it is possible to login and customize Hudson by
          creating custom views and take advantage of other personalization.
        </para>
      </section>

    </section>
  </section>

  <section>
    <title>Hudson Security Best Practices, Tips and Tricks</title>

    <section>
      <title>Common Setup - Internal user database with matrix-based
        authorization</title>
      <para>A common and useful setup is a combination of using Hudson's internal
      user database with matrix-based authorization. It allows for a secure
        setup of a publicly available Hudson instance without the need for
        any further security components beyond Hudson itself and can
        therefore be managed via the Hudson user interface without any
        additional requirements beyond browser access.
      </para>
      <orderedlist>
        <listitem>
          <para>Enable security in the global Hudson configuration</para>
        </listitem>
        <listitem>
          <para>Activate the security realm for Hudson's own user database
            and allow users to sign up</para>
        </listitem>
        <listitem>
          <para>Set the authorization to <option>Anyone can do
            anything</option> and save the configuration</para>
        </listitem>
        <listitem>
          <para>Sign up a new user e.g. with the name <code>admin</code></para>
        </listitem>
        <listitem>
          <para>Login in as the new user</para>
        </listitem>
        <listitem>
          <para>Change the authorization to matrix-based security</para>
        </listitem>
        <listitem>
          <para>Add the new user to the matrix</para>
        </listitem>
        <listitem>
          <para>Grant all right to the new user as he will the be the
            adminstrator user</para>
        </listitem>
        <listitem>
          <para>Save the configuration</para>
        </listitem>
      </orderedlist>

      <para>Following these steps you will have secured Hudson and the new
        user will be the only user with access to Hudson. If you want e.g.
        anonumous users to have read access you could add these rights in the
        matrix.
      </para>
      <para>For further users you can create additional matrix rows and
        distribute rights as desired.</para>
    </section>

    <section>
      <title>Allowing Developers to do Forced Builds with Security On</title>
      <para>is currently documented on the wiki nicely
        <ulink
        url="http://wiki.hudson-ci.org/display/HUDSON/Quick+and+Simple+Security"/>
      </para>
    </section>

    <section>
      <title>Authenticating in a script</title>
      <para>is currently documented on the wiki and should be expanded on here
        <ulink url="http://wiki.hudson-ci.org/display/HUDSON/Authenticating+scripted+clients"/></para>
    </section>

    <section>
      <title>Disabling security when locked out</title>
      <para>When configuring security or when relying on external
        security realms, you can end up in situations where you do not have
        any access to Hudson in the user interface anymore. Reasons could be a
        forgotten admin password, offline LDAP server, broken Unix authorization
        after server upgrade and so on. To be able to fix up your setup you can
        edit the file
        <filename>config.xml</filename>
        in your
        <option>HUDSON_HOME</option>
        and set
        <screen>
          <command>
            <useSecurity>false</useSecurity>
          </command>
        </screen>
        With this setting you will have full access to Hudson and be able to
        troubleshoot your configuration or change to a new security realm
        and/or authorization.
      </para>
    </section>
  </section>
</chapter>

<chapter id="chapter-plugin-management">
  <title>Managing Hudson Plugins</title>

  <para>Hudson plugin management is available via
    <option>Manage Hudson</option>
    and selecting the
    <option>Manage Plugins</option>
    link shown in<xref linkend="fig-config-manage-hudson"/>. This
    administration interface allows you see what plugin versions are
    currently installed, update them and install new ones as well as manage
    some advanced settings to work with the multitude of plugins available
    for Hudson. Using plugins allows you to support many new features beyond
    a basic Hudson install as well as tweak the user interface and morph
    Hudson into the CI server you need.
  </para>

  <section id="section-plugin-management-installed">
    <title>Installed</title>
    <para>To get a list of installed plugins, click in the
      <option>Installed</option>
      tab. This will display a list all of the Hudson plugins currently
      installed on your instance of Hudson system.
    </para>

    <figure id="fig-using-installed-plugin">
      <title>The Installed tab for managing the installed plugins</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/plugin-mgt-installed.png" scalefit="1"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/plugin-mgt-installed.pdf" scalefit="0"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>The
      <option>Enabled</option>
      check box allows you to activate and deactivate specific plugins. After
      plugin updates your old plugin version will remain to be accessible and
      you can downgrade to the older version by pressing the
      <option>Downgrade to x.y.z</option>
      button. The pinned column will then be marked for this plugin so that
      automatic update will not occur until you unpinned the version. Any
      changes will require you to restart Hudson by clicking the
      <option>Restart once no jobs are running</option>
      button as displayed in <xref linkend="fig-plugin-mgt-progress"/> to take
      affect.
    </para>
    <figure id="fig-plugin-mgt-progress">
      <title>Install and update plugin progress screen ready to restart the
        server</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/plugin-mgt-progress.png" scalefit="1"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/plugin-mgt-progress.pdf" scalefit="0"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

  </section>

  <section id="section-plugin-management-available">
    <title>Available</title>
    <para>This list of available plugins includes hundreds of useful utilities,
      tweaks and feature sets which extend the core feature set of Hudson. The
      list is separated into topics and contains a short description for each
      plugin as well as a link to the plugin web site. In order to install a
      plugin simply select the check box in the plugin row, press the
      <option>Install</option>
      button on the bottom of the list. This will redirect to a progress
      reporting page. After a success message you will have to restart
      Hudson by clicking the
      <option>Restart once no jobs are running</option>
      button for the new plugin to be available.
    </para>

    <figure id="fig-using-avail-plugin">
      <title>The Available tab for installing new plugins</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/plugin-mgt-available.png" scalefit="1"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/plugin-mgt-available.pdf" scalefit="0"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="section-plugin-management-updates">
    <title>Updates</title>

    <para>Hudson regularly checks an available list of Hudson plugins on the
      Hudson web site and will notify if an updates become available. To see if
      any updates are currently available click on the
      <option>Updates</option>
      tab in the Manage Plugins screen. Plugin eligible for an update will be
      displayed next to the available update version and the version which is
      currently installed. To update a plugin select the check box in the
      <option>Install</option>
      column and press the
      <option>Install</option>
      button on the bottom of the list. This will redirect to a progress
      reporting page. After a success message you will have to restart Hudson by
      clicking the
      <option>Restart once no jobs are running</option>
      button for the new plugin to be available.
    </para>

    <figure id="fig-using-updates-plugin">
      <title>The Updates tab displaying available updates of installed plugins</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/plugin-mgt-updates.png" scalefit="1"/>
        </imageobject>
        <imageobject role="print">
          <imagedata align="center" fileref="figs/print/plugin-mgt-updates.pdf"
                     scalefit="0" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="section-plugin-management-advanced">
    <title>Advanced</title>
    <para>The Advanced tab as displayed in
      <xref linkend="fig-plugin-mgt-advanced"/> allows you to
      configure the proxy
      settings for
      Hudson to be able to connect to the plugin repository on the Hudson web
      site, upload Hudson plugin files (<code>*.hpi</code>) manually to
      install e.g. custom plugins and specify the url for a custom update
      site.
      <figure id="fig-plugin-mgt-advanced">
        <title>The Advanced tab for miscellaneous plugin management tasks</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/plugin-mgt-advanced.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/plugin-mgt-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
    </para>

    <section>
      <title>HTTP Proxy Configuration</title>
      <para>Hudson retrieves a list of plugins and downloads plugins over the
        public internet. If your server is behind a proxy server, you will need
        to configure the proxy settings. Supply the necessary values to connect
        to your internal proxy in the <option>Server</option> and
        <option>Port</option> fields. The
        <option>No Proxy for</option>
        field allows you to exclude host names from proxying by adding them in a
        comma separated list.If your proxy server requires authentication you
        will have to select the
        <option>Proxy Needs Authorization</option>
        check box and provide the
        <option>User name</option>
        and<option>Password</option>.
      </para>
    </section>

    <section>
      <title>Upload Plugin</title>
      <para>Hudson plugins are distributed as <code>.hpi</code> files and the
        the Advanced administration section allows you to upload them with a
        file chooser. This feature is especially useful for installing
        custom, in house developed plugins or commercially distributed
        plugins that are not available on the update site. You can also use
        it to install plugins you build from source during development or
        when helping by contributing fixes to open source plugins.
      </para>
    </section>

    <section>
      <title>Update Site</title>
      <para>Instead of using the public update site on the Hudson web site
        you can host your own plugin repository and you could then add the
        <option>URL</option> in the available input field.
      </para>
    </section>
  </section>
</chapter>

<chapter id="chapter-build-creation">
  <title>Creating Hudson Projects</title>

  <section id="section-creating-new-project">
    <title>Creating New Hudson Projects</title>

    <para>To create a new Hudson project, click on
      <option>New Job</option> in
      the left navigation menu, which will display the form shown in
      <xref linkend="fig-using-new-project"/>.
    </para>

    <figure id="fig-using-new-project">
      <title>Creating a New Job in Hudson</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/create-new-job.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/create-new-job.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The most common way to create a new job using Hudson is to select
      <option>Build a free-style software project</option>. This will allow you
      to invoke a number of external and internal executions. If you are
      creating a project that is similar to an existing Hudson build, you may
      also choose
      <option>Copy an existing job</option>
      and then type in the name of the Hudson job in the
      <option>Copy from</option>
      text field. Once you have made your selection and provided a name for the
      new job, click on
      <option>OK</option>
      to continue.
    </para>

    <para>You can also configure Hudson to
      <option>Monitor an external job</option>
      like cron jobs, which can then affect other jobs. The last job type
      supported by Hudson is to
      <option>Build a multi-configuration project</option>, which can act like a
      container for a variety of different job executions.
    </para>

    <warning>
      <para>Your Hudson installation may provide an option to<option>
        Build a Maven 2/3 project (Legacy)</option>. This feature has numerous
        issues
        with the use of different Maven versions, especially Maven 3 versions
        and is not supported in Hudson. We recommend not to use this job type.
        Instead, we encourage you to use the native Maven support which is
        available in a free-style software project.
      </para>
    </warning>

    <figure id="fig-using-new-project-result">
      <title>Result of New Project Creation</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/new-project-result.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/new-project-result.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Once your job has been created, you will see a screen similar to the
      one shown in
      <xref linkend="fig-using-new-project-result" xrefstyle="select:label"/>,
      depending on your job type selection. You can now proceed to configure
      your project. If you need to change any of these settings at a later
      stage, navigate to a particular Hudson Project's Summary page by clicking
      on the name of the project on the main Hudson page. Once you are on a
      Hudson Project's Summary page, click on
      <option>Configure</option>
      in the left-hand navigation to load the Project Configuration screen.
    </para>
  </section>

  <section id="section-common-job-configurations">
    <title>Configuring Common Job Configuration Settings</title>

    <para>Independent of the job type you selected you will be able to configure
    a few common settings separated in the following sections:</para>
    <variablelist>
      <varlistentry>
        <term>General Project Settings</term>
        <listitem>
          <para>configure name, description and other general parameters</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Advanced Project Options</term>
        <listitem>
          <para>configure miscellaneous settings for advanced usage </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Source Code Management</term>
        <listitem>
          <para>configure source code management-related parameters for
            various systems</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Build Triggers</term>
        <listitem>
          <para>configure how builds are started</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Post-build Actions</term>
        <listitem>
          <para>configure steps taken after a build completion</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Depending on the job type you chose additional sections will be
      present that will be explained later. Lets start with the common
      sections.
    </para>

    <section id="section-configuring-general-project-settings">
      <title>Configuring General Project Settings</title>

      <para>The first section on the Project Screen is the general project
      information, which is shown in <xref linkend="fig-using-project-info"
      xrefstyle="select:label" />.</para>

      <figure id="fig-using-project-info">
        <title>Configuring Project Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ci-using-proj-info.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ci-using-proj-info.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The section shown in the previous figure contains the following
      fields:</para>

      <variablelist>
        <varlistentry>
          <term>Project Name</term>
          <listitem>
            <para>The
              <option>Project Name</option>
              should be a short descriptive name, that easily allows your Hudson
              users to see what this project is. Consider this to be the
              identifier that Hudson uses to keep track of everything associated
              to this project. We recommend that your project names consist of
              simple alphanumeric characters and dashes. While Hudson will save
              a Project name contains spaces, the file path of the workspace
              will also contain spaces. The presence of spaces in a project name
              can cause unforeseen issues with builds and may results in build
              failure. We suggest using e.g. underscores instead. The project
              name will be visible in the main Hudson page on the list of jobs.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Description</term>
          <listitem>
            <para>The
              <option>Description</option>
              should contain a paragraph that will inform Hudson users about the
              nature and purpose of a give Hudson project. Useful information
              for the users could for example be various source code management
              related parameters like branch or version or other parameters like
              target platform for the build artifacts. This will widely vary and
              depend on your job type. The description is visible on the main
              project-specific page.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Discard Old Builds</term>
          <listitem>
            <para>If
              <option>Discard Old Builds</option>
              is not checked, Hudson will archive the results of all the builds
              it performs. Depending on build log and artifact size this can
              produce considerable amounts of storage space being used, which
              should in turn be monitored carefully.
            </para>
            <para>If
              <option>Discard Old Builds</option>
              is checked, the project configuration screen will display
              additional input fields that allow you to specify the number of
              builds and the number of days to retain builds.
            </para>
            <para>After pressing the
              <option>Advanced</option>
              button you can provide for separate configuration for the number
              of days the build artifacts are kept. Setting this value will
              cause older build artifacts to get deleted, without the logs,
              reports etc. getting deleted.
            </para>
            <para>An additional advanced configuration allows you to set maximum
              number of builds to keep including its artifacts.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>This Build is Parameterized</term>
          <listitem>
            <para></para><!-- TODO build is parameterized-->
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Disable Build</term>
          <listitem>
            <para>If
              <option>Disable Build</option>
              is selected, no new builds will be executed until the project is
              re-enabled. This means that any builds that might have been
              triggered by SCM activity or by a periodic schedule will not be
              executed. This feature is very useful if you need to fix an issue
              with a build or build specific related infrastructure like source
              code management system and you want to temporarily take a
              particular Hudson job offline without affecting the rest of your
              Hudson setup and jobs.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Execute concurrent builds if necessary (beta)</term>
          <listitem>
            <para>If this checkbox is selected, Hudson will be able to execute
              more than one build for this project at the same time. This can be
              useful if your project is parameterized, or if you have a longer
              build, which may need to run multiple concurrent builds in
              response to independent changes to SCM. In many cases this setting
              is particularly useful, when Hudson is set up as a build cluster.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
        <term>JDK</term>
          <listitem>
            <para>This dropdown allows the selection of a specific Java
              Development Kit (JDK) for the project. It will only be available
              if multiple JDKs are configured in the global Hudson configuration
              as documented in
              <xref linkend="section-configure-jdk"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Restrict where this project can be run</term>
          <listitem>
            <para>If
              <option>Restrict where this project can be run</option>
              is checked, Hudson will display options that will allow you to
              specify the nodes on which a project build can be executed.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <warning>
        <para>If you are creating a continuous integration build that will run
          frequently, don't forget to check
          <option>Discard Old Builds</option>
          and configure Hudson to free up drive space. If your project is built
          regularly due to frequent changes in source control or small times
          between fixed scheduled builds you can easily fill up even the largest
          hard drive potentially resulting in your build server going offline.
        </para>
      </warning>
    </section>

    <section id="section-configuring-advanced-project-options">
      <title>Configuring Advanced Project Options</title>
      <para>The next section after the general project configuration is the
      <option>Advanced Project Options</option> section shown in <xref
      linkend="fig-using-adv-opt" xrefstyle="select:label" />.</para>

      <figure id="fig-using-adv-opt">
        <title>Configuring Advanced Project Options</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ci-using-adv-opt.png" scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ci-using-adv-opt.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>It contains the following fields:</para>

      <variablelist>
        <varlistentry>
          <term>Quiet period</term>
          <listitem>
            <para>The project-specific
              <option>Quiet Period</option>
              set in this section overrides the global configuration documented
              in
              <xref linkend="section-global-hudson-configuration"/> and
              has the same effect. This setting depends on your build trigger
              configuration as documented below.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Retry Count</term>
          <listitem>
            <para>The project-specific
              <option>Retry Count</option>
              overrides the global
              <option>SCM checkout retry count</option>
              and has the same effect.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Block build when upstream/downstream project is building</term>
          <listitem>
            <para>Hudson builds can be configured to have upstream as well
              downstream dependencies. Upstream dependencies are projects upon
              which this particular project's build depends. Downstream
              dependencies are projects that depend on the current builds
              results. If
              <option>Block build when upstream/downstream project is building</option>
              is selected this project will not start a build, if an
              upstream/downstream project is in the middle of a build or in the
              build queue.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Use custom workspace</term>
          <listitem>
            <para>If this selection is checked, you can instruct Hudson to use a
              custom directory for this project's workspace. If this option is
              not checked, Hudson will automatically assign a workspace location
              that is based on the project's name. As such it can be used to
              have projects names with spaces or other characters potentially
              causing file system level issues while using a save name for the
              workspace folder name.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section-configuring-source-code-management">
      <title>Configuring Source Code Management</title>
      <para>Hudson is typically used in conjunction with the source of the
        project available in a source code management system. Support for a
        large variety of SCM's is one the strength's of Hudson. This section
        allows for the configuration of the respective settings for your SCM of
        choice. The available list of choices will contain all SCM systems
        provided by Hudson and the installed plugins.
        <xref linkend="chapter-plugin-management"/>
        explains how to get support for your SCM installed, if it is not yet
        available. Once installed each SCM configuration will have different
        parameters, which are documented in
        <xref linkend="chapter-source-control"/>.
      </para>
    </section>

    <section id="section-configuring-build-triggers">
      <title>Configuring Build Triggers</title>
      <para>The next section to configure is
        <option>Build Triggers</option>. A Hudson job can
      be configured to build in response to build activity on a Hudson
      instance, in accordance with a regular schedule, or as a reaction to
      activity in an SCM system. Build triggers are configured on a Project's
      Configuration screen and the section is shown in <xref
      linkend="fig-using-build-triggers" xrefstyle="select:label" />.</para>

      <figure id="fig-using-build-triggers">
        <title>Configuring Build Triggers</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ci-using-build-triggers.png"
                       scalefit="1" />
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ci-using-build-triggers.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following types of build triggers can be configured:</para>

      <variablelist>
        <varlistentry>
          <term>Build after other projects are built</term>

          <listitem>
            <para>If this option is selected, Hudson will present you with a
              text field that accepts the names of one or more projects. If this
              field is populated, Hudson will trigger this project's build after
              a successful completion of one of the projects listed in this text
              field. The reverse behaviour of triggering a different project
              based on this project's build completing can be configured in the
              Post-build Actions.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build when Maven dependencies have been updated</term>
          <listitem>
            <para>Hudson projects can be configured to send out a notification
              to all projects that Maven dependencies have been updated as post
              build action (see
              <xref linkend="section-configuring-post-build-actions"/>). When
              you activate this build trigger a build of the project will be
              started once a such a notification is received.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Poll SCM</term>
          <listitem>
            <para>Selecting
              <option>Poll SCM</option>
              will cause Hudson to periodically poll your source code management
              system for changes and trigger a build if changes have been found
              and successfully retrieved.
            </para>
            <para>Selecting this option displays a text area, which accepts a
              standard cron expression. This allows for arbitrary polling
              interval from minutes to weekly and way beyond. It is important to
              consider the impact of this polling frequency setting on your SCM
              infrastructure, since it can cause significant load specifically
              when multiple projects with small polling frequencies all access
              the same SCM server.
            </para>
              <para>This expression can also be useful to set up a schedule for
                  a project that only polls the SCM for changes e.g. outside
                  office hours and therefore only builds then. Similar setup ups
                  can be used to do a nightly or a weekly build type setup.
              </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build periodically</term>
          <listitem>
            <para>The
              <option>Build periodically</option>
              setting will cause Hudson to start a build of the project in
              regular intervals. Changes will be retrieved from the configured
              SCM, but a build will be triggered even if no changes were found.
              The interval configuration in the exposed text field accepts the
              same cron syntax as the
              <option>Poll SCM</option>
              configuration.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="section-configuring-post-build-actions">
      <title>Configuring Post-build Actions</title>

      <para>Post build actions are an important part of Hudson. They allow you
        to trigger a number of events upon build completion. These include the
        communication of the results of the build in various ways as well as
        chain other builds to this build. As such these actions fulfill a
        crucial role of a continuous integration server as communication tool.
        Other important actions allow you to deal with the various artifacts
        produced by the build in the form of test results, documentation as well
        as actual executables or archives produced.
      </para>

      <para>Beyond the core post-build actions documented in the following,
        various plugins will make additional actions available. Source code
        management-related plugin documentation can be found in
        <xref linkend="chapter-source-control"/>. Other plugins are
        documented in
        <xref linkend="chapter-plugins"/>. The minimum list of build actions
        available is visible in <xref linkend="fig-post-build-actions"/> and
        documented in more detail below.
      </para>

      <figure id="fig-post-build-actions">
        <title>Configuring Project Post-build Options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/post-build-actions.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/post-build-actions.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>


      <variablelist>
        <varlistentry>
          <term>Archive Maven 3 artifacts</term>
          <listitem>
            <para>Activating this option and potentially the detail option
              <option>Include generate POMs</option> will trigger Hudson to
              archive the artifacts built by Maven 3 build steps during the
              project build
              and potentially the associated POM files. With the option
            <option>Discard old artifacts</option> set,
              old artifacts will be removed after each successful build. It
              is a Maven 3 build step specific automation of the option to
              <option>Archive artifacts</option> without the need to specify the
              artifacts. The artifacts will be made available on the web
              interface like other archived artifacts. This option is especially
              useful in refactorings of the project and the resulting artifacts,
              since all artifacts are always archived and name or folder changes
              do not affect the archiving. Since there is no necessity to
              configure matching patterns, this option is more robust.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Record fingerprints of Maven artifacts</term>
          <listitem>
            <para>This option activated will trigger the Maven 3 integration
              of Hudson to record fingerprints of the created Maven
              artifacts, which will allow Hudson to keep track of when these
              artifacts are produced and used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Publish Javadoc</term>
          <listitem>
            <figure id="fig-post-build-actions-javadoc">
              <title>Configuring the Javadoc post build action</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-javadoc.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-javadoc.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>If your build produces Javadoc you can configure Hudson to
              make it available to users on the project page of Hudson:
            </para>
            <figure id="fig-post-build-actions-javadoc-junit-project">
              <title>Project page providing access to Javadoc and latest test
                results
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-javadoc-junit-project.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-javadoc-junit-project.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>

            <para>
              To configure this you have to select the checkbox and provide the
              relative path to the Javadoc in the
              <option>Javadoc directory</option>
              input field. Checking the
              <option>Retain Javadoc for each successful build</option>
              will keep the generated Javadoc for all successful builds in the
              specified folder for older builds instead of overwriting the
              documentation with each build.
            </para>
            <para>If a warning of
              <option>No such directory</option>
              is visible, it means that the current project workspace does
              not contain the specified path. This is not a problem as long as
              your build will create the folder. The
              <option>Console Output</option>
              of a specific build contains logging information started by
              <option>Publishing Javadoc</option>
              that can be used to debug any problems.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Aggregate downstream test results</term>
          <listitem>
            <figure id="fig-post-build-actions-aggregate-test">
              <title>Configuring the test result aggregation post build action
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-aggregate-test.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-aggregate-test.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>

            <para>This feature allows you to pull the test results of this
              project and any downstream projects together. This is especially
              useful when long running test are set up as separate
              downstream projects. You can either let Hudson figure out all
              downstream projects automatically or supply a specific list of
              projects in the <option>Jobs to aggregate</option> input box.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Publish JUnit test result report</term>
          <listitem>
            <figure id="fig-post-build-actions-junit">
              <title>Configuring the JUnit test result report post build
                action
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-junit.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-junit.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Activating this feature allows Hudson to interpret the JUnit
              test report format, produced by your test runs in the project and
              produce historic test result trends, a web interface for viewing
              the reports accessible from the project page as visible in <xref
                  linkend="fig-post-build-actions-javadoc-junit-project"/>. The
              location of the produced xml files has to be specified in the text
              input box, which allows the use of patterns to find files in
              multiple sub folders of the project.In addition it is possible to
              retain the build log output by checking the
              <option>Retain long standard output/error</option>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Archive the artifacts</term>
          <listitem>
            <figure id="fig-post-build-actions-archive-artifacts">
              <title>Configuring the artifacts archival post build action</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-archive-artifacts.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-archive-artifacts.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>
              With this feature enabled Hudson will keep the specified artifacts
              and make them available on the web interface. Using a wildcard
              syntax in the
              <option>Files to archive</option>
              as well as the
              <option>Excludes</option>
              input boxes you can specify the artifacts that should be saved
              after each successful build.The artifacts of the last successful
              build are available on the project overview page as visible in
              <xref linkend="fig-post-build-actions-archive-artifacts-project"/>.
            </para>
            <figure id="fig-post-build-actions-archive-artifacts-project">
              <title>A project overview page for the Hudson book project with
                the latest build artifact available for download
              </title>
              <mediaobject>
                <!-- TODO this screenshot needs to be updated when the
                changed wording for the artifacts is deployed on the server
                see https://github.com/hudson/hudson/pull/40 -->
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-archive-artifacts-project.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-archive-artifacts-project.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>In addition
              <xref linkend="fig-post-build-actions-archive-artifacts-build"/>
              shows how the artifacts produced by a specific build can be
              accessed on build specific page.
            </para>
            <figure id="fig-post-build-actions-archive-artifacts-build">
              <title>A build specific page for the Hudson book build with build
                artifact available for download
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-archive-artifacts-build.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-archive-artifacts-build.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>
              This feature is useful to make release artifacts like war, ear or
              zip files available for retrieval by other users and for archival
              purposes. Hudson can be used as the reference storage place for
              these artifacts that are in turn used e.g. for QA and production
              deployments or for distribution to customers.
            </para>
            <para>If your artifacts are created by a Maven 3 based build using
              Maven 3 build steps, it might be a better option to activate the
              option
              <option>Archive Maven 3 artifacts</option>
              for better archiving robustness as documented above in the
              respective section.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Recording fingerprints of files to track usage</term>
          <listitem>
            <figure id="fig-post-build-actions-fingerprint">
              <title>Configuring the fingerprinting post build action</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-fingerprint.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-fingerprint.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>The feature to
              <option>Record fingerprints of files to track usage</option>
              can help you track down, where files are used and produced. It
              will allow you to determine the build number that created an
              artifact by looking at the fingerprint, which is a unique
              identifier for the file that Hudson creates and keep track of.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build other projects</term>
          <listitem>
            <figure id="fig-post-build-actions-build-other">
              <title>Configuring downstream builds post build action
              </title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/post-build-actions-build-other.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/post-build-actions-build-other.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>

            <para>Building other projects after completion of the current
              project build, is one of the key features that allows you to set
              up chains of project builds. They can then all be small in focus
              and build time. However in the bigger picture you are able to to
              run a build for very large and complex systems. The input box
              <option>Projects to build</option>
              accepts a comma-separated list of projects to build together with
              a checkbox that allows you to trigger the dependent builds even if
              the current project build failed.
            </para>
            <para>Some examples for the usage of this feature are a main project
              triggering separate projects that invoke unit and/integration
              tests, shared libraries invoking server as well as client side
              application builds or build system plugin builds triggering all
              projects that use the plugin.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>E-mail Notification</term>
          <listitem>
              <figure id="fig-post-build-actions-email">
                <title>Configuring the email notification post build action
                </title>
                <mediaobject>
                  <imageobject role="web">
                    <imagedata contentdepth="100%"
                               fileref="figs/web/post-build-actions-email.png"
                               scalefit="1"/>
                  </imageobject>
                  <imageobject role="print">
                    <imagedata align="center"
                               fileref="figs/print/post-build-actions-email.pdf"
                               scalefit="0" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure>

            <para>A very valuable post-build action for a
              continuous
              integration build is the sending of build notification emails.
              Hudson can be configured to send out build failure notices to any
              email address. In most instances it will be best to send the
              notices to an email list allowing the potential recipients to
              opt-in and out as well as access archives. This email is one of
              the primary ways in which developers are notified of build
              failures.
            </para>
            <para>To configure this feature, check the checkbox next to E-mail
              Notification and then specify the recipients email addresses in
              Recipients separated by whitespace. Selecting
              <option>Send e-mail for every unstable build</option>
              will instruct Hudson to send an email for each build even if a
              build experience consecutive failures. Selecting
              <option>Send separate e-mails to individuals who broke the build
              </option>
              will send email to all SCM committers that affected a build that
              broke. The email will be sent with the configuration specified in
              <xref linkend="section-configure-email-notification"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Notify that Maven dependencies have been updated</term>
          <listitem>
            <para>
              When activating this option Hudson will notify all projects with a
              build trigger configured to watch for Maven dependencies that have
              been updated (see<xref
              linkend="section-configuring-build-triggers"/>). When the
              additional option
              <option>Notify even when build is unstable</option>
              is selected this notification will occur even when an unstable
              build ran. A sideeffect of this could be that only some Maven
              dependencies have been updated, which could lead to further
              failures of the dependent projects.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

  </section>


  <section id="section-configuring-free-style-project">
    <title>Configuring Free-style Projects</title>
    <para>In addition to the common project configurations we discussed prior,
      a free-style Hudson project has a section for the build definition that
      allows you to add individual build steps. Press the <option>Add build
      step</option> button in the <option>Build</option> configuration 
      section to set up one or multiple steps that define your build.
    </para>
    <variablelist>
      <varlistentry>
        <term>Execute Windows batch command</term>
        <listitem>
          <para>The <option>Command</option> input allows you to specify the the
            name of the batch file to execute. The script has to return an error
            level value of zero to be recognized as a build success by Hudson.
            The script will be executed with the current workspace of the
            project as the directory. A number of environment variables about
            Hudson and the current project are passed to the execution of the
            script and can be used from within the script.
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Execute shell</term>
        <listitem>
          <para>Executing a shell script as a build step is configured just like
            a Windows batch command. The unix convention to use the first line
            with a #! and the path to an executable allows you to write shell
            scripts in many available shell and scripting languages.
          </para>
        </listitem>
      </varlistentry>
    
      <varlistentry>
        <term>Invoke Ant</term>
        <listitem>
          <para>Invoking an Ant target can be added just like a shell script
            task, but with more configuration options. Find out more on how
            to configure Ant invocations in
            <xref linkend="section-ant-build-configuration"/>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    
    <variablelist>
      <varlistentry>
        <term>Invoke top-level Maven targets</term>
        <listitem>
          <para>A Maven based build step can be configured as documented in
            <xref linkend="section-maven-build-configuration"/>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

  </section>


  <section id="section-configuring-multi-config-project">
    <title>Configuring Multi-Configuration Projects</title>
    <!-- HBOOK-66 -->
    <para></para>
  </section>

  <section id="section-configuring-external-monitoring-project">
    <title>Configuring External Monitoring Projects</title>
    <!-- HBOOK-65 -->
    <para></para>
  </section>


</chapter>

<chapter id="chapter-maven">
  <title>Working with Apache Maven Builds</title>

  <para>Apache Maven is the most widely used build tool for Java-based
    applications and beyond. It has  excellent support in Hudson and is
    employed by most Hudson users.
  </para>

  <section id="section-installing-maven">
    <title>Installing and Configuring Apache Maven</title>
    <!-- HBOOK-69-->
    <para>In order to use Apache Maven for your project build you will have to
      configure one or more installs, as documented in
      <xref linkend="section-configure-maven"/>. Among the many factors that
      influence your choice of installation method you might want to consider
      the following:


      <variablelist>
        <varlistentry>
          <term>One or more Maven versions?</term>
          <listitem>
            <para>Depending on the variety of projects you aim to be building
              on Hudson, you might need to have more Maven versions
              for building your projects available. This can  be helpful to
              allow for
              a staged upgrade with one project at a time to minimize
              down times due to broken builds with newer versions as well.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Variety of operating systems in build cluster</term>
          <listitem>
            <para>Your build cluster might be using different operating system
              versions, which can make some installation methods harder or
              impossible to use. Reasons for using different operating systems
              in a cluster can be the need to run tests on them, facilitating
              pre-existing e.g. desktop workstations at night, the need to build
              native packages on their own platform or simply the fact that a
              certain build can only be done on a specific operating system.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Control software via Hudson or something else?</term>
          <listitem>
            <para>While Hudson has built in support to manage the JDK install as
              well as Apache Ant and Maven, your builds can require any number
              of further software to work. A high number of these additional
              software requirements can make it increasingly difficult to keep
              your build cluster setup working. Your company might already be
              using a provisioning software or virtual machine or operating
              system snapshots for similar purposes and it would then make sense
              to reuse the existing facilities and setup.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Available expertise</term>
          <listitem>
            <para>Your team or yourself might have pre-existing expertise with
              native package management, provisioning software, virtual machine
              snapshots or Hudson itself that can be an influencing factor on
              how to set up your Maven installs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Control Maven installation</term>
          <listitem>
            <para>Some installation methods like using a pre-existing Maven
              install from an operating system package rely on third parties
              to create these installations at first. While convenient this
              implies a loss of control that might not be desired and has to
              be weighed against the additional effort of different install
              methods.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

    </para>

    <para>With assessing these influencing parameters you will be able to derive
      a strategy for your Maven install(s), that will work across the different
      machines in your build cluster and for all your projects. This strategy
      can potentially involve different installation methods. When using the
      recommended Maven 3 integration no Maven install is necessary, since a
      Maven 3 install is embedded with the plugin. Otherwise a minimal setup of
      one Maven install can be used to set up your first project, that is built
      with Maven on Hudson.
    </para>
  </section>

  <section>
    <title>Selecting Components of your Maven and Hudson Integration</title>
    <para>The recommended way to configure a Maven build on Hudson is to
      create a free-style software project as documented in <xref
        linkend="chapter-build-creation"/> and then creating one or more
      build steps that <option>Invoke Maven 3</option>. More details on the
      specific configuration options and more can be found in
      <xref linkend="section-maven-3-build-configuration"/>.
    </para>

    <para>If you require Maven 2 for your build for some legacy reason, even
      though Maven 3 is a higher performing, drop-in replacement you can fall
      back to using the
      <option>Invoke Maven 2 (Legacy)</option>
      build step documented in <xref
        linkend="section-maven-2-build-configuration"/>. Even though this option
      exists, we recommend moving forward and migrating to Maven 3 and the Maven
      3 build step.
    </para>

    <para>Finally your Hudson install may contain a separate project type
      labeled
      <option>Build a Maven 2/3 project (Legacy)</option>
      available when creating a new project. This feature has numerous issues
      with the use of different Maven versions and use cases, especially Maven
      3, and is not supported in Hudson. We recommend not to use this job type.
      If you do not need this job type anymore after migrating to the Maven 3
      build step and want to avoid the accidental creation of projects with this
      type, you should disable the <varname>Hudson Maven :: Plugin</varname>.
      Read more about managing your plugins in
      <xref linkend="chapter-plugin-management"/>.
    </para>

    <para>Both the Maven 2/3 project type as well as the Maven 2 build step are
      part of Hudson as legacy components and are not the focus of active
      development and improvements. If your existing jobs use either of these we
      recommend migrating to Maven 3 build step based free-style projects.
    </para>
    <para>In order to be able to keep existing legacy build around without
      cluttering to user interface or have inexperienced users create builds
      with the legacy systems, you can enable the blacklist plugin to disable
      certain views within Hudson without completely disabling the still
      required plugins.
    </para>
  </section>

  <section id="section-maven-example">
    <title>A Simple Example for an Apache Maven built project</title>
    <!-- HBOOK-70-->
        <para>should be a simple project which just calls mvn clean install,
      talk about pros and cons of using clean, also talk about plugin:goal
      steps?
    </para>
  </section>

  <section id="section-maven-3-build-configuration">
    <title>Details of Configuring Maven 3 Build Options</title>

    <para>After configuring the general project options
      as documented in <xref linkend="chapter-build-creation"/>,
      you can configure one
      or more build steps. To add a build step, click on the Add build step
      button as shown in <xref linkend="fig-using-new-build-config"/>. To
      configure a Maven build, select <option>Invoke Maven 3</option>.
    </para>

    <para>The basic and advanced options for configuring a Maven 3 build steps
      are shown in <xref linkend="fig-maven-3-build-step-default"/> and
      <xref linkend="fig-maven-3-build-step-advanced"/>
      . When adding a new Maven 3 build step all parameters are prepopulated
      with the default parameters defined for Maven 3 build steps. These are
      configured in the global Hudson configuration documented in
      <xref linkend="chapter-configuration"/> in
      <xref linkend="section-configure-maven-3-builder-defaults"/>.
    </para>

    <figure id="fig-maven-3-build-step-default">
      <title>Configuring a Maven 3 Build Step - Default Options</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-step-maven-3-default.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-step-maven-3-default.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <figure id="fig-maven-3-build-step-advanced">
      <title>Configuring a Maven 3 Build Step - Advanced Options</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-step-maven-3-advanced-.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-step-maven-3-advanced.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term>Maven Version</term>
        <listitem>
          <para>Your Hudson installation may have one or more Maven 3
            installations configured as part of the global Hudson configuration.
            This drop-down allows you to specify the version of Maven 3 to
            use
            with the current build step. By default the Maven 3 integration
            will use a bundled version of Maven 3, that is installed as part
            of the Maven 3 integration itself.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Goals</term>
        <listitem>
          <para>This field allows you to specify the goals and phases you would
            like to use for the Maven 3 invocation, separate by spaces and in
            order of desired invocation just like you would use Maven 3 on the
            command-line. Typically these would be<varname>clean
              install</varname>, but depending on your project and build step
            others may apply. The plugin with automatically show the Maven
            version and operate in batch mode equivalent to the
            <varname>-V</varname>
            and
            <varname>-B</varname>
            options. It is also to specify other specific Maven to command-line
            options like
            <varname>-P</varname>
            for profile selection, selection of a specific
            <varname>settings.xml</varname>
            file,
            <varname>-X</varname>
            for debuggin logging and so on. However this is not recommended
            since there are specific configuration settings for most parameters
            in the
            <option>Advanced</option>
            section. Specifying them in their separate option allows for
            programmatic changes across project defined in your Hudson instance
            and is easier scriptable in the Hudson console.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Properties</term>
        <listitem>
          <para>You can pass one or more properties to the Maven process. This
            field accepts a list of properties with lines in a
            <option>key=value</option> format. These properties will be
            passed into the Maven build step invocation using the standard
            way of passing properties of <option>-Dkey1=value1
              -Dkey2=value2</option>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>POM File</term>
        <listitem>
          <para>If your project uses the standard
            <varname>pom.xml</varname>
            filename, there is no need to specify a POM. If your project uses a
            POM with an alternative name or path other than directly in the
            project root, you can specify that file name and path here. This
            setting is equivalent to the command-line option
            <option>-f pomfilepath</option>
            or<option>--file pomfilepath</option>. The path specified has to be
            relative to the project root.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Private repository</term>
        <listitem>
          <para>By default a Maven invocation will use a private repository in
            the project workspace in a
            <varname>.maven/repo</varname>
            folder. This ensures that other project builds do not have any side
            effects. However it can cause considerable usage of storage space,
            which consequently should be monitored carefully. If this option is
            disabled the standard Maven repository location in the current users
            home directory will be used. The user will the operating system user
            running Hudson and therefore invoking Maven 3 via the plugin.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Private temporary directory</term>
        <listitem>
          <para>When this option is activated the java environment variable
            <varname>java.io .tmpdir</varname>
            will be set to a folder
            <varname>.maven/tmp</varname>
            in the project-specific workspace. This is useful when your build
            accesses the temporary directory for storage of artifacts or any
            temporary files e.g. used while running tests. When using the option
            with builds that produce large amounts of data in the temporary
            folder it is important to monitor the size of the folder and
            potentially add a clean up routine to the host operating system
            regular scheduled jobs.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Offline</term>
        <listitem>
          <para>Activating this option causes Maven to be run with the
            <varname>-o</varname> offline option enabled and it will
            therefore not access any remote repositories.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Profiles</term>
        <listitem>
          <para>Adding a comma or space separated list of profile names
            causes the Maven 3 integration to pass them to the invocation
            with the <varname>-P</varname> parameter.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Show Errors</term>
        <listitem>
          <para>Enabling the
            <option>Show Errors</option>
            option is equivalent to use the
            <varname>-e</varname>
            command-line parameter, which will cause Maven to output any errors
            in the console.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Verbosity</term>
        <listitem>
          <para>Configure the verbosity of the log output to the console by
            Maven to be at normal, quiet or debug levels. These levels are
            equivalent to no option and the
            <varname>-q</varname>
            and
            <varname>-X</varname>
            options for Maven command-line invocation.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Checksum Mode</term>
        <listitem>
          <para>Configure the strictness of the checksum validation when
            downloading artifacts from repositories to be at normal, lax or
            strict levels. These levels are equivalent to no option and the
            <varname>-c</varname>
            and
            <varname>-C</varname>
            options for Maven command-line invocation.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Snapshot Updates</term>
        <listitem>
          <para>The <option>Snapshot Updates</option> option provides
            control over the way Maven treats
            <varname>SNAPSHOT</varname> artifacts. The
            <option>NORMAL</option> activates the standard Maven behaviour,
            where as <option>FORCE</option> and <option>SUPPRESS</option>
            will activate the <varname>-U</varname> and
            <varname>-nsu</varname> options.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Recursive</term>
        <listitem>
          <para>Just like for normal Maven invocation this option is activated
            by default, which means that nested modules in a multi-module
            project will be build. Deactivating this feature is equivalent to
            the non-recursive command-line option
            <varname>-N</varname>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Projects</term>
        <listitem>
          <para>The
            <option>Projects</option>
            option allows you to specify the projects that should be added to
            the reactor during build. You can either specify them by the
            relative path in your project workspace or by
            <varname>artifactId</varname>
            and optionally
            <varname>groupId</varname>
            in a
            <varname>groupId:artifactId</varname>
            format. The equivalent command-line option is
            <varname>-pl</varname>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Resume From</term>
        <listitem>
          <para>The
            <option>Resume From</option>
            uses the same syntax as the
            <option>Projects</option>
            and sets the
            <varname>-rf</varname>
            command-line option to resume the build from the specified artifact.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Fail Mode</term>
        <listitem>
          <para>The <option>Fail Mode</option> option supports the modes
            <option>NORMAL</option>, <option>FAST</option>,
            <option>AT_END</option> and <option>NEVER</option> that determine
          how your Maven build proceeds in case of any failures. The equivalent
           command-line options are no option, <varname>-ff</varname>,
            <varname>-fae</varname> and <varname>-fn</varname>. This can have
            considerable impact on the load on your Hudson server e.g. by not
            proceeding past failed tests  but instead failing the build so
            that developer can fix it before a long running build needs to be
            kicked off again.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Make Mode</term>
        <listitem>
          <para>The <option>Make Mode</option> option can be used to enable
            Make-like build behaviour of Maven. The options are the default
            behaviour equivalent to <option>NONE</option> and
            <option>DEPENDENCIES</option>, <option>DEPENDENTS</option> and
            <option>BOTH</option> respectively <varname>-am</varname>,
            <varname>-amd</varname> and <varname>-am -amd</varname>.

            <!-- TODO add url to external resource explaining this more and
            explain how this can work with a project in relation to checked
            out workspace project and external dependencies,
            also how does this work with Hudson upstream,
            downstream dependencies and so on  -->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Threading</term>
        <listitem>
          <para>This input takes the value for the
            <varname>-T</varname>
            command-line option that enables the experimental support for
            parallel builds in Maven 3. A value of
            <varname>4</varname>
            enables four threads for the build. A value of
            <varname>2.5C</varname>
            would enable 2.5 threads per CPU core. When activating this feature,
            keep the experiemental nature of this feature as well as the not yet
            wide spread support for this feature in the various plugins.<!-- add link to external link like
            https://cwiki.apache.org/MAVEN/parallel-builds-in-maven-3.html
            maybe-->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Settings</term>
        <listitem>
          <para>This option corresponds to the
            <varname>-s</varname>
            command-line option for Maven 3 and supplies a Maven 3 build step
            with a custom settings configuration file. The dropdown for this
            field is populated with the Maven 3 Settings files configured in the
            Hudson Maven 3 Configuration page as shown in
            <xref linkend="fig-manage-mvn-3-settings"/>.
            <!-- TODO do we need to talk about security and injection of the
            settings like on the built in help or in more detail?
            -->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Global Settings</term>
        <listitem>
          <para>This option corresponds to the
            <varname>-gs</varname>
            command-line option for Maven and isn't used as frequently as the
            <varname>-s</varname>
            option. This option allows you to reference a custom global
            configuration file that is an alternative to the global settings
            file that ships with Apache Maven.
            <!-- TODO do we need to talk about security and injection of the
            settings like on the built in help or in more detail?
            -->
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Tool Chains</term>
        <listitem>
          <para>Tool chains for Maven 3 build steps can be configured
            globally for your Hudson install as documented in
            <xref linkend="section-configure-maven-3-configuration"/>. The
            drop allows you to select one of these configured tool chains for
            to be used for the build step. Tool chains are a very useful,
            but lesser known feature of Maven and more documentation can be
            found in the
            <ulink url="http://maven.apache.org/guides/mini/guide-using-toolchains.html">mini guide on the Apache website
              .</ulink>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>JVM Options</term>
        <listitem>
          <para>If your build requires specific JVM options, they can be set in
            this field. The options are passed straight through as MAVEN_OPTS
            and use the normal
            <option>java</option>
            command-line options syntax. A common configuration for complex
            builds is to specify a larger memory for the JVM running Maven via
            <option>-Xmx1024m</option>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="section-maven-2-build-configuration">
    <title>Details of Configuring Maven 2 (Legacy) Build Options</title>

    <para>If for some reason you are still using Maven 2 and cannot upgrade to
      Maven 3 and therefore take advantage of the advanced performance and
      features of Maven 3 and the Maven 3 integration of Hudson offers you, you
      should use the Maven 2 (Legacy) integration in a free-style project build
      step. After configuring the general project options (see <xref
        linkend="chapter-build-creation"/>), you can configure one or more build
      steps. To add a build step, click on the Add build step button as shown in
      <xref linkend="fig-build-step-maven-2-legacy-default"/>. To configure a
      Maven build, select<option>Invoke Maven 2 (Legacy)</option>.
    </para>
    <figure id="fig-build-step-maven-2-legacy-default">
      <title>Configuring Project Build Options</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-step-maven-2-legacy-default.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-step-maven-2-legacy-default.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The basic and advanced options for invoking a Maven 2 (Legacy)
    target are shown in <xref linkend="fig-build-step-maven-2-legacy-advanced" />.</para>

    <figure id="fig-build-step-maven-2-legacy-advanced">
      <title>Advanced Configuration of a Maven 2 (Legacy) Build
        Step</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-step-maven-2-legacy-advanced.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-step-maven-2-legacy-advanced.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term>Maven Version</term>
        <listitem>
          <para>Your Hudson installation may have one or more Maven
            installations configured as part of the global Hudson configuration.
            This drop-down allows you to specify the version of Maven for usage
            with the current build step.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Goals</term>
        <listitem>
          <para>This field allows you to specify the command-line
            parameters used for the Maven invocation. These are phases,
            plugin goals as well as specific Maven command-line options like
            <varname>-P</varname> for profile selection, selection of a specific
            <varname>settings.xml</varname> file
            and
            so on.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>POM</term>
        <listitem>
          <para>If your project uses the standard
            <varname>pom.xml</varname>
            filename, there is no need to specify a POM. If your project uses a
            POM with an alternative name or path other than directly in the
            project root, you can specify that file name and path here. This
            setting is equivalent to the command-line option
            <option>-f pomfilepath</option>
            or<option>--file pomfilepath</option>. The path specified has to be
            relative to the project root.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Properties</term>
        <listitem>
          <para>You can pass one or more properties to the Maven process. This
            field accepts a list of properties with lines in a
            <option>key=value</option> format. These properties will be
            passed into the Maven build step invocation using the standard
            way of passing properties of <option>-Dkey1=value1
              -Dkey2=value2</option>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>JVM Options</term>
        <listitem>
          <para>If your build requires specific JVM options, they can be set in
            this field. The options are passed straight through as MAVEN_OPTS
            and use the normal
            <option>java</option>
            command-line options syntax. A common configuration for complex
            builds is to specify a larger memory for the JVM running Maven via
            <option>-Xmx1024m</option>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Use private Maven repository</term>
        <listitem>
          <para>By default a Maven invocation will use a local repository in the
            current users home directory taking any further repository
            configuration done in
            <option>settings.xml</option>
            into account. Depending on the necessary separation of the different
            jobs running on Hudson it can be useful to have a separate Maven
            repository for each project. Activating this feature will cause the
            creation of a separate Maven repository in a
            <varname>.repository</varname>
            folder in the projects workspace. This can cause considerable usage
            of storage space, which consequently should be monitored carefully.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      The standard way of invoking a Maven build is to run the
      <option>clean</option>
      and
      <option>install</option>
      lifecycle phases in a command-line call like <command>mvn clean
      install</command>. This can be easily achieved by adding a Maven build
      step and adding
      <option>clean install</option>
      as a
      <option>Goals</option>
      parameter. If so desired these two lifecycle phases can also be invoked
      separately by creating two Maven build steps with separate
      <option>clean</option>
      and
      <option>install</option>
      parameters. This would cause two separate invocations of Maven in
      sequence equivalent to <command>mvn clean; mvn install</command>
      Breaking up the invocations allows you to add further build steps in
      between and build an arbitrarily complex sequence of Maven and other
      invocations with completely separate parameters and so on. You could
      for
      example slip a plugin goal invocation in between the clean and install
      invocations, that prepares the execution environment for your build for
      example by setting up a test environment like an emulator or a specific
      database and content. Since you can do this in a separate build step you
      can invoke a shell script or an Ant target for such tasks, in case it is
      not automated via a Maven plugin or configuration.
    </para>

     <figure id="fig-using-top-level-maven-two-times">
      <title>Configuring two build steps as top-level Maven invocations</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/build-steps-maven-twice.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/build-steps-maven-twice.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="section-blacklist-maven-legacy">
    <title>Using the blacklist plugin to improve Maven usage</title>
    <para>Describe how the blacklist plugin can be used to have the legacy
      Maven integrations installed without them appearing as choices in the
      configurttion so that new builds do not accidently use it.
    </para>
  </section>

  <section id="section-maven-artifacts">
    <title>Managing the Build Artifacts of a Maven Build</title>
    <!-- HBOOK-72 -->
    <para>in hudson artifact, Nexus, Sonar, in hudson maven repo plugin.
      .</para>
  </section>

  <section id="section-maven-multi-module">
    <title>Complex Builds with Maven Multi-module Setup</title>
    <!-- HBOOK-73-->
    <para></para>
  </section>

  <section id="section-maven-hudson-dependencies">
    <title>Complex Builds with Hudson Job Dependencies</title>
    <!-- HBOOK-74-->
    <para></para>
  </section>

  <section id="section-maven-release-build">
    <title>Automating Release Builds</title>
    <!-- HBOOK-75-->
    <para></para>
  </section>

</chapter>

<chapter id="chapter-ant">
  <title>Working with Apache Ant Builds</title>

  <para></para>

  <section id="section-installing-ant">
    <title>Installing Apache Ant for Hudson</title>

    <para>The general configuration for Apache Ant installs on Hudson is
      available in
      <xref linkend="section-configure-ant"/>. You can read about influencing
      factors for your Apache Maven install, that apply to your strategy for
      installing Ant as well in <xref linkend="section-installing-maven"/>.
    </para>

    <para>A common scenario for Apache Ant installs is the requirement of a
      build to have access to Ant tasks as provided in Ant-Contrib (add URL
      here?) like
      <command>For</command>
      or
      <command>If</command>
      or to have some required libraries like jsch (add url?) for the
      <command>scp</command>
      available on the Ant classpath. Custom developed Ant tasks can be needed
      in a similar fashion. A convenient way to achieve this, is the creation of
      a custom archive containing the Ant install as well as additional
      libraries necessary. This archive can then be used with the
      <option>Extract from*.zip/*.tar.gz</option>
      option to get a fully working Ant and dependencies installed on all build
      cluster nodes.
    </para>

  </section>

  <section id="section-ant-build-configuration">
    <title>Configuring Apache Ant Builds</title>
    <para>After configuring the general project options as documented in
        <xref linkend="chapter-build-creation"/>),
        you can configure one
        or more build steps. To add a build step, click on the Add build step
        button and select <option>Invoke Ant</option>.
      </para>

      <para>The basic and advanced options for invoking Ant are shown in <xref
        linkend="fig-configure-ant-build-step" />.</para>

      <figure id="fig-configure-ant-build-step">
        <title>Configuring an Ant Build Steps</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/configure-ant-build-step.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/configure-ant-build-step.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Ant Version</term>
          <listitem>
            <para>Your Hudson installation may have one or more Ant
              installations configured as part of the global Hudson
              configuration. This drop-down allows you to specify the version of
              Ant for usage with the current build step.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Targets</term>
          <listitem>
            <para>This field allows you to specify the command-line parameters
              used for the Ant invocation. These are all options and targets
              supported by the specified Ant and the current
              <option>Build File</option>. If nothing is specified in this
              field, the build step will invoke Ant without parameters. With a
              default target specified in the build file, this can be sufficient
              for a full build depending on your build file.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Build File</term>
          <listitem>
            <para>If your project uses the standard
              <varname>build.xml</varname>
              filename, there is no need to specify a
              <option>Build File</option>
              If your project uses a build file with an alternative name or
              path other than directly in the project root, you can specify that
              file name and path here. This setting is equivalent to the command
              line option
              <option>-f buildfilepath</option>. The path specified has to be
              relative to the project root.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Properties</term>
          <listitem>
            <para>You can pass one or more properties to the Ant process. This
              field accepts a list of properties with lines in a
              <option>key=value</option> format. These properties will be
              passed into the Ant build step invocation using the standard
              way of passing properties of <option>-Dkey1=value1
                -Dkey2=value2</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Java Options</term>
          <listitem>
            <para>If your build requires specific Java options, they can be set
              in this field. The options are passed straight through as ANT_OPTS
              and use the normal
              <option>java</option>
              command-line options syntax. A common configuration for complex
              builds is to specify a larger memory for the JVM running Ant via
              <option>-Xmx1024m</option>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
  </section>

  <section id="section-ant-example">
    <title>Hudson Apache Ant Example</title>

    <!--TODO: See HBOOK-35-->

    <para></para>
  </section>

  <section id="section-ant-best-pratices">
    <title>Apache Ant Build Best Practices</title>

    <!--TODO: See HBOOK-37-->

    <para></para>
  </section>

  <section id="section-ant-troubleshooting">
    <title>Apache Ant Build Troubleshooting</title>

    <!--TODO: See HBOOK-36-->

    <para></para>
  </section>
</chapter>

<chapter id="chapter-source-control">
  <title>Working with Source Control</title>

  <para>One of the most important parts of the Hudson project configuration are
    the settings that connect your Hudson project to source control. Any
    software development project should be managed in a
    <ulink url="http://en.wikipedia.org/wiki/Source_code_management">source
      control management system</ulink>, many of which are open source software
    and have large user communities. Hudson has support for all common SCM
    systems as well as many of the less popular ones. Most likely you will find
    support for your SCM already installed or available as a plugin for
    installation in the
    <option>Source Code Management</option>
    section of available plugins in the plugin management as displayed in<xref
      linkend="fig-scm-plugins"/>. Read more about available plugins and their
    management in
    <xref linkend="section-plugin-management-available"/>
    in
    <xref linkend="chapter-plugin-management"/>.
  </para>

  <figure id="fig-scm-plugins">
    <title>The beginning of the list of Source Code Management plugins</title>

    <mediaobject>
      <imageobject role="web">
        <imagedata contentdepth="100%" fileref="figs/web/scm-plugins.png"
                   scalefit="1"/>
      </imageobject>

      <imageobject role="print">
        <imagedata align="center" fileref="figs/print/scm-plugins.pdf"
                   scalefit="0" width="100%"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>By default Hudson has support for Git, Subversion and CVS pre-installed.
    This chapter will document usage of the respective Hudson plugins as well as
    the plugin supporting the popular open source SCM system Mercurial.
  </para>

  <para>Each of these plugins can be configured in the global Hudson
    configuration setting in its specific section added by the plugin.
  </para>

  <para>After the global settings for the desired source management system are
    configured, you can configure the project-specific settings. Simply load
    the
    project's configuration page and scroll down to the Source Code Management
    section. In this section, you must then select one of the radio buttons for
    the source code management system you are using as visible in
    <xref linkend="fig-scm-selection"/>
  </para>

  <figure id="fig-scm-selection">
    <title>Selecting an SCM in the project configuration</title>

    <mediaobject>
      <imageobject role="web">
        <imagedata contentdepth="100%" fileref="figs/web/scm-selection.png"
                   scalefit="1"/>
      </imageobject>

      <imageobject role="print">
        <imagedata align="center" fileref="figs/print/scm-selection.pdf"
                   scalefit="0" width="100%"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para>After this selection you will be able to configure the parameters
    specific to the selected SCM and the current project.
  </para>

  <section id="section-scm-svn">
    <title>Configuring Subversion</title>
    <para>The Subversion Plugin for Hudson and therefore support for the popular
      <ulink url="http://subversion.tigris.org/">Subversion SCM system</ulink>
      is part of the default install of Hudson. It is therefore not necessary to
      perform any further plugin installation to use Subversion for your
      project.
    </para>
    <section id="section-scm-svn-global">
      <title>Global Subversion Configuration</title>
      <para>In order to use Subversion successfully, you need to set up the
        global configuration in the Hudson Server configuration screen displayed
        in
        <xref linkend="fig-scm-svn-global-config"/>.
      </para>

      <figure id="fig-scm-svn-global-config">
        <title>Global Subversion Configuration</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-svn-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following parameters need to be configured as desired:</para>
      <variablelist>
        <varlistentry>
          <term>Subversion Workspace Version</term>
          <listitem>
            <para>Subversion uses different formats for storing data in a
              checked out location. Ideally you should have the same
              Subversion version installed on the SCM server as well as on
              the Hudson server and specify that version here. If your
              Hudson project tasks only require read access to the Subversion
              repository it is safe to use a higher version on the Hudson
              server and specify it here. However if you are automating a
              release process or any other tasks that will write to the
              Subversion repository e.g. by creating tags or branches or
              editing files and checking them in, you should make sure to
              use the same format on the Hudson server as on the Subversion
              server since mismatches can produce problems in the Subversion
              repository and potentially break expected behaviour. An
              important issue related to this setup is that you can not
              support different Subversion servers with different versions
              accessed from one Hudson instance. It is advisable to update
              the Subversion servers and Hudson installed clients before
              proceeding.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Subversion Revision Policy</term>
          <listitem>
            <para>The default revision policy is
              <varname>Queue Time</varname>, which will cause a build to be
              run
              off the revision present in the repository when the job is
              added to the Hudson build queue. The <varname>Build
                Time</varname> policy one the other hand will use the
              revision in the repository found when the build actually starts
              . The <varname>Head revision</varname> policy will use the HEAD
              revision in the repository. Finally these settings are
              overridden if a revision is specified in the subversion url or
              as a revision parameter in a parameterized build.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Exclusion revprop name</term>
          <listitem>
            <para>This parameter can be used to cause the plugin to exclude
              revisions with the specified revision property from triggering
              new builds. This is useful for builds that cause a commit so
              that this commit done by Hudson will not in turn trigger the
              execution of another build. The commits carried out by Hudson
              as part of the build have to be configured to use the same
              property.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Validate repository URLs up to the first variable name</term>
          <listitem>
            <para>With this setting activated subversion urls will only be
              validated up to the first variable. A variable in a url would
              be preceded by a <varname>$</varname> character.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

    </section>
    <section id="section-scm-svn-project">
      <title>Project-Specific Subversion Configuration</title>

      <para>Selecting Subversion under the Source Code Management section will
        display the configuration options shown in<xref
          linkend="fig-scm-svn-project-config" xrefstyle="select:label"/>.
        Clicking on the <option>Advanced</option> button will reveal the
        advanced configuration parameters shown in
        <xref linkend="fig-scm-svn-project-config-advanced"/>.
      </para>

      <figure id="fig-scm-svn-project-config">
        <title>Configuring project-specific Subversion settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-project-config.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-svn-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fig-scm-svn-project-config-advanced">
        <title>Configuring advanced project-specific Subversion settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-project-config-advanced.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-svn-project-config-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following parameters can be configured:
      </para>

      <variablelist>
        <varlistentry>
          <term>Modules</term>

          <listitem>
            <para>Hudson can check out one or more Subversion modules from a
              Subversion repository. To configure a repository location, supply
              a Subversion URL in the
              <option>Repository URL</option>
              text field. This field supports Subversion repository URLs
              including revisions specified with
              <varname>@number</varname>
              as well as subversion keywords for revisions and dates. The
              link <option>Update credentials</option> navigates you to the
              SVN authentication screen documented below.
            </para>
            <para>If you are checking out more than one Subversion module, you
              can also supply a
              <option>Local module directory</option>
              that Hudson will check out the specified module to. If you leave
              the Local module directory blank, Hudson will check out the
              specific module to the root of the project's workspace.
            </para>
            <para>The
              <option>Repository depth option</option>
              allows you to specify the depth for the checkout of this module,
              with the default being<varname>infinity</varname>, which means
              that all nested directories of the repository will be checked out.
              This is useful to limit the size and scope of your checkout.
            </para>
            <para>
              You can add a new module with the
              <option>Add more locations</option>
              button and remove it with the
              <option>Delete</option>
              button.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Check-out Strategy</term>
          <listitem>
            <para>The
              <option>Check-out Strategy</option>
              option determines the subversion commands issues prior to starting
              a build.
            </para>
            <para>The default value of
              <option>Use 'svn update' as much as possible</option>
              will cause the least load on the Subversion server by only issuing
              an update command on top of the existing checkout in the project
              workspace.
            </para>
            <para>The option
              <option>Use 'svn update' as much as possible, with 'svn revert'
                before update
              </option>
              will do minor cleanup of the workspace by reverting any local
              modifications.
            </para>
            <para>The option
              <option>Emulate clean checkout by first deleting
                unversioned/ignored files, then 'svn update'
              </option>
              provides a good compromise between performance and thoroughness,
              since it closely resembles a clean checkout without the
              performance and load implications for the Subversion server as
              well as Hudson.
            </para>
            <para>Finally the option
              <option>Always check out a fresh copy</option>
              will delete the workspace content and perform a fresh checkout
              for each build. Choosing this option should be considered
              carefully since it can put a significant load on the Subversion
              and Hudson servers.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Browser</term>

          <listitem>
            <para>Hudson supplies valuable information about a build and about
              the SCM activity and changes that contribute to a specific build.
              When Hudson displays information about a Subversion commit or a
              file that has been modified, it can be configured to link to a
              Repository browser, which provides a rich web view of the source
              code repository. Hudson supports the repository
              browsers
              <option>CollabNet</option>,
              <option>Sventon 2.x</option>,
              <option>ViewSVN</option>,
              <option>FishEye</option>,
              <option>WebSVN</option> and
              <option>Sventon 1.x</option> as options in the the drop-down.
              The <option>(Auto)</option> option will attempt to
              automatically detect the used browser.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>You can navigate to the<option>Subversion
        Authentication</option>
        screen by clicking the <option>Update credentials</option> link,
        which will display as visible in <xref
          linkend="fig-scm-svn-project-authentication"/>.
      </para>
      <figure id="fig-scm-svn-project-authentication">
        <title>Configuring subversion authentication
          Subversion
          settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-project-authentication.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-svn-project-authentication.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The subversion plugin can be configured to use authentication with:
        <variablelist>
          <varlistentry>
            <term>User name/password authentication</term>
            <listitem>
              <para>Provide the user name and password in the supplied
                input fields.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSH public key authentication (svn+ssh)</term>
            <listitem>
              <para>The <option>Private Key</option> control allows you
                to upload a key file for which you can provide the
                <option>User name</option>
                in the respective input field. If you key is encrypted with a
                password you need to add it in the <option>Pass phrase
                </option> input.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>HTTPS client certificate</term>
            <listitem>
              <para>For HTTPS based authentication you can upload a
                Public Key Cryptography 12 (PKCS12) file and provide a
                password in the provided controls.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        By default the above configuration will override any global
        configuration. This behaviour can be deactivated by selecting
        <option>no</option> in the <option>Override global
          credentials</option> option.
      </para>

      <para>Beyond these basic configuration options the Subversion plugin
        supports advanced options to provide more parameters to your
        Subversion commands used for the build.
      </para>
      <variablelist>
        <varlistentry>
          <term>Excluded Regions, Included Regions</term>

          <listitem>
            <para>These fields provide you with the
              option to either specifically include or exclude files and
              directories to determine if a build should be triggered. If
              <option>Included Regions</option> is
              set, Hudson will only trigger a build if a matching file has been
              altered. If
              <option>Excluded Regions</option>
              is set, Hudson will not trigger a build if a file matching an
              excluded pattern is matched. These options are useful if you are
              only interested in a subset of files and directories contained in
              a Subversion module to trigger a build on Hudson. An example would
              be if documentation files contained in the repository should not
              trigger a new build.
            </para>
            <para>Both parameters support usage of regular expression
              patterns to specify the desired files as well as multiple lines
            to configure larger sets of files and directories to match.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Excluded Users</term>

          <listitem>
            <para>If this field is populated and Hudson is configured to poll
              subversion as a build trigger, Hudson will not trigger builds
              for commits from the specified users. This can be used to avoid
              builds to be triggered by commits done by Hudson or other
              systems that commit changes that should not trigger a build.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Excluded Commit Messages</term>
          <listitem>
            <para>Similar to the option
              <option>Exclude users</option>
              this field contains a regular expression and will cause Hudson not
              to trigger a build for commits with a matching commit message.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Exclusion revprop name</term>

          <listitem>
            <para>A Subversion revision can be associated with a property. If
              Hudson encounters a revision with the specified property, it will
              not trigger a build from an SCM commit,
              similar to the behaviour for the options
              <option>Excluded Users</option> or
              <option>Excluded Commit Messages</option>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-svn-basic-config">
      <title>Minimal Basic SVN Configuration</title>
      <para>In order to build a project controlled in subversion you only
        need to configure the repository url in the project configuration
        using an url available for anonymous read access to the repository.
      </para>
    </section>
    <section id="section-scm-svn-advanced-config">
      <title>Tips and Tricks for Advanced SVN Configurations</title>
      <section>
        <title>Subversion related environment variables</title>
        <para>The subversion plugin exports the following environment
          variables for your usage in build scripts and others:</para>
        <variablelist>
          <varlistentry>
            <term>SVN_REVISION</term>
            <listitem>
              <para>The repository revision.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SVN_URL</term>
            <listitem>
              <para>The url used to access the repository.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>If multiple modules are defined these environment variables get
          and index appended in to their names and all revisions and urls of
          the modules will be exported as <code>SVN_REVISION_1</code>,
          <code>SVN_REVISION_2</code>, <code>SVN_REVISION_n</code> and
          <code>SVN_URL_1</code>, <code>SVN_URL_2</code>,
          <code>SVN_URL_n</code>.
        </para>
      </section>
    </section>
  </section>

  <section id="section-scm-git">
    <title>Configuring Git</title>
    <para>
      <ulink url="http://git-scm.com/">Git</ulink>
      is the most successful, modern distributed version control system and has
      gained wide acceptance in the open source community and beyond. and
      repository hosting services available from multiple suppliers for
      commercial and open source usage.
    </para>

    <!-- TODO add some links to external git related help and mention that
     we assume some git knowledge here-->
    <para>The Hudson Git Plugin and therefore support for Git is available in
      default Hudson installs from version 2.1 onwards. If it is not installed
      in your Hudson instance, simply find the plugin in the
      <option>Source Code Management</option>
      section of the available plugins and install it like any other plugins as
      documented in
      <xref linkend="chapter-plugin-management"/>.
    </para>
    <section id="section-scm-git-global">
      <title>Global Git Configuration</title>

      <para>The global configuration for using Git is set up in the Git section
        of the Hudson Server configuration screen as displayed in
        <xref linkend="fig-scm-git-global-config"/>.
      </para>

      <figure id="fig-scm-git-global-config">
        <title>Configuring Git Installations</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Name</term>
          <listitem>
            <para>A name for your Git installation can be specified to
              distinguish between multiple installs.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Path to git executable</term>
          <listitem>
            <para>If the git command is available on the operating system
              PATH or the PATH for the user running Hudson,
              you can simply specify <varname>git</varname>. Otherwise an
              absolute path can be used as well.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to using an already installed git, the Git plugin
        facilitates the tool installer from Hudson that allows
        <option>Run Command</option>
        and
        <option>Extract from *.zip/*.tar.gz</option>
        based installs similar to the JDK installs documented in details in
        <xref linkend="section-configure-jdk"/>. The Ant and the Maven plugins
        installers described in
        <xref linkend="section-configure-ant"/>
        and
        <xref linkend="section-configure-maven"/>
        use the same installers and you can find more hints of its usage there.
      </para>


      <para>A further global configuration for git can be done in the
        <option>Git plugin</option>
        section displayed in<xref linkend="fig-scm-git-global-user-config"/>.
        Specifying
        <option>Global Config user.name Value</option>
        and
        <option>Global Config user.email Value</option>
        values will cause the plugin to issue
        <command>git config</command>
        commands setting these options for each project that is configured to
        use git. The specific project configuration allows you to override these
        setting for each project individually.
      </para>
      <figure id="fig-scm-git-global-user-config">
        <title>Configuring Git user name and email values</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-global-user-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-global-user-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
    <section id="section-scm-git-project">
      <title>Project-specific Git Configuration</title>
      <para>Once you have configured Git in the global Hudson configuration you
        can configure project-specific Git settings. Selecting Git under the
        Source Code Management section of your project configuration will
        display the configuration options shown in
        <xref linkend="fig-scm-git-project-config"/>.
      </para>

      <figure id="fig-scm-git-project-config">
        <title>Basic Git source control information</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The section shown in
        <xref linkend="fig-scm-git-project-config"/>
        contains the following options for the basic configuration of git in
        your project configuration:
     </para>

      <variablelist>
        <varlistentry>
          <term>Repositories</term>
          <listitem>
            <para>Specifying one or more repositories to access for your
              project can be considered the main configuration of the git
              details for your project. The minimum configuration is to
              provide a valid value for <option>URL of repository</option>.
              The typical protocols
              <varname>http://</varname>, <varname>ssh://</varname> and
              <varname>git://</varname> are all supported. Advanced
              configuration as displayed in
              <xref linkend="fig-scm-git-project-config-repository"/> allows
              you to provide a name of the repository as well as a refspec.
              Providing multiple repositories only makes sense when they are
              clones or instances off the same repository,
              since they will be used for merging together the content prior
              to the build.
            </para>
          </listitem>
        </varlistentry>
         <varlistentry>
          <term>Branches to build</term>
          <listitem>
            <para>In this section you can specify one or more branches that
              should be built. The default of an empty branch specifier
              causes the git plugin to track all branches and build the
              latest changed branch. </para>
            <para>
              A common configuration would be to specify the
              main branch in the repository e.g. <varname>master</varname>.
              This would ensure that the build is only triggered for changes
              committed to master. If you want to have other branches
              built as well it is advisable to create separate Hudson
              projects for the different branches.
            </para>
            <para>The advanced usage of this feature would be to specify
              multiple branches. These branches would be used for a merge
              prior to a build and could be configured to push the merge
              result back to the remote repository after a successful build.
            </para>
          </listitem>
        </varlistentry>
         <varlistentry>
          <term>Repository browser</term>
          <listitem>
            <para>The default
              <option>Auto</option>
              option will cause the plugin to attempt to detect a web-based user
              interface to access the git repository. Selecting one of the
              supported repository browsers
              <option>gitweb</option>,
              <option>redmineweb</option>
              and
              <option>githubweb</option> lets you provide a base url to the
              repository browser. With the browser url specified the changes
              view of each build will have added links to the repository.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig-scm-git-project-config-repository">
        <title>Configuring repository specific Git configuration</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-config-repository.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-git-project-config-repository.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In many use cases you will be able to configure everything
        necessary with regards to git using the basic configuration options
        documented above. For more complex cases the plugin provides various
        advanced parameters as displayed in
        <xref linkend="fig-scm-git-project-config-advanced"/>,
        which become accessible by pressing the <option>Advanced</option>
        button and documented below.ex
      </para>
      <figure id="fig-scm-git-project-config-advanced">
        <title>Configuring advanced Git configuration</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-config-advanced.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-git-project-config-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Excluded Regions</term>
          <listitem>
            <para>This configuration allows you to specifically exclude files
              and directories to determine if a build should be triggered. If
              set, Hudson will not trigger a build if only files and directories
              matching the patterns have been changed. This option is useful if
              you are only interested in a subset of files and directories
              contained in a Git repository to trigger a build on Hudson. An
              example would be if documentation files contained in the
              repository should not trigger a new build.
            </para>
            <para>The configuration supports usage of regular expression
              patterns to specify the desired files as well as multiple lines to
              configure larger sets of files and directories to match.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Excluded Users</term>
          <listitem>
            <para>If this field is populated and Hudson is configured to poll
              git as a build trigger, Hudson will not trigger builds
              for commits from the specified users. This can be used to avoid
              builds to be triggered by commits done by Hudson or other
              systems that commit changes that should not trigger a build.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Checkout/merge to local branch (optional)</term>
          <listitem>
            <para>Supplying a value here causes git to create a local
            branch to checkout to. All the branches specified in the
            configuration above would be merged into that local branch.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Local subdirectory for repo (optional)</term>
          <listitem>
            <para>You can specify the name of the subdirectory to checkout a git
              project to. If you omit this subdirectory, the git repository will
              be checked out into the workspace directory.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Config user.name Value</term>
          <listitem>
            <para>This option allows you to cause git to set the
              <varname>user.name</varname>
              property prior to checkout and build. It overrides the global git
              configuration of the same property
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Config user.email Value</term>
          <listitem>
            <para>This option allows you to cause git to set the
              <varname>user.email</varname>
              property prior to checkout and build. It overrides the global git
              configuration of the same property
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Merge options</term>
          <listitem>
            <figure id="fig-scm-git-project-config-adv-merge">
              <title>Configuring Git merge options</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/scm-git-project-config-adv-merge.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/scm-git-project-config-adv-merge.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>When you activate the option <option>Merge before
              build</option> the configuration parameters displayed in
              <xref linkend="fig-scm-git-project-config-adv-merge"/> become
              accessible. This powerful option can be used to specify a
              repository to merge from in <option>Name of repository</option>
              . The content of the repository will be merged to the branch
              specified in <option>Branch to merge to</option> and if the
              operation succeeds the build will proceed. The merge can then
              be pushed back to the remote repository by configuring a Git
              publisher post build action as documented in
              <xref linkend="section-scm-git-project-publisher"/></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prune remote branches before build</term>
          <listitem>
            <para>Selecting this option will cause the build to run the
              command <command>git remote prune</command> before each build
              . This is especially useful if remote branches are created and
              removed regularly allowing the local checkout in Hudson to stay
              in sync and only build the branches that alos exist remotely.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Skip internal tag</term>
          <listitem>
            <para>Selecting this option will cause Hudson to omit the tagging
              of the local repository after each checkout,
              which performed by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Clean after checkout</term>
          <listitem>
            <para>This option causes git to remove all untracked files after
              each checkout and prior to the build.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Recursively update submodules</term>
          <listitem>
            <para>With this option selected and a new enough Git version
              installed submodules will be updated as part of the update
              prior to building.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Use commit author in changelog</term>
          <listitem>
            <para>Selecting this option changes the display of the changelog
              to show the commits <varname>author</varname>,
              rather than the default <varname>committer</varname>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Wipe out workspace before build</term>
          <listitem>
            <para>This option will cause a complete wipe of the
              workspace prior to each build. Use caution when activating this
              option since it can have a significant impact on data transfer and
              time for the checkout and therefore build. For Maven projects it
              potentially wipes the local repository as well causing further
              increases in build time. The other options for keeping the
              workspace cleaned documented above are more advisable to be used
              in most cases.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Choosing strategy</term>
          <listitem>
            <para>This drop down will have only a <option>Default</option>
              option available with a default Hudson install. It determines
              which revision of the specified repositories and branches to
              build. For one branch and one repository HEAD will be built.
              For multiple branches and repositories a more refined strategy
              is used selecting revisions that have notG yet been built and
              are on the specified branches.</para>
            <para>Other plugins can implement a different choosing
              strategy e.g. the <ulink url="http://wiki.hudson-ci
              .org/display/HUDSON/Gerrit+Plugin">Gerrit Plugin</ulink>
              enables a Gerrit change set based strategy effectively allowing
              verified, pre-tested commits.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Git executable</term>
          <listitem>
            <para>This drop-down allows you to select a specific git
              executable used for all operations on this project's build.
              Configuration of the executables is documented in
              <xref linkend="section-scm-git-global"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-git-project-publisher">
      <title>Configuring the post-build action Git Publisher</title>
      <para>The git plugin adds the post build action
        <option>Git Publisher</option> as displayed in
        <xref linkend="fig-scm-git-project-pub"/> to the project-specific
        configuration. It can be used to push merges done prior to the
        build back out to a remote repository after a build.</para>
      <figure id="fig-scm-git-project-pub">
        <title>Configuring Git merge options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-pub.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-pub.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <variablelist>
        <varlistentry>
          <term>Push Only If Build Succeeds</term>
          <listitem>
            <para>Selecting this option will cause Hudson to skip publishing
              any changes via push if the build failed.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Merge Results</term>
          <listitem>
            <para>With this option activated Hudson will push any merge
              results done prior to the build back to the remote origin.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Tags</term>
          <listitem>
            <para>The <option>Add Tag</option> button allows you to
              configure one or more tags to push to and potentially create.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Branches</term>
          <listitem>
            <para>The
              <option>Add Branch</option>
              button allows you to configure one or more branch and remote
              combinations to push to.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>When configuring the Git Publisher you can specify Tags in
        fields displayed in <xref linkend="fig-scm-git-project-pub-tags"/>.
      </para>
      <figure id="fig-scm-git-project-pub-tags">
        <title>Configuring Git merge options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-pub-tags.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-pub-tags.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Tag to push</term>
          <listitem>
            <para>This input allows you to provide the name for the tag to
              use. It supports the expansion of environment variables as part
              of the tag name using the ${key} syntax. An example would be to
              use <varname>Hudson-Build-${BUILD_NUMBER}</varname> to create a
              tag called e.g. Hudson-Build-123. Read
              <xref linkend="section-configure-global-properties"/> for more
              information about defining properties and available predefined
              ones.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Create new tag</term>
          <listitem>
            <para>This checkbox determines if the tag to push to as
              provided above should be created as a new tag or be used
              as an existing tag.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Target remote name</term>
          <listitem>
            <para>The name of the remote to push the tag to. The name needs
              to be configured as a repository in the SCM setion for this
              project.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Configuring branches to push to is done in the user
        interface displayed in <xref
          linkend="fig-scm-git-project-pub-branches"/>.
      </para>
      <figure id="fig-scm-git-project-pub-branches">
        <title>Configuring Git merge options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-pub-branches.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-pub-branches.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Branch to push</term>
          <listitem>
            <para>This parameter specifies the branch the changes get push to
              after the build completes.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Target remote name</term>
          <listitem>
            <para>The <option>Target remote name</option> specifies the
              remote repository to which a push will be done and needs to be
            one of the names configured as a repository in the SCM sectio
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-git-basic-config">
      <title>Minimal Basic Git Configuration</title>
      <para>In order to build a project controlled in git you need to have
        a git installation configured in the global configuration.
      </para>
      <para>In terms of project specific configuration you only need to specify
        the public url of the repository. We recommend to specify the branch to
        build as well since the default setup without a branch specified will
        examine all branches in the repository and build the latest changed
        branch. In a normal project this might adversely affect the stability of
        the build and potentially cause a confusing history for the project. We
        suggest to set up separate projects for each branch you want to track
        and build on Hudson.
      </para>

    </section>
    <section id="section-scm-git-advanced-config">
      <title>Tips and Tricks for Advanced Git Configurations</title>
      <section>
        <title>Multiple branches and automated merging</title>
        <para>The recommended basic usage with the git plugin is to configure
        the project branch for the build e.g. <code>master</code>. However
          per default no branch is configured. This causes all branches to be
          monitored for changes and the branch with the last branch to be
          built.</para>
        <para>Without further configuration this is not really that useful
          since it will cause your project build history to be comprised of
          builds from all the different branches individually in the order of
          changes received and potentially even omit builds if changes hit
          multiple branches between builds.
        </para>
        <para>However together with configuring <option>Merge
          Options</option> it allows for a automated merge from
          whichever branch to have the latest changes to the target branch e
          .g. <code>master</code> and proceed with the build after the merge.
        </para>
        <para>Now you can activate the <option>Git Publisher</option>
          post-build action <option>Push Only If Build Succeeds</option> and
          <option>Merge Results</option> to have the remote repository
          updated with the successful merge results.
        </para>
        <para>This approach can be configured with specific branches
          rather than the default empty specification of branches to have
          better control of the source branches to merge from. It can also be
          combined with multiple repositories to pull changes in from.
        </para>
      </section>
    </section>
  </section>

  <section id="section-scm-hg">
    <title>Configuring Mercurial</title>
    <para>
      <ulink url="http://mercurial.selenic.com/">Mercurial</ulink>, also known
      as hg, is a successful, modern distributed version control system and has
      gained wide acceptance in the open source community and beyond used for
      large projects like OpenJDK and Netbeans and repository hosting
      services available from multiple suppliers for commercial and open
      source usage.
    </para>

    <para>The Hudson Mercurial Plugin and therefore support for Mercurial needs
      to be installed on your Hudson instance. Simply find the plugin in the
      <option>Source Code Management</option>
      section of the available plugins and install it like any other plugins as
      documented in
      <xref linkend="chapter-plugin-management"/>.
    </para>

    <section id="section-scm-hg-global">
      <title>Global Mercurial Configuration</title>

      <para>To configure Mercurial, find the Mercurial section in the Hudson
        Server configuration screen as displayed in
        <xref linkend="fig-scm-hg-global-config"/>, press the
        <option>Add</option>
        and configure the parameters for your Mercurial install. If Mercurial
        is already installed on your Hudson server and the <command>hg</command>
        is available on the path, you do not need to configure a Mercurial
        installation. The plugin will pick up the installed version.
      </para>

      <figure id="fig-scm-hg-global-config">
        <title>Configuring Mercurial Installations</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-hg-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-hg-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Name</term>
          <listitem>
            <para>The <option>Name</option> will be displayed in the drop
              down to select your Mercurial install in the project
              configuration. Use a name that includes the version to be able
              to identify the Mercurial install you desire to use in the
              project configuration, especially when using multiple installs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Installation directory</term>
          <listitem>
            <para>Specify the absolute path to the Mercurial installation
              .</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Executable</term>
          <listitem>
            <para>This is the path to the actual <varname>hg</varname>
              executable. The field is prefilled with
              <varname>INSTALLTION/bin/hg</varname>,
              which is the correct value if you use a manual install of hg.
              If you
              are using binary package as provided by your operating system
              package management system the correct value is likely just
              <varname>hg</varname>, since the command would be on the
              <varname>PATH</varname>. Another common option is the absolute
              path of the executable e.g. <varname>/usr/bin/hg</varname>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Use Repository Caches</term>
          <listitem>
            <para>Enabling this option triggers the Mercurial plugin to
              establish a repository cache on the Hudson master that will be
              used by the slave nodes as well. This considerably improves
              performance and reduces load on the Mercurial server.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Debug Flag</term>
          <listitem>
            <para>As the name suggest activating this option,
              triggers debug output of any Mercurial command execution. This
              is especially useful for trouble shooting your configuration.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Download Forest extension</term>
          <listitem>
            <para>Using one of the suggested values in the online help for
              this option you can get the forest extension to work with
              multiple repositories installed automatically. This is
              especially useful if you can not easily install the extension
             with the same mechanism you installed Mercurial itself e.g. if
              no native package for the extension is available.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>In addition the Mercurial plugin facilitates the tool installer from
        Hudson that allows
        <option>Run Command</option>
        and
        <option>Extract from *.zip/*.tar.gz</option>
        based installs similar to the JDK installs documented in details in
        <xref linkend="section-configure-jdk"/>. The Ant and the Maven plugins
        installers described in
        <xref linkend="section-configure-ant"/>
        and
        <xref linkend="section-configure-maven"/>
        use the same installers and you can find more hints of its usage there.
      </para>
    </section>
    <section id="section-scm-hg-project">
      <title>Project-specific Mercurial Configuration</title>
      <para>Selecting Mercurial under the Source Code Management section will
        display the configuration options shown in<xref
          linkend="fig-scm-hg-project-config"/>.
      </para>

      <figure id="fig-scm-hg-project-config">
        <title>Configuring Mercurial Source Control Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-hg-project-config.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-hg-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The section show in
        <xref linkend="fig-scm-hg-project-config" xrefstyle="select:label"/>
        contains the following options:
      </para>

      <variablelist>
        <varlistentry>
          <term>Mercurial Version</term>
          <listitem>
            <para>This drop down lets you choose from the configured
              Mercurial installations. In most cases the
              <option>Default</option> will be fine.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository URL</term>
          <listitem>
            <para>Specify the URL of the project to build.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Branch</term>
          <listitem>
            <para>By default a branch named <varname>default</varname> will
              be checked out for the project build. This input allows you to
              specify and therefore build any other branch.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Modules</term>
          <listitem>
            <para>The advanced setting <option>Modules</option> allows you to
              specify a folder and its contents, known as module,  within the
              repository to
              be
              the
              exclusive source for changes triggering a build.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Clean Build</term>
          <listitem>
            <para>Activating the <option>Clean Build</option> option causes
              Mercurial to remove any untracked files prior to the build.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Subdirectory</term>
          <listitem>
            <para>By default the repository is checked out into the workspace
              . Supplying a value in the
              <option>Subdirectory</option> option will cause the repository
              to be checked out into a subdirectory in the workspace.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Forest Extension</term>
          <listitem>
            <para>This experimental features triggers the activation of
              the Mercurial forest extension, which will treat the
              workspace as the root of a forest.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Browser</term>
          <listitem>
            <para>para>The default
              <option>Auto</option>
              option will cause the plugin to attempt to detect a web-based user
              interface to access the Mercurial repository. Selecting one of
              the
              supported repository browsers
              <option>hgweb</option>,
              <option>bitbucket</option>,
              <option>googlecode</option>,
              <option>kilnhg</option>
              and
              <option>fisheye</option> lets you provide a <option>
              URL</option> to the
              repository browser. With the URL specified the changes
              view of each build will have added links to the repository.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-hg-basic-config">
      <title>Minimal Basic Mercurial Configuration</title>
      <para>In order to build a project controlled in Mercurial you need to
        install the Mercurial plugin and have a hg installation configured in
        the global configuration.
      </para>
      <para>In terms of project specific configuration you only need to specify
        the public url of the repository.
      </para>
    </section>
    <!--<section id="section-scm-hg-advanced-config">-->
      <!--<title>Tips and Tricks for Advanced Mercurial Configurations</title>-->
      <!-- TODO this should be added in one way or another
      http://stackoverflow.com/questions/6558542/how-to-clone-a-googlecode-mercurial-repository-in-jenkins
      -->
    <!--</section>-->
  </section>

  <section id="section-scm-cvs">
    <title>Configuring CVS</title>
     <para>The Hudson CVS Plugin  and support for the
      <ulink url="http://cvs.nongnu.org/">CVS system</ulink>
      is part of the default install of Hudson. It is therefore not necessary to
      perform any further plugin installation to use CVS for your
      project.
    </para><section id="section-scm-cvs-global">
      <title>Global CVS Configuration</title>
      <para>To configure CVS, find the CVS section in the Hudson Server
        configuration screen as displayed in
        <xref linkend="fig-scm-cvs-global-config"/>, press the
        <option>Add</option>
        and configure the parameters for your CVS install. If CVS
        is already installed on your Hudson server and the
        <command>cvs</command>
        is available on the path, you do not need to configure a CVS
        installation. The plugin will pick up the installed version.
      </para>

      <figure id="fig-scm-cvs-global-config">
        <title>Global CVS Configuration</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-cvs-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-cvs-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following parameters need to be configured as desired:</para>
      <variablelist>
        <varlistentry>
          <term>cvs executable</term>
          <listitem>
            <para>If the cvs executable can not be found on the
              <option>PATH</option>, you can configure an absolute path to it
              in this input field.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>.cvspass file</term>
          <listitem>
            <para>Specify the path to the .cvspass file that contains
              the user credentials.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Disable CVS compression</term>
          <listitem>
            <para>Activate this option to disable CVS compression.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-cvs-projectf">
      <title>Project-specific CVS Configuration</title>

      <para>Selecting CVS under the Source Code Management section will display
        the configuration options shown in
        <xref linkend="fig-scm-cvs-project-config"/>.
      </para>

      <figure id="fig-scm-cvs-project-config">
        <title>Configuring CVS Source Control Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-cvs-project-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-cvs-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fig-scm-cvs-project-config-advanced">
        <title>Configuring CVS Source Control Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-cvs-project-config-advanced.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-cvs-project-config-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The section show in
        <xref linkend="fig-scm-cvs-project-config" xrefstyle="select:label"/>
        and
        <xref linkend="fig-scm-cvs-project-config-advanced" xrefstyle="select:label"/>
        contain the following options:
      </para>

      <variablelist>
        <varlistentry>
          <term>CVSROOT</term>
          <listitem>
            <para>This is the CVSROOT parameter for your source. You would enter
              in the same information here that you would use if you were
              checking out source code use the CVS client. </para>
            <para>The format for the URL is
              <screen>
                <code>[[:protocol:][[user][:password]]][@servername][:serverpath]</code>
              </screen>
              with the parameters:
              <variablelist>
                <varlistentry>
                  <term>:protocol:</term>
                  <listitem>
                    <para>The protocol defines the way the CVS client
                      communicates to the repository and the protocol name has
                      to be enclosed in<code>:</code>. Supported protocols are
                      <code>:local:</code>
                      for local or net file system level connection,
                      <code>:pserver:</code>
                      as the standard unsecured protocol,
                      <code>:ext:</code>, <code>:ssh:</code>
                      and
                      <code>:extssh:</code>
                      for secure shell based connections and
                      <code>:sspi:</code>
                      for Windows based access. Depending on your CVS client and
                      server installs other protocols are supported as well.
                    </para>
                    <para>In general and specifically with Hudson due to its
                      nature as an additional user for CVS we recommend not to
                      use the local protocol, since it can cause problems if too
                      many users will try to access it.
                    </para>
                    <para>When using the pserver protocol on the public internet
                      you have to keep in mind that it is an insecure protocol
                      and passwords and data can be sniffed theoretically.
                      Replace it with using the ssh based protocols, when
                      security is required.
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>user</term>
                  <listitem>
                    <para>Supply the user name for the client-server protocol
                      used.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>:password</term>
                  <listitem>
                    <para>Specify the password when using the
                      <code>:pserver:</code> or
                      <code>:sspi:</code> protocol.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>@servername</term>
                  <listitem>
                    <para>The server name of the repository server as
                      reachable via the network. It can be a fully qualified
                      server and domain name, a server name only or an IP
                      number. The character <code>@</code> is required at the
                      beginning of the server name.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>:serverpath</term>
                  <listitem>
                    <para>The path to the repository on the server prepended
                      by <code>:</code>. The path itself can be either unix
                      style like <code>/opt/data/cvsrepo</code> or Windows
                      style like <code>C:\cvs\repository</code>.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
              An example for a valid url is
              <screen>
                <command>:pserver:anonymous@tortoisecvs.cvs.sourceforge.net:/cvsroot/tortoisecvs</command>
              </screen>
              with a module defined.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Module(s) and Branch</term>
          <listitem>
            <para>Here you can provide specific modules and specific branches to
              be checked out by Hudson. Multiple module can be specified
              using a space separated list and with a parameterized build job
              parameters can be used to specify branch or module.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>CVS_RSH</term>
          <listitem>
            <para>If you are using CVS over SSH, you can specify options and
              parameters in this variable.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Use update</term>
          <listitem>
            <para>Hudson can be configured to do a full checkout on each build
              or to use cvs update. Selecting this option will tell Hudson to
              use update instead of performing a clean checkout. For most
              reasonably sized projects you should activate this option.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository browser</term>
          <listitem>
            <para>The default
              <option>Auto</option>
              option will cause the plugin to attempt to detect a web-based user
              interface to access the CVS repository. Selecting one of the
              supported repository browsers
              <option>ViewCVS</option>
              and
              <option>FishEye</option>
              lets you provide a
              <option>URL</option>
              to the repository browser.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Excluded Regions</term>
          <listitem>
            <para>If the module you are checking out contains some files that
              you need to exclude from triggering a build when changed, you can
              exclude regions by populating this field with the respective
              patterns.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-cvs-basic-config">
      <title>Minimal Basic CVS Configuration</title>
      <para>In order to build a project controlled in CVS you need to have
        CVS available on the PATH on the Hudson server or have the path
        configured in the global configuration. For the project specific
        settings configure the repository url and a module.
      </para>
    </section>
    <!--<section id="section-scm-cvs-advanced-config">-->
      <!--<title>Tips and Tricks for Advanced CVS Configurations</title>-->
    <!--</section>-->

  </section>
</chapter>

<chapter id="chapter-grid">
    <title>Running a Hudson grid</title>

  <section>
    <title>Motivation</title>
  </section>

  <section>
    <title>Installing a Hudson Slave</title>
  </section>

  <section>
    <title>Advanced Tips and Tricks</title>

    <section>
      <title>hudson-slave.xml</title>
      <para>can be edited to modify various parameters like Java version used
        to run Hudson slave and others.
      </para>

    </section>
  </section>


</chapter>

<chapter id="chapter-plugins">
  <title>Notable Hudson Plugins</title>

  <section>
    <title>Hudson XYZ Plugin</title>
    <section>
      <title>Overview and Purpose</title>
      <para></para>
    </section>
    <section>
      <title>Features</title>
      <para></para>
      <variablelist>
        <varlistentry>
          <term></term>
          <listitem>
            <para>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>

<chapter id="chapter-ide-integration">
    <title>IDE Integration</title>
    <para>The default way of interacting with Hudson is the web-based user
      interface. In addition Hudson ships with web service interfaces, that
      enable integration with others tools such as integrated development
      environments.</para>

  <section>
    <title>Eclipse Integration</title>


    <para>Hudson offers an intuitive set of Eclipse plugins which allow for
      greater control and interaction with your Hudson instance. This section
      covers some of these plugins and gives you an overview of how to access
      some of the features that allow you to have immediate insight into
      continuous builds.
    </para>

    <section>
      <title>The Hudson Jobs Eclipse View</title>

      <para>To open up the Hudson Jobs view in Eclipse, go to
        <menuchoice>
          <guimenu>Window</guimenu>
          <guisubmenu>Show View</guisubmenu>
          <guimenuitem>Other...</guimenuitem>
        </menuchoice>
        . Selecting this menu item will display the dialog shown in
        <xref linkend="fig-eclipse-open-hudson-jobs" xrefstyle="label"/>.
      </para>

      <figure id="fig-eclipse-open-hudson-jobs">
        <title>Opening the Hudson Jobs View in Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-open-hudson-jobs.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-open-hudson-jobs.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you've select this Hudson Jobs view, you should see a list of
        jobs as shown in<xref linkend="fig-eclipse-hudson-jobs"/>. This is a
        list which is retrieved directly from Hudson using Hudson REST services.
        To refresh the list of jobs, click on the refresh icon shown in the
        following figure.
      </para>

      <figure id="fig-eclipse-hudson-jobs">
        <title>Hudson Jobs View in Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-hudson-jobs.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-hudson-jobs.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If your Eclipse instance is not yet connected to a Hudson server,
        click on the blue sphere icon to the left of the refresh icon in the
        previous figure. This icon will load the Subscribe to Build Job
        Notifications dialog. To connect Eclipse to a new Hudson instance, enter
        the URL of the Hudson server along with your username and password
        credentials.
      </para>
    </section>

    <section>
      <title>View Hudson Projects from Eclipse</title>

      <para>Once you've loaded a list of Hudson jobs in Eclipse, you can click
        on one of these Build Jobs to view a detailed snapshot of the project
        status and any associated builds.
        <xref linkend="fig-eclipse-matrix-project"/>
        shows the status of a build job from Sonatype's own Hudson instance. In
        tis dialog you can see that the job detail window contains general
        information about the Job in Job Properties, information about specific
        Job Builds in Build Properties and also links to alternative
        configuration for Build Jobs. If you need to get more information about
        the Job's workspace in order to trouble shoot a build, you can also
        click on<option>View job workspace</option>. Clicking on this link will
        load the project's workspace in a browser window as another Eclipse
        tab.
      </para>

      <figure id="fig-eclipse-matrix-project">
        <title>Viewing a Matrix Project from Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-matrix-project.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-matrix-project.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>There are two very useful ways in which you can view the results of
        a build. They are viewing a build's JUnit test results, viewing the SCM
        changes associated with a specific build, and viewing a build's console
        output. Both of these views of a particular job are the main ways in
        which you can understand and diagnose issues with continuous integration
        builds.
      </para>

      <para>To view a build job's JUnit test results, load the job detail page
        and click on the Test Results link shown in<xref
          linkend="fig-eclipse-matrix-project"/>. Clicking on this link will
        load the view shown in<xref linkend="fig-eclipse-junit-tests"/>. From
        this view you can navigate through the JUnit test results for a specific
        build job. This level of visibility into the continuous integration
        machine gives you insight into code-level issues happening on a remote
        build machine without requiring you to exit out of Eclipse and fire up a
        web browser.
      </para>

      <figure id="fig-eclipse-junit-tests">
        <title>Viewing JUnit Test Reports from Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-junit-tests.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-junit-tests.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>To view a specific build's SCM changes. Load the project detail view
        and click on the SCM Changes tab shown in<xref
          linkend="fig-eclipse-matrix-project"/>. This particular view of a
        project combines the changelog of every single build into an easily
        navigable interface. From the view shown in
        <xref linkend="fig-eclipse-scm-changes"/>
        you can see what code changes trigger individual builds and you can get
        a sense for what activity and which committer are responsible for build
        successes and failures.
      </para>

      <figure id="fig-eclipse-scm-changes">
        <title>Viewing SCM Changes from Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-scm-changes.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-scm-changes.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Viewing a specific build's console output is often the quickest way
        to get to the bottom of a build failure. To open a build's console
        output, select the project from the Hudson jobs view, select an
        individual project build, and then click on the "Console Output" link
        shown in<xref linkend="fig-eclipse-matrix-project"
                      xrefstyle="select:label"/>. Clicking on this link will
        load the view shown in<xref linkend="fig-eclipse-console-output"
                                    xrefstyle="select:label"/>. This view gives
        you the raw console output from a Hudson build.
      </para>

      <figure id="fig-eclipse-console-output">
        <title>Viewing Hudson Console Output from Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-console-output.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-console-output.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fig-eclipse-job-parent">
        <title>Hudson Jobs View in Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-job-parent.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-job-parent.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fig-eclipse-project-link">
        <title>Viewing a Hudson Project from Eclipse</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/ide-eclipse-project-link.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/ide-eclipse-project-link.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

  <section>
    <title>Configuring Eclipse Hudson Notifications</title>

    <para>Once you've connected Eclipse to Hudson, you can also
    configure the tool to notify you of build failure events. <xref
    linkend="fig-eclipse-notify" /> shows an Eclipse installation which has
    been configured to receive notifications of specific build failures.
    Eclipse will periodically poll Hudson to check for build failures in
    specific projects.</para>

    <figure id="fig-eclipse-notify">
      <title>Hudson Notifications in Eclipse</title>
      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/ide-eclipse-notify.png" scalefit="1" />
        </imageobject>
        <imageobject role="print">
          <imagedata align="center" fileref="figs/print/ide-eclipse-notify.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  </section>
</chapter>

<chapter id="chapter-nexus">
    <title>Hudson and Nexus</title>
</chapter>

<chapter id="chapter-sonar">
    <title>Hudson and Sonar</title>
</chapter>

<chapter id="chapter-polyglot">
    <title>Polyglot Hudson</title>
</chapter>

<chapter id="chapter-plugin-writing">
    <title>Writing a Hudson Plugin</title>
</chapter>

<appendix id="appendix-license">
  <title>Book License</title>

  <section id="copyright-sect-creative-commons">
    <title>Book License</title>

    <para>This is currently a placeholder.</para>
  </section>
</appendix>

<appendix id="appendix-changes">
  <title>Book Revision History</title>

  <para>Many readers have been asking us to keep track of specific changes to
  the book content, the following sections list changes made to the book in
  reverse chronological order starting with ${project.version}.</para>
</appendix>

    <index></index>
</book>
