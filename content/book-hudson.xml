<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<book lang="en">
<bookinfo>
    <title>The Hudson Book</title>
    <author>
        <firstname>Oracle,</firstname>
        <surname>Inc.</surname>
    </author>
    <authorinitials>OI</authorinitials>
    <isbn>9780984243303</isbn>

    <edition>3.0.2</edition>

    <author>
      <surname>Sonatype, Inc.</surname>
    </author>

    <author>
      <surname>O'Brien</surname>

      <firstname>Tim</firstname>
    </author>

    <author>
      <surname>Van Zyl</surname>

      <firstname>Jason</firstname>
    </author>

    <author>
      <surname>Bradicich</surname>

      <firstname>Damian</firstname>
    </author>

    <author>
      <surname>Casey</surname>

      <firstname>John</firstname>
    </author>

    <author>
      <surname>Cservenák</surname>

      <firstname>Tamás</firstname>
    </author>

    <author>
      <surname>Demers</surname>

      <firstname>Brian</firstname>
    </author>

    <author>
      <surname>Fox</surname>

      <firstname>Brian</firstname>
    </author>

    <author>
      <surname>Froeder</surname>

      <firstname>Marvin</firstname>
    </author>

    <author>
      <surname>Hammar</surname>

      <firstname>Anders</firstname>
    </author>

    <author>
      <surname>Seddon</surname>

      <firstname>Rich</firstname>
    </author>

    <author>
      <surname>Xu</surname>

      <firstname>Juven</firstname>
    </author>

    <editor>
      <othername>Tim O'Brien</othername>

      <affiliation>
        <orgname>Sonatype, Inc.</orgname>
      </affiliation>
    </editor>

    <copyright>
      <year>2011</year>

      <holder>Sonatype, Inc.</holder>
    </copyright>

    <publisher>
      <publishername>Sonatype, Inc.</publishername>

      <address><street>12501 Prosperity Drive, Suite 350</street><city>Silver Spring</city><state>MD</state><postcode>20904</postcode></address>
    </publisher>

    <abstract>
      <para>Nexus manages software “artifacts” required for development,
      deployment, and provisioning. If you develop software, Nexus can help
      you share those artifacts with other developers and end-users. Maven’s
      central repository has always served as a great convenience for users of
      Maven, but it has always been recommended to maintain your own
      repositories to ensure stability within your organization. Nexus greatly
      simplifies the maintenance of your own internal repositories and access
      to external repositories. With Nexus you can completely control access
      to, and deployment of, every artifact in your organization from a single
      location.</para>
    </abstract>
</bookinfo>
<preface id="copyright">
<title>Copyright</title>
<simpara>Copyright © 2011 Oracle, Inc.. All rights
reserved.</simpara>
<simpara>Online version published by Oracle, Inc.,
500 Oracle Parkway, Redwood Shores, CA 94065.</simpara>
<simpara>Hudson is a registered trademark of Oracle, Inc., in the United States
and other countries.</simpara>
<simpara>Nexus™, Nexus Professional™, and all Nexus-related logos are
trademarks or registered trademarks of Sonatype, Inc., in the United
States and other countries.</simpara>
<simpara>Java™ and all Java-based trademarks and logos are trademarks or
registered trademarks of Oracle, Inc., in the United States and other
countries.</simpara>
<simpara>IBM® and WebSphere® are trademarks or registered trademarks of
International Business Machines, Inc., in the United States and other
countries.</simpara>
<simpara>Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United
States and other countries.</simpara>
<simpara>Apache and the Apache feather logo are trademarks of The Apache
Software Foundation.</simpara>
<simpara>Linux® is the registered trademark of Linus Torvalds in the U.S. and
other countries.</simpara>
<simpara>Many of the designations used by manufacturers and sellers to
distinguish their products are claimed as trademarks. Where those
designations appear in this book, and Oracle, Inc. was
aware of a trademark claim, the designations have been printed in caps
or initial caps.</simpara>
<simpara>While every precaution has been taken in the preparation of this book,
the publisher and authors assume no responsibility for errors or
omissions, or for damages resulting from the use of the information
contained herein.</simpara>
</preface>
<preface id="foreword">
<title>Foreword: 1.0</title>
<simpara>This book covers Hudson, the most widely used open source Continuous
Integration Server. Oracle is excited to support the continued
development of Hudson as the Hudson community completes its transition
to the Eclipse Foundation.</simpara>
<simpara>If you have any feedback or questions, you are encouraged to post on
the Hudson project mailing lists.</simpara>
<simpara>The Hudson Book Authors</simpara>
<simpara>August, 2011</simpara>
<simpara>Edition: 1.0</simpara>
</preface>
<chapter id="chapter-introduction">
<title>Introducing Hudson</title>
<section id="intro-sect-intro">
<title>What is Hudson?</title>
<simpara>Hudson is a powerful and widely used open source continuous
integration server.</simpara>
</section>
<section id="_continuous_integration">
<title>Continuous Integration</title>
<simpara>Martin Fowler and Kent Beck are largely credited with the first use of
the term "Continuous Integration" as applied to the software
development with Kent Beck&#8217;s seminal 1999 book Extreme Programming
Explained being the first published work touching upon the idea of
creating systems to continuously build and test systems in response to
changes in source control.</simpara>
<note><simpara>Beck, Kent (1999). Extreme Programming Explained. ISBN
0-201-61641-6.</simpara></note>
</section>
<section id="_general_purpose_scheduler">
<title>General Purpose Scheduler</title>
<simpara>TBD</simpara>
</section>
<section id="_automation_platform">
<title>Automation Platform</title>
<simpara>Beyond the more traditional use cases of continuous integration and
scheduled task execution, Hudson is a logic place to base automation
efforts especially as they are related to the deployment of production
code.</simpara>
</section>
<section id="intro-sect-community">
<title>The Hudson Community</title>
<simpara>Hudson has a large user and developer community on its own and it part
of the large Eclipse Foundation and community.</simpara>
</section>
<section id="intro-sect-project">
<title>The Hudson Project</title>
<simpara>The central access to the Hudson project is the web site hosted at
<ulink url="http://hudson-ci.org">http://hudson-ci.org</ulink> and
contains links to resources like wiki, issue tracker, mailing lists,
source code and more.</simpara>
</section>
<section id="intro-sect-license">
<title>Hudson&#8217;s license</title>
<simpara>Hudson and its components are licensed under various open source
licenses.</simpara>
<simpara>The migration of Hudson under the governance of the Eclipse Foundation
will change the license to of all components to the Eclipse Public
License.</simpara>
</section>
</chapter>
<chapter id="chapter-ci">
<title>Understanding Continuous Integration</title>
<section id="section-ci-what">
<title>What is Continuous Integration</title>
<simpara>Continuous integration is a software development practice invented by
Martin Fowler and Kent Beck during the emergence of the Extreme
Programming software development methodology.</simpara>
<simpara>Read more about it all on
<ulink url="http://martinfowler.com/articles/continuousIntegration.html">Martin
Fowler&#8217;s web site</ulink> and
<ulink url="http://en.wikipedia.org/wiki/Continuous_integration">wikipedia</ulink></simpara>
<simpara>While continuous integration is slowly becoming a mainstream best
practice the more advanced usage of Hudson for continuous delivery or
continuous deployment is not yet widespread.</simpara>
</section>
</chapter>
<chapter id="chapter-install">
<title>Installing and Running Hudson</title>
<simpara>The following sections detail the installation process for Hudson. In
general there are two different approaches available.</simpara>
<variablelist>
<varlistentry>
<term>
WAR File
</term>
<listitem>
<simpara>
  section-maven-3-build-configuration &lt;para&gt;The Hudson website
  provides a Java web archive file (WAR) for download. This file can
  either be started directly or used in an existing Java servlet
  container or application server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Native Package
</term>
<listitem>
<simpara>
  Besides the web archive you can download packages for Hudson
  suitable for the use with the native package management of
  Ubuntu/Debian, Oracle Linux, Redhat/Fedora/CentOS and openSUSE.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>As a server-based application running 24x7 Hudson intrinsically should
be installed as an operating system service, so that any system
reboots necessary for maintenance or other reasons will automatically
restart Hudson. The documentation for the Hudson install therefore
includes documentation for setting up these services.</simpara>
<section id="section-install-preprequisites">
<title>Prerequisites</title>
<simpara>Hudson only has one prerequisite, a Java Runtime Environment (JRE)
compatible with Java 6 or higher.  Hudson is most often run with the
JRE that is bundled with a Java Development Kit (JDK) installation. We
recommend using the latest version of the JDK/JRE that comes as part
of your operating system.</simpara>
<simpara>The latest version of Oracle&#8217;s JDK 6 is the officially supported
runtime. To download the latest release of the Oracle JDK, go to
<ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</ulink>
, and download the latest Java 6 JDK.</simpara>
<simpara>OpenJDK as available with many Linux distributions as part of their
package system is known to work as a runtime for Hudson as are other
JVM implementations such Oracle JRockit, HP-UX JDK and IBM JDK.</simpara>
</section>
<section id="section-install-war">
<title>Installing Hudson with the WAR File Distribution</title>
<simpara>The WAR file available for download on the Hudson web site is an
executable WAR that has a servlet container embedded. Once downloaded
and copied to the desired directory, it is therefore possible to start
Hudson with the command</simpara>
<screen> java -jar hudson.war</screen>
<simpara>This will start the servlet container as the current operating system
user inheriting access rights to the file system and so on. The Hudson
home directory will be set to the <literal>.hudson</literal> folder in
the users home directory. Once started the web-based Hudson user
interface will be available at
<ulink url="http://localhost:8080/hudson">http://localhost:8080/hudson</ulink></simpara>
<figure id="fig-ci-quickstart-app-win"><title>Hudson Application Window</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/home-job-list.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/home-job-list.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>This approach is suitable for testing and exploring Hudson, but it is
not recommended to run Hudson like that in a production usage.
Conveniently the WAR file is suitable to be deployed in most of the
commonly used Java servlet containers and application server. The
detailed process differs for these containers but in general the
required steps are:</simpara>
<variablelist>
<varlistentry>
<term>
Set up HUDSON_HOME
</term>
<listitem>
<simpara>
  Hudson locates its configuration files and all other data in one
  folder and a multitude of sub folders. This folder should be
  configured by setting up an environment variable of
  <literal>HUDSON_HOME</literal>. The application will pick up this setting and use the
  specified folder.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Deploy to the server
</term>
<listitem>
<simpara>
  Depending on the application server and your access rights you can
  deploy the WAR file via a web-based administration console or by
  copying the WAR into a deployment folder.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>///
TODO add a specific hudson user maybe .. but not when other stuff
    runs on app server .. then the app server user needs access to
    HUDSON_HOME and whatever..
///</simpara>
<simpara>When using Hudson on your application server, you should ensure that
the server is set up as an operating system service. The details of
this setup widely vary between the various operating systems as well
as the different application servers. The preferred and simpler method
to install Hudson and run it as a service is a dedicated host and the
operating system-specific package as supplied by the Hudson website
and documented in the following sections.</simpara>
</section>
<section id="section-install-deb">
<title>Installing Hudson on Ubuntu/Debian</title>
<simpara>Hudson provides a package repository of deb files for users of Debian
based distributions such as Debian, Ubuntu and others. This package
will install Hudson and set it up as a service.</simpara>
<variablelist>
<varlistentry>
<term>
Step 1: Install Java runtime
</term>
<listitem>
<simpara>
  In order to fulfill the prerequisite of an installed Java runtime on
  a Debian based distribution it is best to install the meta package
  <literal>default-jdk</literal>, which will install OpenJDK, with your preferred
  package manager user interface. Either use a graphical user
  interface like <literal>synaptic</literal> or install from on the command-line with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo apt-get install default-jdk</screen>
<simpara>If you prefer to use the Oracle Java runtime install it with</simpara>
<screen>sudo apt-get install sun-java6-jdk</screen>
<variablelist>
<varlistentry>
<term>
Step 2: Add Hudson repository URL to package management
</term>
<listitem>
<simpara>
  The Hudson project hosts its packages in its own repository
  server. In order to use it you have to add its URL to your list of
  package sources with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>///
TODO: this does not work since sources deb is missing on
        the repo
        &lt;!--&lt;screen&gt;-&#8594;
         &lt;!--sudo add-apt-repository "deb <ulink url="http://hudson-ci.org/debian">http://hudson-ci.org/debian</ulink> binary/"-&#8594;
       &lt;!--&lt;/screen&gt;-&#8594;
       &lt;!--&lt;para&gt;or-&#8594;
///</simpara>
<screen>sudo sh -c "echo 'deb http://hudson-ci.org/debian binary/' \
&gt; /etc/apt/sources.list.d/hudson.list"</screen>
<simpara>or by adding the APT line <literal>deb <ulink url="http://hudson-ci.org/debian">http://hudson-ci.org/debian</ulink> binary/</literal>
in your graphical package manager as a repository URL.  Future upgrades will not require this step to be repeated.</simpara>
<variablelist>
<varlistentry>
<term>
Step 3: Update the list of available packages
</term>
<listitem>
<simpara>
  Once the prior steps are completed you can update the list of
  available packages in your graphical package manager or with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo apt-get update</screen>
<simpara>This step has to be repeated whenever you want to check for the
availability of upgrades. Common practice is for the update of the
list to run automatically on a regular basis.</simpara>
<variablelist>
<varlistentry>
<term>
Step 4: Install Hudson
</term>
<listitem>
<simpara>
Once your list of available packages is updated, you can install
Hudson with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo apt-get install hudson</screen>
<simpara>which will require you to confirm and will then proceed to install and
start Hudson. Your console output will look similar to this</simpara>
<screen>$ sudo apt-get install hudson
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  hudson
0 upgraded, 1 newly installed, 0 to remove and 4 not upgraded.
Need to get 38.8 MB of archives.
After this operation, 39.7 MB of additional disk space will be used.
WARNING: The following packages cannot be authenticated!
  hudson
Install these packages without verification [y/N]? y
Get:1 http://hudson-ci.org/debian/ binary/ hudson 2.0.0 [38.8 MB]
Fetched 38.8 MB in 39s (981 kB/s)
Selecting previously deselected package hudson.
(Reading database ... 180192 files and directories currently installed.)
Unpacking hudson (from .../archives/hudson_2.0.0_all.deb) ...
Processing triggers for ureadahead ...
ureadahead will be reprofiled on next reboot
Setting up hudson (2.0.0) ...
Adding system user `hudson' (UID 114) ...
Adding new user `hudson' (UID 114) with group `nogroup' ...
Not creating home directory `/var/lib/hudson'.
 * Starting Hudson Continuous Integration Server hudson  [ OK ]</screen>
<simpara>As you can see from the output above a hudson user was created . This
user will run the Hudson server. The Hudson home folder is configured
to be located in <literal>/var/lib/hudson</literal>, which will contain configuration,
workspaces and so on and should be added to your backup strategy.</simpara>
<variablelist>
<varlistentry>
<term>
Step 5: Upgrade Hudson
</term>
<listitem>
<simpara>
  To upgrade Hudson when a new release is available you would run
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo apt-get upgrade</screen>
<simpara>which will stop the running Hudson server, upgrade Hudson and restart
the server. Prior to upgrading you might want to backup your Hudson
data configuration located in <literal>/var/lib/hudson</literal> and owned by the
hudson user.  created.</simpara>
<simpara>The install configured Hudson as a service so that you can stop and
start the service with</simpara>
<screen>sudo service hudson stop
sudo service hudson start</screen>
<simpara>or with the equivalent direct call</simpara>
<screen>sudo /etc/init.d/hudson stop
sudo /etc/init.d/hudson start</screen>
<simpara>Following the Linux standard base convention Hudson will create its
log files into <literal>/var/log/hudson/hudson.log</literal> and the log files will be
rotated so you will no accumulate large log files using up disk space.</simpara>
<simpara>Looking at the list of files installed by the package</simpara>
<screen>$ dpkg -L hudson
/.
/var
/var/log
/var/log/hudson
/var/lib
/var/lib/hudson
/var/run
/var/run/hudson
/usr
/usr/share
/usr/share/doc
/usr/share/doc/hudson
/usr/share/doc/hudson/changelog.gz
/usr/share/doc/hudson/copyright
/usr/share/hudson
/usr/share/hudson/hudson.war
/usr/bin
/usr/sbin
/etc
/etc/apt
/etc/apt/sources.list.d
/etc/apt/sources.list.d/hudson.list
/etc/default
/etc/default/hudson
/etc/init.d
/etc/init.d/hudson
/etc/logrotate.d
/etc/logrotate.d/hudson</screen>
<simpara>reveals that a configuration file <literal>/etc/default/hudson</literal> was
created. It contains a number of configuration parameters that you
might want to adapt to your needs. These include e.g. the <literal>JAVA_ARGS</literal>
that can be used to increase the memory allocation for Hudson or the
<literal>HTTP-PORT</literal> parameter set to the common 8080. If you modify this file
to suit your needs, you should add it to you backup strategy.</simpara>
</section>
<section id="section-install-rpm">
<title>Installing Hudson on Redhat, CentOS, and Fedora</title>
<simpara>///
    at a later stage we can split this up but not now while it is all
    the same package and infrastructure
///</simpara>
<simpara>Oracle Linux, Redhat Enterprise Linux, CentOS and Fedora all use the
same rpm package provided by the Hudson project. This package will
install Hudson and set it up as a service.</simpara>
<variablelist>
<varlistentry>
<term>
STEP 1: Install Java runtime
</term>
<listitem>
<simpara>
  In order to fulfill the prerequisite of an installed Java runtime on
  a RedHat based distribution it is best to install the meta package
  <literal>java</literal>, which will install OpenJDK, with your preferred package
  manager user interface. Either use a graphical user interface like
  <literal>Add/Remove Software</literal> or install from on the command-line with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo yum install java</screen>
<variablelist>
<varlistentry>
<term>
STEP 2: Add Hudson repository URL to package management
</term>
<listitem>
<simpara>
  The Hudson project hosts its packages in its own repository
  server. In order to use it you have to add the repository meta data
  to your list of package sources with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo wget -O /etc/yum.repos.d/hudson.repo http://hudson-ci.org/redhat/hudson.repo</screen>
<simpara>Future upgrades will not require this step to be repeated.</simpara>
<variablelist>
<varlistentry>
<term>
STEP 3: Update the list of available packages
</term>
<listitem>
<simpara>
  Once the prior steps are completed you can update the list of
  available packages in your graphical package manager or with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo yum check-update</screen>
<simpara>This step has to be repeated whenever you want to check for the
availability of upgrades. Common practice is for the update of the
list to run automatically on a regular basis.</simpara>
<variablelist>
<varlistentry>
<term>
STEP 4: Install Hudson
</term>
<listitem>
<simpara>
  Once your list of available packages is updated, you can install
  Hudson with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo yum install hudson</screen>
<simpara>which will require you to confirm and will then proceed to install and
start Hudson. Your console output will look similar to this</simpara>
<screen>$ sudo yum install hudson
Loaded plugins: langpacks, presto, refresh-packagekit
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package hudson.noarch 0:2.0.1-1.1 will be installed
--&gt; Finished Dependency Resolution

Dependencies Resolved

======================================================================
 Package        Arch            Version                 Repository      Size
======================================================================
Installing:
 hudson         noarch          2.0.1-1.1               test            37 M

Transaction Summary
======================================================================
Install         1 Package(s)

Total download size: 37 M
Installed size: 37 M
Is this ok [y/N]: y
Downloading Packages:
Setting up and reading Presto delta metadata
Processing delta metadata
Package(s) data still to download: 37 M
hudson-2.0.1-1.1.noarch.100% [=======] 953 kB/s | 37 MB         00:40
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : hudson-2.0.1-1.1.noarch          1/1

Installed:
  hudson.noarch 0:2.0.1-1.1

Complete!</screen>
<variablelist>
<varlistentry>
<term>
STEP 5: Upgrade Hudson
</term>
<listitem>
<simpara>
  To upgrade Hudson when a new release is available you would run
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo yum update</screen>
<simpara>which will stop the running Hudson server, upgrade Hudson and restart
the server. Prior to upgrading you might want to backup your Hudson
data configuration located in <literal>/var/lib/hudson</literal> and owned by the
hudson user.  created.</simpara>
<simpara>The install configured Hudson as a service so that you can stop and
start the service with</simpara>
<screen>    sudo service hudson stop
    sudo service hudson start</screen>
<simpara>Following the Linux standard base convention Hudson will create its
log files into <literal>/var/log/hudson/hudson.log</literal> and the log files will be
rotated so you will no accumulate large log files using up disk space.</simpara>
<simpara>Looking at the list of files installed by the package</simpara>
<screen>$ rpm -ql hudson
/etc/init.d/hudson
/etc/logrotate.d/hudson
/etc/sysconfig/hudson
/usr/lib/hudson
/usr/lib/hudson/hudson.war
/usr/sbin/hudson
/var/lib/hudson
/var/log/hudson</screen>
<simpara>reveals that a configuration file <literal>/etc/sysconfig/hudson</literal> was
created. It contains a number of configuration parameters that you
might want to adapt to your needs. These include e.g. the
<literal>HUDSON_JAVA_OPTIONS</literal> that can be used to increase the memory
allocation for Hudson or the <literal>HUDSON_PORT</literal> parameter set to the common
8080. If you modify this file to suit your needs, you should add it to
you backup strategy.</simpara>
<simpara>As part of the install a hudson user was created . This user will run
the Hudson server. The Hudson home folder is configured to be located
in <literal>/var/lib/hudson</literal>, which will contain configuration, workspaces and
so on and should be added to your backup strategy.</simpara>
</section>
<section id="section-install-opensuse">
<title>Installing Hudson on OpenSUSE</title>
<simpara>OpenSUSE uses a special rpm package provided by the Hudson project.
This package will install Hudson and set it up as a service.</simpara>
<variablelist>
<varlistentry>
<term>
STEP 1: Install Java runtime
</term>
<listitem>
<simpara>
  In order to fulfill the prerequisite of an installed Java runtime on
  openSUSE it is best to install the meta package <literal>java</literal>, which will
  install OpenJDK, with your preferred package manager user
  interface. Either use a graphical user interface like <literal>YaST</literal> or
  install from on the command-line with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo zypper install java</screen>
<variablelist>
<varlistentry>
<term>
STEP 2: Add Hudson repository URL to package management
</term>
<listitem>
<simpara>
  The Hudson project hosts its packages in its own repository
  server. In order to use it you have to add the repository meta data
  to your list of package sources with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo wget -O /etc/zypp/repos.d/hudson.repo http://hudson-ci.org/opensuse/hudson.repo</screen>
<simpara>Future upgrades will not require this step to be repeated.</simpara>
<variablelist>
<varlistentry>
<term>
STEP 3: Update the list of available packages
</term>
<listitem>
<simpara>
  Once the prior steps are completed you can update the list of
  available packages in your graphical package manager or with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo zypper refresh</screen>
<simpara>This step has to be repeated whenever you want to check for the
availability of upgrades. Common practice is for the update of the
list to run automatically on a regular basis.</simpara>
<variablelist>
<varlistentry>
<term>
STEP 4: Install Hudson
</term>
<listitem>
<simpara>
  Once your list of available packages is updated, you can install
  Hudson with
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo zypper install hudson</screen>
<simpara>which will require you to confirm and will then proceed to install and
start Hudson. Your console output will look similar to this</simpara>
<screen>$ sudo zypper install hudson
Loading repository data...
Reading installed packages...
Resolving package dependencies...

The following NEW package is going to be installed:
  hudson

1 new package to install.
Overall download size: 37.1 MiB. After the operation, additional 37.1 MiB will be
used.
Continue? [y/n/?] (y):
Installing: hudson-2.0.1-1.1 [done]
Additional rpm output:
hudson                    0:off  1:off  2:off  3:on   4:off  5:on   6:off</screen>
<variablelist>
<varlistentry>
<term>
STEP 5: Upgrade Hudson
</term>
<listitem>
<simpara>
  To upgrade Hudson when a new release is available you would run
</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>sudo zypper update</screen>
<simpara>which will stop the running Hudson server, upgrade Hudson and restart
the server. Prior to upgrading you might want to backup your Hudson
data configuration located in <literal>/var/lib/hudson</literal> and owned by the
hudson user.  created.</simpara>
<simpara>The install configured Hudson as a service so that you can stop and
start the service with</simpara>
<screen>sudo /etc/init.d/hudson stop
sudo /etc/init.d/hudson start</screen>
<simpara>Following the Linux standard base convention Hudson will create its
log files into <literal>/var/log/hudson/hudson.log</literal> and the log files will be
rotated so you will no accumulate large log files using up disk space.</simpara>
<simpara>Looking at the list of files installed by the package</simpara>
<screen>$ rpm -ql hudson
/etc/init.d/hudson
/etc/logrotate.d/hudson
/etc/sysconfig/hudson
/etc/zypp/repos.d/hudson.repo
/usr/lib/hudson
/usr/lib/hudson/hudson.war
/usr/sbin/rchudson
/var/lib/hudson
/var/log/hudson</screen>
<simpara>reveals that a configuration file <literal>/etc/sysconfig/hudson</literal> was
created. It contains a number of configuration parameters that you
might want to adapt to your needs. These include e.g. the
<literal>HUDSON_JAVA_OPTIONS</literal> that can be used to increase the memory
allocation for Hudson or the <literal>HUDSON_PORT</literal> parameter set to the common
8080. If you modify this file to suit your needs, you should add it to
you backup strategy.</simpara>
<simpara>As part of the install a hudson user was created . This user will run
the Hudson server. The Hudson home folder is configured to be located
in <literal>/var/lib/hudson</literal>, which will contain configuration, workspaces and
so on and should be added to your backup strategy.</simpara>
</section>
<section id="ci-quickstart-sect-upgrading">
<title>Upgrading Hudson</title>
<simpara>Since Hudson separates it&#8217;s configuration and data storage from the
application, it is easy to upgrade an existing Hudson
installation. After a full backup of all configuration and data, you
should be ready to proceed after notifying your users about potential
downtime. You might also want to disable all jobs before proceeding.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
For native package users this will be handled transparently with
their package management system. For WAR file based installs, you only
have to remove the old version WAR and replace it with the new version
in your application server.
</simpara>
</listitem>
</orderedlist>
</section>
<section id="ci-quickstart-sect-behind-proxy">
<title>Running Hudson Behind a Proxy</title>
<simpara>If you installed Hudson as a stand-alone application, Hudson is
running on a high-performance servlet. From a performance perspective,
there is no reason for you not to run Hudson by itself without a
proxy. Yet, more often than not, organizations run applications behind
a proxy for security concerns and to consolidate applications using
tools like <literal>mod_rewrite</literal> and <literal>mod_proxy</literal>. For this reason, we&#8217;ve
included some brief instructions for configuring Apache httpd. We
assume that you&#8217;ve already installed Apache 2, and that you are using
a Virtual Host for www.somecompany.com.</simpara>
<simpara>Let&#8217;s assume that you wanted to host Hudson behind Apache HTTPd at the
URL <ulink url="http://www.somecompany.com">http://www.somecompany.com</ulink>. To do
this, you&#8217;ll need to change the context path that Hudson is served
from.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Need to explain how to run Hudson in the root context here
</simpara>
</listitem>
<listitem>
<simpara>
Restart Hudson and verify that it is available on
  <ulink url="http://localhost:8080/">http://localhost:8080/</ulink>.
</simpara>
</listitem>
<listitem>
<simpara>
Clear the Base URL in Hudson Application Server Settings in the administration interface.
</simpara>
</listitem>
</orderedlist>
<simpara>At this point, edit the HTTPd configuration file for the
www.somecompany.com virtual host. Include the following to expose
Hudson via <literal>mod_proxy</literal> at
<ulink url="http://www.somecompany.com/">http://www.somecompany.com/</ulink>.</simpara>
<screen>ProxyRequests Off
ProxyPreserveHost On

&lt;VirtualHost *:80&gt;
  ServerName www.somecompany.com
  ServerAdmin admin@somecompany.com
  ProxyPass / http://localhost:8080/
  ProxyPassReverse / http://localhost:8080/
  ErrorLog logs/somecompany/hudson/error.log
  CustomLog logs/somecompany/hudson/access.log common
&lt;/VirtualHost&gt;</screen>
<simpara>If you just wanted to continue to serve Hudson at the
<emphasis>/hudson</emphasis> context path, you would include the
context path in your <literal>ProxyPass</literal> and <literal>ProxyPassReverse</literal> directives as
follows:</simpara>
<screen>ProxyPass /matrix/ http://localhost:8082/matrix/
ProxyPassReverse /matrix/ http://localhost:8082/matrix/</screen>
<simpara>Apache configuration is going to vary based on your own application&#8217;s
requirements and the way you intend to expose Hudson to the outside
world. If you need more details about Apache httpd and <literal>mod_proxy</literal>,
please see <ulink url="http://httpd.apache.org">http://httpd.apache.org</ulink>.</simpara>
</section>
</chapter>
<chapter id="chapter-configuration">
<title>Hudson Configuration</title>
<simpara>To configure Hudson, click on the Manage Hudson link in the left-hand
navigation menu, which will display the screen shown in <xref linkend="fig-config-manage-hudson"/>. This chapter will focus on the
Configure System section.</simpara>
<figure id="fig-config-manage-hudson"><title>Managing Hudson</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/manage-hudson.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/manage-hudson.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Depending on the plugins installed and activated on your Hudson
system, different sections will be available in the system
configuration section.  These will either be explained below or with a
plugin-specific section. For example the source code
management-related global configurations for the different SCM systems
is available in <xref linkend="chapter-source-control"/>.</simpara>
<section id="section-global-hudson-configuration">
<title>Global Hudson Configuration</title>
<simpara>The first section in the Configure System screen contains options that
allow you to configure global Hudson configuration attributes. This
section is shown in <xref linkend="fig-global-hudson-configuration"/>.</simpara>
<figure id="fig-global-hudson-configuration"><title>Configuring Global Hudson Configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/global-hudson-configuration.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/global-hudson-configuration.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Home Directory
</term>
<listitem>
<simpara>
  This parameter displays the absolute installation path of the
  currently running Hudson system. It is not a runtime configurable
  parameter. It is set by the server on startup. By default it will be
  the value of the HUDSON_HOME environment variable or the <literal>.hudson</literal>
  folder in the home directory of the operating system user running
  Hudson. The value is displayed here to allow the administrator to
  verify the correct setting.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
System Message
</term>
<listitem>
<simpara>
  This message is displayed by Hudson in the main screen above the
  list of projects. It can be used as a welcome message or to
  e.g. broadcast upcoming maintenance to users of the Hudson instance
  via the user interface. It supports plain text as well as HTML
  snippets for formatting and enriching the message with dynamic
  content.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
# of Executors
</term>
<listitem>
<simpara>
  This parameter controls the number of concurrent builds Hudson is
  configured to run. Optimal values in terms of performance will
  depend on the number of CPU&#8217;s, IO performance and other hardware
  characteristics of the server running Hudson as well as the type of
  builds configured to run. A good starting point for experimentation
  is the number of CPUs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Quiet period
</term>
<listitem>
<simpara>
  A Quiet Period as specified in this configuration causes Hudson to
  wait the specified number of seconds before a triggered build is
  started. If your Hudson project is constantly "flapping" (switching
  between failure and success frequently), you may want to set the
  Quiet period to achieve more build stability. Another scenario this
  can be helpful is when large commits to your source control system
  are typically carried out in multiple smaller commits within a short
  time frame, so that the committer has a chance to get everything in
  without a build kicking off straight after the first commit causing
  a build failure. Setting this number to a large amount can generally
  reduce the number of builds running for this project, which will
  reduce the overall load for your Hudson server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
SCM checkout retry count
</term>
<listitem>
<simpara>
  The SCM checkout retry count determines the number of attempts
  Hudson makes to check out any updates when polling the SCM system
  for changes and finds the system to be unavailable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Enable Security
</term>
<listitem>
<simpara>
  The Enable Security checkbox switches on the security system that
  will require username and password for any access to run builds or
  change configurations of Hudson and build projects. A large number
  of configuration options and security providers can be used and more
  information can be found in <xref linkend="chapter-security"/>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Prevent Cross Site Request Forgery exploits
</term>
<listitem>
<simpara>
  This feature will enable improved security against Cross Site
  Request Forgery exploits and is recommended to be turned on when
  your Hudson instance is available to the public internet. On the
  other hand it can be necessary to have this feature disabled, when
  your Hudson web interface is embedded in a dashboard type interface
  that also contains web content from other domains or even only
  internal server names or sub networks. In general it will not be
  necessary to enable this feature on an internal network, where only
  trusted parties have access to Hudson.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Help make Hudson better&#8230;
</term>
<listitem>
<simpara>
  By selecting this feature to be enabled you agree for anonymous
  usage statistics about your Hudson installation to be created and
  securely sent to the Hudson development team and made available to
  the user community. The data sent consists of
</simpara>
<itemizedlist>
<listitem>
<simpara>
the Hudson version you are using
</simpara>
</listitem>
<listitem>
<simpara>
operating system, JVM and number of executors for your master Hudson
   and any slaves being used
</simpara>
</listitem>
<listitem>
<simpara>
the name and version of all activated plugins
</simpara>
</listitem>
<listitem>
<simpara>
the number of each project type configured to run
</simpara>
</listitem>
<listitem>
<simpara>
HTTP information as provided by your Hudson
  instance
</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-configure-global-properties">
<title>Global Properties Configuration</title>
<simpara>The global properties configuration allows the definition of key-value
pairs that are exposed to all running builds as environment variables.
Simply select the check box Environment Variables and add the desired
name and value for the property in the interface displayed
in<xref linkend="fig-configure-global-properties"/>.</simpara>
<figure id="fig-configure-global-properties"><title>Configuring global properties</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/configure-global-properties.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/configure-global-properties.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Depending on the build system used they can be picked up with
variables are populated by Hudson automatically. These include
job-related ones like <literal>JOB_NAME</literal>, <literal>BUILD_TAG</literal> or+BUILD_NUMBER+, Hudson
node-related ones like <literal>NODE_NAME</literal> or more global ones like
<literal>JAVA_HOME</literal>. A comprehensive list is available at
env-vars.html[env-vars.html] on your Hudson server as linked from the
inline help for the properties configuration.</simpara>
</section>
<section id="section-configure-jdk">
<title>Configuring JDK Installations</title>
<simpara>Hudson can support one or more JDK installations used for running your
builds. Setting up multiple JDK installs allows the configuration of
different projects being built by different Java versions in separate
jobs. You can use this to ensure e.g. that builds as well as test
suites run fine on an older Java version to ensure
compatibility. Another application would be to run with JDK versions
supplied by different vendors.</simpara>
<simpara>The most common configuration of a JDK is to point to the already
installed instance as used for running Hudson itself. This can be
achieved simply by supplying a name like <literal>Open JDK 6</literal> in the Name
input field and the absolute path in the JAVA_HOME input field in the
screen as shown in <xref linkend="fig-using-jdk-config"/>.</simpara>
<figure id="fig-using-jdk-config"><title>Configuring JDK Installations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/configure-jdk.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/configure-jdk.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Furthermore it is possible to configure a JDK to be installed
automatically by specifying a name as before and then selecting the
Install Automatically check box. This exposes a drop-down labelled Add
installer which lets you choose from the options Install from Oracle,
Extract <emphasis role="strong">.zip/</emphasis>.tar.gz andRun Command as visible in <xref linkend="fig-using-jdk-config"/>.</simpara>
<simpara>All the automatic install configurations cause Hudson to wait for the
first build, which is configured to use a named instance of the JDK to
initiate the JDK installation.</simpara>
<simpara>The option Install from Oracle brings up a drop-down to choose the
version as well as a checkbox that needs to be clicked to the JavaSE
license agreement.</simpara>
<simpara>If you select to use Extract <emphasis role="strong">.zip/</emphasis>.tar.gz as shown in
<xref linkend="fig-extract-archive-installer"/> you will be able to configure a
Label, the Download URL for binary archive and the Subdirectory of
extracted archive.</simpara>
<figure id="fig-extract-archive-installer"><title>Extract <emphasis role="strong">zip/</emphasis>.tar.gz archive Installer Configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/extract-archive-installer.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/extract-archive-installer.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>If you specify a label, only Hudson nodes with the same label will use
this installer. By using different labels it is possible for example
to get the same tool installed on different nodes with different
operating systems from different automatic install setups. The
download url specifies the full url from which the JDK will be
downloaded. The actual download is run off the Hudson master, so that
any Hudson nodes that need the JDK installed do not need to have
access to the url location. After successful download the JDK will be
installed in the specified sub directory of the Hudson install
directory.</simpara>
<figure id="fig-run-command-installer"><title>Run Command Installer Configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/run-command-installer.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/run-command-installer.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The last automatic installation option is the Run a command option
displayed in<xref linkend="fig-run-command-installer"/>. The Label options works the
same as for the archive extraction based install. The Command input
allows you to specify the shell command to execute on the node for the
install. Typically this is some package management invocation. The
resulting tool directory has to be specified in the Tool Home input
box.</simpara>
<simpara>Once more than one JDK is configured in the global settings, each
project configuration has an additional drop-down, which allows the
selection of the JDK to be usd to build the project and is visible in
<xref linkend="fig-extract-archive-installer"/></simpara>
</section>
<section id="section-configure-ant">
<title>Configuring Ant Installations</title>
<simpara>In a similar fashion to the JDK install Apache Ant can be installed in
multiple versions to be available for your Hudson configured
builds. The default configuration is to supply a name like <literal>Apache Ant
1 .8.2</literal> for the Ant installation and a value in the ANT_HOME input
that is defined by the absolute path to the folder containing your
pre-existing local Apache Ant install e.g.  <literal>/opt/apache-ant-1.8.2</literal></simpara>
<simpara>Using a preinstalled Ant requires manual install or the use of your
operating system package management system, a provisioning system or
as part of a virtual machine image management. To avoid this need
Hudson can install a required Apache Ant version automatically when
needed.</simpara>
<simpara>The simplest way to achieve this is to select the Install
automatically checkbox and select Install from Apache and choose the
desired version from the drop-down.</simpara>
<simpara>Similar to the JDK installation from Oracle it is possible to use
Install from Apache to get Ant installed. The options to install from
an archive or by running a command are available as well and work in
the same way as for JDK installs. A use case for an install from a
file would be a custom Ant distribution with libraries for in-house
tasks and maybe Ant contrib included as documented in detail in
<xref linkend="chapter-ant"/></simpara>
</section>
<section id="section-configure-maven">
<title>Configuring Maven Installations</title>
<simpara>One of the main uses cases for Hudson is building projects with Apache
Maven. As explained in more detail in <xref linkend="chapter-maven"/> the preferred
way to build Maven projects is the Maven 3 integration. It comes with
a bundled Maven 3 install so you do not actually need to install Maven
3 at all to get started. However if you want, you can install
additional Maven 3 installs with the user interface displayed in
<xref linkend="fig-configure-maven-3-installation"/>.</simpara>
<figure id="fig-configure-maven-3-installation"><title>Configuring Maven 3 Installations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/configure-maven-3.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/configure-maven-3.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The legacy Maven project type and Maven plugin use a separate
installer as displayed in<xref linkend="fig-configure-maven-installation"/>. In
addition to the same features as the Maven 3 installer it can be
configured to download a Maven version from the Apache website when
required.</simpara>
<figure id="fig-configure-maven-installation"><title>Configuring Maven Installations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/configure-maven.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/configure-maven.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Both the Maven 3 and the Maven installation work in a similar way to
the JDK and Ant installation options:</simpara>
<variablelist>
<varlistentry>
<term>
Use an existing installation
</term>
<listitem>
<simpara>
  Specify a Name and add the path to your Maven install in the
  MAVEN_HOME input control.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Automatically install from Apache
</term>
<listitem>
<simpara>
  Select the Install automatically checkbox and Install from Apache in
  the drop-down and choose the Maven version, you wish to install.
  This option is only available for the Maven installation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Automatically install from an archive file
</term>
<listitem>
<simpara>
  Select the Install automatically checkbox and Extract <emphasis role="strong">zip/</emphasis>.tar.gz
  and configure the installation as documented in
  <xref linkend="section-configure-jdk"/>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Automatically install via a command
</term>
<listitem>
<simpara>
  Select the Install automatically checkbox and Run Command and
  configure the installation as documented
  in<xref linkend="section-configure-jdk"/>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In general we recommend that you run your build using the latest Maven
3.0 release. With multiple Maven installations configured a dropdown
in the project build step configuration will allow you to choose the
desired Maven version.  <xref linkend="chapter-maven"/> provides an in-depth
documentation for using Maven with Hudson.</simpara>
</section>
<section id="section-configure-maven-3-builder-defaults">
<title>Maven 3 Builder Defaults</title>
<simpara>The Maven 3 integration allows for a set of default values to be
defined that are used when a new build step for invoking Maven 3 is
added.  These values can be defined in the section Maven 3 Builder
Defaults in the global Hudson configuration here. The individual
fields and their purpose and usage are documented in
<xref linkend="section-maven-3-build-configuration"/>.</simpara>
</section>
<section id="section-configure-shell">
<title>Configuring the Shell Executable</title>
<simpara>Hudson allows for the ability to configure shell builds. If you have a
build that requires the execution of shell scripts Hudson will by
default execute+/bin/sh+. For more complex builds scripts running on
different *nix environments, this can cause problems.  <literal>/bin/sh</literal> often
symlinks to a concrete shell like bash, ash, zsh or ksh. This setup of
a specific shell will change from operating system to operating system
as well as from user to user. If your scripts depend on a specific
shell you should therefore specify your default shell in this input to
e.g.  <literal>/bin/bash</literal>. In a similar way you can add the path to a cygwin
install of e.g. bash on your Windows server to run unix scripts as
part of your build.</simpara>
<formalpara id="fig-using-shell-execute"><title>Configuring Shell Executable</title><para><inlinemediaobject>
  <imageobject>
  <imagedata fileref=":figs/web/ci-using-shell-execute.png" scale="75"/>
  </imageobject>
  <textobject><phrase>:figs/web/ci-using-shell-execute.png</phrase></textobject>
</inlinemediaobject>  &lt;/section&gt;</para></formalpara>
</section>
<section id="section-configure-email-notification">
<title>Configuring E-mail Notification</title>
<simpara>Notification of build results and email-based notification
specifically is a core feature of a continuous integration
server. This configuration section as displayed in
<xref linkend="fig-configure-email-notification"/> allows you to configure the
SMTP-related settings to connect to the server and send the emails.</simpara>
<tip><simpara>In general it can be advantageous to configure all email
recipients in Hudson as mailing list addresses. Combined with a
mailing list management system available to your potential recipients
e.g. development and QA team members, this setup allows users to join
any mailing list and therefore notifications for specific jobs without
any configuration changes on Hudson.</simpara></tip>
<figure id="fig-configure-email-notification"><title>Configuring Email Notification</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/configure-email-notification.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/configure-email-notification.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following options can be configured:</simpara>
<variablelist>
<varlistentry>
<term>
SMTP Server
</term>
<listitem>
<simpara>
  The SMTP server configuration is typically the IP number of the mail
  server or a fully qualified name including the domain e.g.
  <literal>smtp.example.com</literal> . If the mail server is reachable by host name or
  some alias e.g.  <literal>hermes</literal> from the Hudson server you can use it as
  the SMTP server configuration.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Default user e-mail suffix
</term>
<listitem>
<simpara>
  This suffix is appended to the Hudson user names used to log in to
  Hudson and the result can be used for e-mail notification. E.g.  if
  the Hudson instance runs for <literal>example.com</literal> you could supply the
  suffix of <literal>@example.com</literal>. A Hudson user with username <literal>jane.doe</literal>
  would then receive email notifications at the
  email+<ulink url="mailto:jane.doe@example.com">jane.doe@example.com</ulink>+.  This can be especially useful with
  security setups using an identity management system like LDAP for
  Hudson access as well as email address setup as documented in
  <xref linkend="chapter-security"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
System Admin E-Mail Address
</term>
<listitem>
<simpara>
  This is the email address used as the email sender in any E-mail
  notification sent by the server. When configuring this email you
  should either ensure that emails sent back as a reply are monitored
  by somebody or bounced by the server with some meaningful error
  message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Hudson URL
</term>
<listitem>
<simpara>
  The Hudson URL value will be used in the email notifications sent
  out to provide links to build results and so on. Provide a URL that
  will be valid for the audience of your notifications. If all
  recipients will be on an intranet or VPN you can use a non-public
  URL or IP number.
</simpara>
<literallayout class="monospaced">In addition to basic SMTP configuration parameters, you can click
the Advanced Options button for further configuration that allows
you to send email via servers that require authentication. Most SMTP
servers will require at least user name and password to be accessed.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use SMTP Authentication
</term>
<listitem>
<simpara>
  Clicking on the checkbox will reveal User Name and Password input
  fields. Depending on the server configuration your user name will be
  just the login name or the full email address or either.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use SSL
</term>
<listitem>
<simpara>
  Select this checkbox if your SMTP server supports connecting with
  SSL activated.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
SMTP Port
</term>
<listitem>
<simpara>
  This configuration allows you to specify a custom port for the
  communication with mail server. If the field is left empty the
  default ports are used. These are 25 for SMTP and 465 for SSL
  secured SMTP. It is a common practice to configure a different port,
  so be sure to check with the administrator of the mail server what
  port you should be using.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Charset
</term>
<listitem>
<simpara>
  The Charset configuration determines the character set used for the
  composed e-mail message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Test configuration
</term>
<listitem>
<simpara>
  Pressing this button will execute the current configuration for
  sending emails. Depending on your configuration and network setup
  you should receive an email after a short while.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<section id="section-configure-email-gmail">
<title>E-mail Notification Via Gmail</title>
<simpara>In order to use GMail to send your emails you will need to configure
the SMTP server to <literal>smtp.gmail .com</literal>. In addition you will have to
have a Gmail account and provide the GMail e-mail address, or any
other email address configured to be accepted in your Gmail account,
as the User Name and configure the Password.</simpara>
<simpara>///  Does it support SSL? What port? See <ulink url="http://184.73.106.215:8080/">http://184.73.106.215:8080/</ulink></simpara>
</section>
</section>
<section id="_troubleshooting_e_mail_notification">
<title>Troubleshooting E-mail Notification</title>
<variablelist>
<varlistentry>
<term>
Spam filter related problems
</term>
<listitem>
<simpara>
  One of the common problems for build server notification emails not
  being received are spam filter setting on the server and/or client
  side of the recipient. Most spam filter systems will allow you to
  access a list of filtered message and configure a white list of
  senders. Adding the System Admin E-mail Address to the white list
  will ensure that your build notifications reach you.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-configure-maven-3-configuration">
<title>Managing Maven 3 Configuration</title>
<simpara>The Maven 3 integration of Hudson provides you with the ability to
manage custom Maven configuration files directly through the Hudson
user interface. You can manage:</simpara>
<itemizedlist>
<listitem>
<simpara>
Maven Settings Configuration
</simpara>
</listitem>
<listitem>
<simpara>
Maven Toolchains Configuration
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="_opening_the_maven_3_configuration_page">
<title>Opening the Maven 3 Configuration Page</title>
<simpara>To open the Maven 3 Configuration page, click on Manage Server in the
left-hand Hudson menu, and then select the Maven 3 Configuration item
shown in<xref linkend="fig-config-manage-hudson"/>.</simpara>
<simpara>Once you select the Maven 3 Configuration option, you will see the
page shown in<xref linkend="fig-manage-mvn-3-configurations"/>. If you have already
configured Maven Settings or Maven Toolchains configuration documents
they will appear in the list of documents shown on this page.  If you
have not configured any Maven configuration documents, you will see
the empty configuration screen shown
in<xref linkend="fig-manage-mvn-3-configurations"/>.</simpara>
<figure id="fig-manage-mvn-3-configurations"><title>The Maven 3 Configuration Page</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/manage-mvn-3-configurations.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/manage-mvn-3-configurations.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>To create a new Maven 3 Configuration document, click on the Add
button. This will create a new configuration document and display a
form that will allow you to name the document, describe the document,
select a document type, and supply configuration content for a
configuration document.</simpara>
<simpara>To remove an existing document, select the document from the list of
documents shown and click on the Remove button. This will load a
confirmation dialog. If the action is confirmed, the document will be
permanently removed from your Hudson instance.</simpara>
<simpara>Click the Refresh button in the interface to reload the Hudson
configuration and display any configuration documents which may have
been altered since you first loaded this page.</simpara>
</section>
<section id="_managing_maven_3_settings_configuration">
<title>Managing Maven 3 Settings Configuration</title>
<simpara>To create a new Maven 3 Setting configuration file which can be
referenced by a Hudson Maven 3 build step, click on the Add button as
shown in <xref linkend="fig-manage-mvn-3-configurations"/>.  Clicking on Add will
display a form containing the ID, Type, Name, Description, and
Attribute fields as shown in <xref linkend="fig-manage-mvn-3-settings"/>. Select
SETTINGS for the Type field.</simpara>
<figure id="fig-manage-mvn-3-settings"><title>Managing Maven 3 Settings in Hudson</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/manage-mvn-3-config-settings.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/manage-mvn-3-config-settings.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The sample Maven 3 Settings configuration shown in
<xref linkend="fig-manage-mvn-3-settings"/> define a General Maven 3 Settings file
which configures all Maven 3 builds to read artifacts from a corporate
Nexus repository. This sample XML was copied from
<ulink url="http://www.sonatype.com/books/nexus-book/reference/maven-sect-single-group.html">the
Maven 3 Settings example</ulink> in the Sonatype Nexus book and customized to
reference a hypothetical server running on <literal>nexus.sonatype.org:8081</literal>.</simpara>
<simpara>Usage of the Maven 3 Settings configuration file in a Hudson job is
documented in <xref linkend="section-maven-3-build-configuration"/>.</simpara>
<simpara>///     &lt;!-- TODO add more stuff about tool chains and link to
///
/// <ulink url="http://maven.apache.org/guides/mini/guide-using-toolchains.html">http://maven.apache.org/guides/mini/guide-using-toolchains.html</ulink>
///     potentially</simpara>
</section>
</chapter>
<chapter id="chapter-security">
<title>Securing Hudson</title>
<simpara>As an important part for a software development infrastructure Hudson
is often installed on local networks. No further security requirements
might be needed, when all users on the network are trusted. However
with distributed teams, cooperation between companies, external
contractors or just open source projects publicly available there are
plenty of use cases that require Hudson to be secured.</simpara>
<section id="_security_settings_overview">
<title>Security Settings Overview</title>
<simpara>Out of the box Hudson has no security enabled, but it can easily be
turned on by checking Enable security in the global configuration of
Hudson as displayed in <xref linkend="fig-global-hudson-configuration"/> and you
will be able to set up your desired security settings with the options
visible in <xref linkend="fig-security-overview"/> and documented in this chapter.</simpara>
<figure id="fig-security-overview"><title>Overview of the available security settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-overview.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-overview.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_miscellaneous_security_related_settings">
<title>Miscellaneous Security Related Settings</title>
<variablelist>
<varlistentry>
<term>
TCP port for JNLP slave agents
</term>
<listitem>
<simpara>
  The port configuration should be set to Disable for Hudson
  deployments without any slave nodes. With slave nodes you can set
  the port to the default Random port. Hudson will randomly choose a
  port avoid port collisions with other services. When running the
  Hudson cluster within a firewall secured environment between the
  nodes, you can choose a fixed port and then ensure that the port is
  open on the respective servers.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Markup Formatter
</term>
<listitem>
<simpara>
  Raw HTML is the default setting that causes Hudson to render any
  input data from text fields as HTML in the user interface. This
  allows for added links and more, but also has the potential for
  cross site scripting XSS attacks.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_access_control">
<title>Access Control</title>
<simpara>With security enabled, Hudson supports the following security realms
out of the box. Further options are available as plugins.</simpara>
<itemizedlist>
<listitem>
<simpara>
Delegate to servlet container
</simpara>
</listitem>
<listitem>
<simpara>
Unix user/group database
</simpara>
</listitem>
<listitem>
<simpara>
Hudson&#8217;s own user database
</simpara>
</listitem>
<listitem>
<simpara>
LDAP (Lightweight Directory Access Protocol
</simpara>
</listitem>
</itemizedlist>
<simpara>Authorization schemes available are</simpara>
<itemizedlist>
<listitem>
<simpara>
Logged-in users can do anything
</simpara>
</listitem>
<listitem>
<simpara>
Matrix-based security
</simpara>
</listitem>
<listitem>
<simpara>
Project-based Matrix Authorizations Strategy
</simpara>
</listitem>
<listitem>
<simpara>
Legacy mode
</simpara>
</listitem>
<listitem>
<simpara>
Anyone can do anything
</simpara>
</listitem>
</itemizedlist>
<simpara>which can be seen in <xref linkend="fig-security-overview"/> and are documented in
detail below.</simpara>
</section>
<section id="_configuring_security_realms">
<title>Configuring Security Realms</title>
<simpara>The configuration of the security realm allows you to define where
user names and passwords are stored and administrated.  Depending on
your deployment it can be useful to tie into already existing systems
or run a separate realm for Hudson.</simpara>
<section id="_delegating_to_a_servlet_container">
<title>Delegating to a Servlet Container</title>
<simpara>By default running from the war directly Hudson is running in the
winstone servlet container and there will be no security provided by
it. However for production usage the preferred deployment method is to
have Hudson running within a servlet container like Tomcat or Jetty or
an application server like Glassfish or JBoss AS as documented in
detail in <xref linkend="chapter-install"/>.</simpara>
<simpara>Depending on the servlet container you will have access to management
consoles that allow you to maintain and administrate users and groups,
which Hudson can then use for authorization.</simpara>
<simpara>This feature can be especially useful if other application are already
using the servlet container authorization and you want to achieve a
single-sign on for all applications running on this server or cluster
of servers or you simply prefer to manage your users from the
application server user interface.</simpara>
<simpara>When using this security realm, you will need to use matrix based
security as documented in <xref linkend="section-security-authorization-matrix"/> or
project-based matrix authorization strategy as documented in
<xref linkend="section-security-authorization-project"/> and set up the user/group
you want to allow in Hudson in the matrix with the desired access
rights.</simpara>
</section>
<section id="_relying_on_unix_users_and_groups">
<title>Relying on Unix Users and Groups</title>
<simpara>If you select this option, Hudson will consult the Unix user/group
database on the machine it is running on. To do so it will use the
Pluggable Authentication Modules (PAM) <ulink url="http://en.wikipedia.org/wiki/Pluggable_Authentication_Modules">http://en.wikipedia.org/wiki/Pluggable_Authentication_Modules</ulink>
library. The user running Hudson has to be able to access PAM and be a
member of the <literal>shadow</literal> group. As visible in <xref linkend="fig-security-unix"/> the
setup allows for the definition of a service name and test via
provided button.</simpara>
<figure id="fig-security-unix"><title>Overview of the available security settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-unix.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-unix.png</phrase></textobject>
</mediaobject>
</figure>
<tip><simpara>If you get a stack trace about not being able to find the file
libpam.so it might work to create the correct symlink like this</simpara></tip>
<screen>sudo ln -s /lib/x86_64-linux-gnu/libpam.so.0 /lib/x86_64-linux-gnu/libpam.so</screen>
<simpara>Commonly the users and groups are stored in <literal>/etc/passwd</literal>
and+/etc/group+, but depending on the Unix/Linux version and the
security setup the setup might vary a lot. With this setup user and
group administration is entirely separate from your Hudson
install. Use the your preferred administration tool on the command
line or a graphical user interface.</simpara>
<simpara>A consequence of using this security realm is that the Hudson instance
and access details are tied to the specific server Hudson is running
on. This means that the user and group setup as to be backed up in
addition to Hudson data itself and it can not be easily migrated
unless some sort of single sign on is used across all servers. However
on the other hand if this sort of infrastructure already exists users
can just reuse their current login details and have should have access
to change password and other facilities.</simpara>
</section>
<section id="_using_the_hudson_internal_user_database">
<title>Using the Hudson Internal User Database</title>
<simpara>A convenient method to control access to Hudson without external
dependencies is to use the internal user database of Hudson itself. To
activate this feature select Hudson&#8217;s own user database as displayed
in <xref linkend="fig-security-hudson-db"/></simpara>
<figure id="fig-security-hudson-db"><title>Overview of the available security settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-hudson-db.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-hudson-db.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The option Allow user to sign up activates the Sign Up screen as
displayed in <xref linkend="fig-security-signup"/>, which also displays a captcha
that is displayed when the option Enable captcha on sign up is
activated.</simpara>
<figure id="fig-security-signup"><title>Sign up screen for new users</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-signup.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-signup.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>By providing all details in the sign up form a user can create an
account to access Hudson. Once a user is signed up and logged in he
can use then click on his user name in the top left corner and then on
the Configure option in the left hand menu to access the user
configuration screen, which allows password resets among other tasks.</simpara>
<figure id="fig-security-user-configure"><title>User configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-user-configure.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-user-configure.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_light_weight_directory_authentication_protocol_ldap">
<title>Light-weight Directory Authentication Protocol (LDAP)</title>
<simpara>If you have an LDAP server, Hudson can be configured to use this
server to authenticate users. The administration interface in
<xref linkend="fig-security-ldap"/> allows you to provide all the necessary details
for Hudson to connect to your LDAP server.</simpara>
<figure id="fig-security-ldap"><title>Overview of the available security settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-ldap.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-ldap.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Server
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
root DN
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
User search base
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
User search filter
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Group search base
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Manager DN
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Manager Password
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If login attempts result in "OperationNotSupportedException - Function
Not Implemented", "Administrative Limit Exceeded" or similar error,
the LDAP query to determine the group membership for the user may be
triggering this. First try setting the "Group search base" setting as
specific as possible for your LDAP structure, to reduce the scope of
the query. If the error persists, you may need to edit the
WEB-INF/security/LDAPBindSecurityRealm.groovy file that is included in
in your LDAP for group membership, such as groupSearchFilter =</simpara>
<simpara>Groups Prefix LDAP groups with ROLE_ and convert them to uppercase
when assigning privileges to LDAP groups. For example, the LDAP group
Developers (cn=Developers) would be used as ROLE_DEVELOPERS in Hudson
Group names with non-alpha characters such as hyphen (-), space and
comma do not seem to work.  Hudson does not support indirect group
memberships, i.e. if a user is a member of a group A which is itself a
member of group B, the user would not get the privileges
(e.g. "Adminster Hudson") defined for B - only those defined for A.</simpara>
<simpara>One has to add groups prefixing with "ROLE_" (without quotes). I&#8217;m using OpenLDAP as its backend.-&#8594;</simpara>
</section>
<section id="_configuring_an_authorization_strategy">
<title>Configuring an Authorization Strategy</title>
<simpara>Once you decided upon the security realm you basically know how users
and groups will be created and what has to be done for a user to be
able to log in to Hudson. As a next step you need to decide on the
authorization strategy, which determines what user can do once they
are logged in.</simpara>
</section>
<section id="_logged_in_users_can_do_anything">
<title>Logged-in users can do anything</title>
<simpara>This authorization strategy grants read access to Hudson anybody, but
reserves any modifications for users with a valid account. Once the
user is logged-in however they have full access rights to everything
including project deletion and other critical functionality. You
therefore should be certain to have a good backup strategy in place
for critical data and that your users are capable of using Hudson in
an administrative function.</simpara>
</section>
<section id="section-security-authorization-matrix">
<title>Matrix-based security</title>
<simpara>For more fine grained control over what specific users or groups of
users can do you can configure Hudson to use Matrix-based security as
visible in a minimal configuration in
<xref linkend="fig-security-authorization-matrix"/>.</simpara>
<figure id="fig-security-authorization-matrix"><title>Matrix based security</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-authorization-matrix.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-authorization-matrix.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Using the input field for User/group to add you can create new rows in
the security matrix. The matrix provides sections to configure access
rights for</simpara>
<itemizedlist>
<listitem>
<simpara>
Overall
</simpara>
</listitem>
<listitem>
<simpara>
Slave
</simpara>
</listitem>
<listitem>
<simpara>
Job
</simpara>
</listitem>
<listitem>
<simpara>
Run
</simpara>
</listitem>
<listitem>
<simpara>
View
</simpara>
</listitem>
<listitem>
<simpara>
SCM
</simpara>
</listitem>
</itemizedlist>
<simpara>A typical minimal configuration as shown would be to grant all rights
to an administrative user or group and only read access for Overall
and Jobs to anonymous users.</simpara>
<simpara>By adding further groups or individual users you can e.g. grant full
administrative access rights to other trusted users without sharing
the main admin account.</simpara>
<simpara>A safe administrative use would be to grant full rights to a group of
admin users without granting any Delete rights.</simpara>
</section>
<simpara>Taking the concept of matrix based authorization as described in
<xref linkend="section-security-authorization-matrix"/> a step further is
Project-based Matrix Authorization Strategy. The global configuration
possible as displayed in <xref linkend="fig-security-authorization-project"/> works
the same as matrix-based security.</simpara>
<figure id="fig-security-authorization-project"><title>Project-based Matrix Authorization Strategy</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-authorization-project.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-authorization-project.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>In addition you can enable project-based security in each project
configuration individually for each project. Enabling the option
Enable project-based security will display a matrix of access rights
as visible in <xref linkend="fig-security-authorization-project-specific"/>. It will
allow you to add users and groups just like for the global
configuration and assign rights as desired.</simpara>
<figure id="fig-security-authorization-project-specific"><title>Project specific authorization</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/security-authorization-project-specific.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/security-authorization-project-specific.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Using groups accessing a group of projects you could e.g.  enable
administrative rights for a limited number of projects to a specific
user or user group.</simpara>
<section id="_using_the_legacy_authorization_strategy">
<title>Using the Legacy Authorization Strategy</title>
</section>
<section id="_anyone_can_do_anything">
<title>Anyone can do anything</title>
<simpara>Setting your authorization strategy to the option Anyone can do
anything effectively turns off security. In a scenario where everybody
able to access Hudson e .g. in a trusted intranet this setting is
recommended as an alternative to completely disabled security. The
advantage for the users is that while they do not need to login to use
Hudson and everyone has access it is possible to login and customize
Hudson by creating custom views and take advantage of other
personalization.</simpara>
</section>
</section>
<section id="_hudson_security_best_practices_tips_and_tricks">
<title>Hudson Security Best Practices, Tips and Tricks</title>
<section id="_common_setup_internal_matrix_based_authorization">
<title>Common Setup - Internal matrix-based authorization</title>
<simpara>A common and useful setup is a combination of using Hudson&#8217;s internal
user database with matrix-based authorization. It allows for a secure
setup of a publicly available Hudson instance without the need for any
further security components beyond Hudson itself and can therefore be
managed via the Hudson user interface without any additional
requirements beyond browser access.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Enable security in the global Hudson configuration
</simpara>
</listitem>
<listitem>
<simpara>
Activate the security realm for Hudson&#8217;s own user database and allow
  users to sign up
</simpara>
</listitem>
<listitem>
<simpara>
Set the authorization to Anyone can do anything and save the
  configuration
</simpara>
</listitem>
<listitem>
<simpara>
Sign up a new user e.g. with the name <literal>admin</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Login in as the new user
</simpara>
</listitem>
<listitem>
<simpara>
Change the authorization to matrix-based security
</simpara>
</listitem>
<listitem>
<simpara>
Add the new user to the matrix
</simpara>
</listitem>
<listitem>
<simpara>
Grant all right to the new user as he will the be the adminstrator
  user
</simpara>
</listitem>
<listitem>
<simpara>
Save the configuration
</simpara>
</listitem>
</orderedlist>
<simpara>Following these steps you will have secured Hudson and the new user
will be the only user with access to Hudson. If you want e.g.
anonumous users to have read access you could add these rights in the
matrix.</simpara>
<simpara>For further users you can create additional matrix rows and distribute
rights as desired.</simpara>
</section>
</section>
<section id="_allowing_developers_to_do_forced_builds_with_security_on">
<title>Allowing Developers to do Forced Builds with Security On</title>
<simpara>is currently documented on the wiki nicely
<ulink url="http://wiki.hudson-ci.org/display/HUDSON/Quick+and+Simple+Security">http://wiki.hudson-ci.org/display/HUDSON/Quick+and+Simple+Security</ulink></simpara>
</section>
<section id="_authenticating_in_a_script">
<title>Authenticating in a script</title>
<simpara>is currently documented on the wiki and should be expanded on here
<ulink url="http://wiki.hudson-ci.org/display/HUDSON/Authenticating+scripted+clients">http://wiki.hudson-ci.org/display/HUDSON/Authenticating+scripted+clients</ulink></simpara>
</section>
<section id="_disabling_security_when_locked_out">
<title>Disabling security when locked out</title>
<simpara>When configuring security or when relying on external security realms,
you can end up in situations where you do not have any access to
Hudson in the user interface anymore. Reasons could be a forgotten
admin password, offline LDAP server, broken Unix authorization after
server upgrade and so on. To be able to fix up your setup you can edit
the file <emphasis>config.xml</emphasis> in your HUDSON_HOME and set</simpara>
<screen>&lt;useSecurity&gt;false&lt;/useSecurity&gt;</screen>
<simpara>With this setting you will have full access to Hudson and be able to
troubleshoot your configuration or change to a new security realm
and/or authorization.</simpara>
</section>
</chapter>
<chapter id="chapter-plugin-management">
<title>Managing Hudson Plugins&lt;/title&gt;</title>
<simpara>Hudson plugin management is available via Manage Hudson and selecting
the Manage Plugins link shown in<xref linkend="fig-config-manage-hudson"/>. This
administration interface allows you see what plugin versions are
currently installed, update them and install new ones as well as
manage some advanced settings to work with the multitude of plugins
available for Hudson. Using plugins allows you to support many new
features beyond a basic Hudson install as well as tweak the user
interface and morph Hudson into the CI server you need.</simpara>
<section id="section-plugin-management-installed">
<title>Installed</title>
<simpara>To get a list of installed plugins, click in the Installed tab. This
will display a list all of the Hudson plugins currently installed on
your instance of Hudson system.</simpara>
<formalpara id="fig-using-installed-plugin"><title>The Installed tab for managing the installed plugins</title><para>image::figs/web/plugin-mgt-installed.png" scalefit="1[scale=75]</para></formalpara>
<simpara>The Enabled check box allows you to activate and deactivate specific
plugins. After plugin updates your old plugin version will remain to
be accessible and you can downgrade to the older version by pressing
the Downgrade to x.y.z button. The pinned column will then be marked
for this plugin so that automatic update will not occur until you
unpinned the version. Any changes will require you to restart Hudson
by clicking the Restart once no jobs are running button as displayed
in <xref linkend="fig-plugin-mgt-progress"/> to take affect.</simpara>
<figure id="fig-plugin-mgt-progress"><title>Install and update plugin progress screen ready to restart the server</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/plugin-mgt-progress.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/plugin-mgt-progress.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="section-plugin-management-available">
<title>Available</title>
<simpara>This list of available plugins includes hundreds of useful utilities,
tweaks and feature sets which extend the core feature set of
Hudson. The list is separated into topics and contains a short
description for each plugin as well as a link to the plugin web
site. In order to install a plugin simply select the check box in the
plugin row, press the Install button on the bottom of the list. This
will redirect to a progress reporting page. After a success message
you will have to restart Hudson by clicking the Restart once no jobs
are running button for the new plugin to be available.</simpara>
<formalpara id="fig-using-avail-plugin"><title>The Available tab for installing new plugins</title><para>image::figs/web/plugin-mgt-available.png" scalefit="1[scale=75]</para></formalpara>
</section>
<section id="section-plugin-management-updates">
<title>Updates</title>
<simpara>Hudson regularly checks an available list of Hudson plugins on the
Hudson web site and will notify if an updates become available. To see
if any updates are currently available click on the Updates tab in the
Manage Plugins screen. Plugin eligible for an update will be displayed
next to the available update version and the version which is
currently installed. To update a plugin select the check box in the
Install column and press the Install button on the bottom of the
list. This will redirect to a progress reporting page. After a success
message you will have to restart Hudson by clicking the Restart once
no jobs are running button for the new plugin to be available.</simpara>
<figure id="fig-using-updates-plugin"><title>The Updates tab displaying available updates of installed plugins</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/plugin-mgt-updates.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/plugin-mgt-updates.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="section-plugin-management-advanced">
<title>Advanced</title>
<simpara>The Advanced tab as displayed in <xref linkend="fig-plugin-mgt-advanced"/> allows
you to configure the proxy settings for Hudson to be able to connect
to the plugin repository on the Hudson web site, upload Hudson plugin
files (<literal>*.hpi</literal>) manually to install e.g. custom plugins and specify
the url for a custom update site.</simpara>
<figure id="fig-plugin-mgt-advanced"><title>The Advanced tab for miscellaneous plugin management tasks</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/plugin-mgt-advanced.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/plugin-mgt-advanced.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_http_proxy_configuration">
<title>HTTP Proxy Configuration</title>
<simpara>Hudson retrieves a list of plugins and downloads plugins over the
public internet. If your server is behind a proxy server, you will
need to configure the proxy settings. Supply the necessary values to
connect to your internal proxy in the Server and Port fields. The No
Proxy for field allows you to exclude host names from proxying by
adding them in a comma separated list.If your proxy server requires
authentication you will have to select the Proxy Needs Authorization
check box and provide the User name andPassword.</simpara>
</section>
<section id="_upload_plugin">
<title>Upload Plugin</title>
<simpara>Hudson plugins are distributed as <literal>.hpi</literal> files and the the Advanced
administration section allows you to upload them with a file
chooser. This feature is especially useful for installing custom, in
house developed plugins or commercially distributed plugins that are
not available on the update site. You can also use it to install
plugins you build from source during development or when helping by
contributing fixes to open source plugins.</simpara>
</section>
<section id="_update_site">
<title>Update Site</title>
<simpara>Instead of using the public update site on the Hudson web site you can
host your own plugin repository and you could then add the URL in the
available input field.</simpara>
</section>
</chapter>
<chapter id="chapter-build-creation">
<title>Creating Hudson Projects&lt;/title&gt;</title>
<section id="section-creating-new-project">
<title>Creating New Hudson Projects</title>
<simpara>To create a new Hudson project, click on New Job in the left
navigation menu, which will display the form shown in
<xref linkend="fig-using-new-project"/>.</simpara>
<figure id="fig-using-new-project"><title>Creating a New Job in Hudson</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/create-new-job.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/create-new-job.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The most common way to create a new job using Hudson is to select
Build a free-style software project. This will allow you to invoke a
number of external and internal executions. If you are creating a
project that is similar to an existing Hudson build, you may also
choose Copy an existing job and then type in the name of the Hudson
job in the Copy from text field. Once you have made your selection and
provided a name for the new job, click on OK to continue.</simpara>
<simpara>You can also configure Hudson to Monitor an external job like cron
jobs, which can then affect other jobs. The last job type supported by
Hudson is to Build a multi-configuration project, which can act like a
container for a variety of different job executions.</simpara>
<warning><simpara>Your Hudson installation may provide an option to Build a
Maven 2/3 project (Legacy). This feature has numerous issues with the
use of different Maven versions, especially Maven 3 versions and is
not supported in Hudson. We recommend not to use this job type.
Instead, we encourage you to use the native Maven support which is
available in a free-style software project.</simpara></warning>
<figure id="fig-using-new-project-result"><title>Result of New Project Creation</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/new-project-result.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/new-project-result.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Once your job has been created, you will see a screen similar to the
one shown in <xref linkend="fig-using-new-project-result"/>, depending on your job
type selection. You can now proceed to configure your project. If you
need to change any of these settings at a later stage, navigate to a
particular Hudson Project&#8217;s Summary page by clicking on the name of
the project on the main Hudson page. Once you are on a Hudson
Project&#8217;s Summary page, click on Configure in the left-hand navigation
to load the Project Configuration screen.</simpara>
</section>
<section id="section-common-job-configurations">
<title>Configuring Common Job Configuration Settings</title>
<simpara>Independent of the job type you selected you will be able to configure
a few common settings separated in the following sections:</simpara>
<variablelist>
<varlistentry>
<term>
General Project Settings
</term>
<listitem>
<simpara>
  configure name, description and other general parameters
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Advanced Project Options
</term>
<listitem>
<simpara>
 configure miscellaneous settings for advanced usage
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Source Code Management
</term>
<listitem>
<simpara>
  configure source code management-related parameters for various
  systems
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Build Triggers
</term>
<listitem>
<simpara>
  configure how builds are started
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Post-build Actions
</term>
<listitem>
<simpara>
  configure steps taken after a build completion
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Depending on the job type you chose additional sections will be
present that will be explained later. Lets start with the common
sections.</simpara>
<section id="section-configuring-general-project-settings">
<title>Configuring General Project Settings</title>
<simpara>The first section on the Project Screen is the general project
information, which is shown in &lt;xref linkend="fig-using-project-info"
xrefstyle="select:label" /&gt;.</simpara>
<figure id="fig-using-project-info"><title>Configuring Project Information</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ci-using-proj-info.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ci-using-proj-info.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The section shown in the previous figure contains the following
fields:</simpara>
<variablelist>
<varlistentry>
<term>
Project Name
</term>
<listitem>
<simpara>
  The Project Name should be a short descriptive name, that easily
  allows your Hudson users to see what this project is. Consider this
  to be the identifier that Hudson uses to keep track of everything
  associated to this project. We recommend that your project names
  consist of simple alphanumeric characters and dashes. While Hudson
  will save a Project name contains spaces, the file path of the
  workspace will also contain spaces. The presence of spaces in a
  project name can cause unforeseen issues with builds and may results
  in build failure. We suggest using e.g. underscores instead. The
  project name will be visible in the main Hudson page on the list of
  jobs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Description
</term>
<listitem>
<simpara>
  The Description should contain a paragraph that will inform Hudson
  users about the nature and purpose of a give Hudson project. Useful
  information for the users could for example be various source code
  management related parameters like branch or version or other
  parameters like target platform for the build artifacts. This will
  widely vary and depend on your job type. The description is visible
  on the main project-specific page.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Discard Old Builds
</term>
<listitem>
<simpara>
  If Discard Old Builds is not checked, Hudson will archive the
  results of all the builds it performs. Depending on build log and
  artifact size this can produce considerable amounts of storage space
  being used, which should in turn be monitored carefully.
</simpara>
<literallayout class="monospaced">If Discard Old Builds is checked, the project configuration screen
will display additional input fields that allow you to specify the
number of builds and the number of days to retain builds.</literallayout>
<literallayout class="monospaced">After pressing the Advanced button you can provide for separate
configuration for the number of days the build artifacts are
kept. Setting this value will cause older build artifacts to get
deleted, without the logs, reports etc. getting deleted.</literallayout>
<literallayout class="monospaced">An additional advanced configuration allows you to set maximum
number of builds to keep including its artifacts.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
This Build is Parameterized
</term>
<listitem>
<simpara>
  TBD
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Disable Build
</term>
<listitem>
<simpara>
  If Disable Build is selected, no new builds will be executed until
  the project is re-enabled. This means that any builds that might
  have been triggered by SCM activity or by a periodic schedule will
  not be executed. This feature is very useful if you need to fix an
  issue with a build or build specific related infrastructure like
  source code management system and you want to temporarily take a
  particular Hudson job offline without affecting the rest of your
  Hudson setup and jobs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Execute concurrent builds if necessary (beta)
</term>
<listitem>
<simpara>
  If this checkbox is selected, Hudson will be able to execute more
  than one build for this project at the same time. This can be useful
  if your project is parameterized, or if you have a longer build,
  which may need to run multiple concurrent builds in response to
  independent changes to SCM. In many cases this setting is
  particularly useful, when Hudson is set up as a build cluster.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
JDK
</term>
<listitem>
<simpara>
  This dropdown allows the selection of a specific Java Development
  Kit (JDK) for the project. It will only be available if multiple
  JDKs are configured in the global Hudson configuration as documented
  in <xref linkend="section-configure-jdk"/>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Restrict where this project can be run
</term>
<listitem>
<simpara>
  If Restrict where this project can be run is checked, Hudson will
  display options that will allow you to specify the nodes on which a
  project build can be executed.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<warning><simpara>If you are creating a continuous integration build that will
run frequently, don&#8217;t forget to check Discard Old Builds and configure
Hudson to free up drive space. If your project is built regularly due
to frequent changes in source control or small times between fixed
scheduled builds you can easily fill up even the largest hard drive
potentially resulting in your build server going offline.</simpara></warning>
</section>
<section id="section-configuring-advanced-project-options">
<title>Configuring Advanced Project Options</title>
<simpara>The next section after the general project configuration is the
Advanced Project Options section shown in <xref linkend="fig-using-adv-opt"/>.</simpara>
<figure id="fig-using-adv-opt"><title>Configuring Advanced Project Options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ci-using-adv-opt.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ci-using-adv-opt.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>It contains the following fields:</simpara>
<variablelist>
<varlistentry>
<term>
Quiet period
</term>
<listitem>
<simpara>
  The project-specific Quiet Period set in this section overrides the
  global configuration documented in
  <xref linkend="section-global-hudson-configuration"/> and has the same
  effect. This setting depends on your build trigger configuration as
  documented below.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Retry Count
</term>
<listitem>
<simpara>
  The project-specific Retry Count overrides the global SCM checkout
  retry count and has the same effect.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Block build when upstream/downstream project is building
</term>
<listitem>
<simpara>
  Hudson builds can be configured to have upstream as well downstream
  dependencies. Upstream dependencies are projects upon which this
  particular project&#8217;s build depends. Downstream dependencies are
  projects that depend on the current builds results. If Block build
  when upstream/downstream project is building is selected this
  project will not start a build, if an upstream/downstream project is
  in the middle of a build or in the build queue.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use custom workspace
</term>
<listitem>
<simpara>
  If this selection is checked, you can instruct Hudson to use a
  custom directory for this project&#8217;s workspace. If this option is not
  checked, Hudson will automatically assign a workspace location that
  is based on the project&#8217;s name. As such it can be used to have
  projects names with spaces or other characters potentially causing
  file system level issues while using a save name for the workspace
  folder name.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-configuring-source-code-management">
<title>Configuring Source Code Management</title>
<literallayout class="monospaced">Hudson is typically used in conjunction with the source of the
project available in a source code management system. Support for a
large variety of SCM's is one the strength's of Hudson. This section
allows for the configuration of the respective settings for your SCM
of choice. The available list of choices will contain all SCM
systems provided by Hudson and the installed plugins.
&lt;&lt;chapter-plugin-management&gt;&gt; explains how to get support for your
SCM installed, if it is not yet available. Once installed each SCM
configuration will have different parameters, which are documented
in &lt;&lt;chapter-source-control&gt;&gt;.</literallayout>
</section>
<section id="section-configuring-build-triggers">
<title>Configuring Build Triggers</title>
<literallayout class="monospaced">The next section to configure is Build Triggers. A Hudson job can be
configured to build in response to build activity on a Hudson
instance, in accordance with a regular schedule, or as a reaction to
activity in an SCM system. Build triggers are configured on a
Project's Configuration screen and the section is shown in
&lt;&lt;fig-using-build-triggers" xrefstyle="select:label&gt;&gt;.</literallayout>
<figure id="fig-using-build-triggers"><title>Configuring Build Triggers</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ci-using-build-triggers.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ci-using-build-triggers.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following types of build triggers can be configured:</simpara>
<variablelist>
<varlistentry>
<term>
Build after other projects are built
</term>
<listitem>
<simpara>
  If this option is selected, Hudson will present you with a text
  field that accepts the names of one or more projects. If this field
  is populated, Hudson will trigger this project&#8217;s build after a
  successful completion of one of the projects listed in this text
  field. The reverse behaviour of triggering a different project based
  on this project&#8217;s build completing can be configured in the
  Post-build Actions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Build when Maven dependencies have been updated
</term>
<listitem>
<simpara>
  Hudson projects can be configured to send out a notification to all
  projects that Maven dependencies have been updated as post build
  action (see <xref linkend="section-configuring-post-build-actions"/>). When you
  activate this build trigger a build of the project will be started
  once a such a notification is received.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Poll SCM
</term>
<listitem>
<simpara>
  Selecting Poll SCM will cause Hudson to periodically poll your
  source code management system for changes and trigger a build if
  changes have been found and successfully retrieved.
</simpara>
<literallayout class="monospaced">Selecting this option displays a text area, which accepts a standard
cron expression. This allows for arbitrary polling interval from
minutes to weekly and way beyond. It is important to consider the
impact of this polling frequency setting on your SCM infrastructure,
since it can cause significant load specifically when multiple
projects with small polling frequencies all access the same SCM
server.</literallayout>
<literallayout class="monospaced">This expression can also be useful to set up a schedule for a
project that only polls the SCM for changes e.g. outside office
hours and therefore only builds then. Similar setup ups can be used
to do a nightly or a weekly build type setup.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Build periodically
</term>
<listitem>
<simpara>
  The Build periodically setting will cause Hudson to start a build of
  the project in regular intervals. Changes will be retrieved from the
  configured SCM, but a build will be triggered even if no changes
  were found.  The interval configuration in the exposed text field
  accepts the same cron syntax as the Poll SCM configuration.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-configuring-post-build-actions">
<title>Configuring Post-build Actions</title>
<simpara>Post build actions are an important part of Hudson. They allow you to
trigger a number of events upon build completion. These include the
communication of the results of the build in various ways as well as
chain other builds to this build. As such these actions fulfill a
crucial role of a continuous integration server as communication tool.
Other important actions allow you to deal with the various artifacts
produced by the build in the form of test results, documentation as
well as actual executables or archives produced.</simpara>
<simpara>Beyond the core post-build actions documented in the following,
various plugins will make additional actions available. Source code
management-related plugin documentation can be found in
<xref linkend="chapter-source-control"/>. Other plugins are documented in
<xref linkend="chapter-plugins"/>. The minimum list of build actions available is
visible in <xref linkend="fig-post-build-actions"/> and documented in more detail
below.</simpara>
<figure id="fig-post-build-actions"><title>Configuring Project Post-build Options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Archive Maven 3 artifacts
</term>
<listitem>
<simpara>
  Activating this option and potentially the detail option Include
  generate POMs will trigger Hudson to archive the artifacts built by
  Maven 3 build steps during the project build and potentially the
  associated POM files. With the option Discard old artifacts set, old
  artifacts will be removed after each successful build. It is a Maven
  3 build step specific automation of the option to Archive artifacts
  without the need to specify the artifacts. The artifacts will be
  made available on the web interface like other archived
  artifacts. This option is especially useful in refactorings of the
  project and the resulting artifacts, since all artifacts are always
  archived and name or folder changes do not affect the
  archiving. Since there is no necessity to configure matching
  patterns, this option is more robust.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Record fingerprints of Maven artifacts
</term>
<listitem>
<simpara>
  This option activated will trigger the Maven 3 integration of Hudson
  to record fingerprints of the created Maven artifacts, which will
  allow Hudson to keep track of when these artifacts are produced and
  used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Publish Javadoc
</term>
<listitem>
<simpara>
  If your build produces Javadoc you can configure Hudson to make it
  available to users on the project page of Hudson:
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-javadoc"><title>Configuring the Javadoc post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-javadoc.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-javadoc.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-post-build-actions-javadoc-junit-project"><title>Project page providing access to Javadoc and latest test results</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-javadoc-junit-project.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-javadoc-junit-project.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>To configure this you have to select the checkbox and provide the
relative path to the Javadoc in the Javadoc directory input
field. Checking the Retain Javadoc for each successful build will keep
the generated Javadoc for all successful builds in the specified
folder for older builds instead of overwriting the documentation with
each build.</simpara>
<simpara>If a warning of No such directory is visible, it means that the
current project workspace does not contain the specified path. This is
not a problem as long as your build will create the folder. The
Console Output of a specific build contains logging information
started by Publishing Javadoc that can be used to debug any problems.</simpara>
<variablelist>
<varlistentry>
<term>
Aggregate downstream test results
</term>
<listitem>
<simpara>
  This feature allows you to pull the test results of this project and
  any downstream projects together. This is especially useful when
  long running test are set up as separate downstream projects. You
  can either let Hudson figure out all downstream projects
  automatically or supply a specific list of projects in the Jobs to
  aggregate input box.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-aggregate-test"><title>Configuring the test result aggregation post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-aggregate-test.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-aggregate-test.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Publish JUnit test result report
</term>
<listitem>
<simpara>
  Activating this feature allows Hudson to interpret the JUnit test
  report format, produced by your test runs in the project and produce
  historic test result trends, a web interface for viewing the reports
  accessible from the project page as visible in
  <xref linkend="fig-post-build-actions-javadoc-junit-project"/>. The location of
  the produced xml files has to be specified in the text input box,
  which allows the use of patterns to find files in multiple sub
  folders of the project.In addition it is possible to retain the
  build log output by checking the Retain long standard output/error.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-junit"><title>Configuring the JUnit test result report post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-junit.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-junit.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Archive the artifacts
</term>
<listitem>
<simpara>
  With this feature enabled Hudson will keep the specified artifacts
  and make them available on the web interface. Using a wildcard
  syntax in the Files to archive as well as the Excludes input boxes
  you can specify the artifacts that should be saved after each
  successful build.The artifacts of the last successful build are
  available on the project overview page as visible in
  <xref linkend="fig-post-build-actions-archive-artifacts-project"/>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-archive-artifacts"><title>Configuring the artifacts archival post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-archive-artifacts.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-archive-artifacts.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-post-build-actions-archive-artifacts-project"><title>A project overview page for the Hudson book project with the latest build artifact available for download</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-archive-artifacts-project.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-archive-artifacts-project.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>In addition <xref linkend="fig-post-build-actions-archive-artifacts-build"/> shows
how the artifacts produced by a specific build can be accessed on
build specific page.</simpara>
<figure id="fig-post-build-actions-archive-artifacts-build"><title>A build specific page for the Hudson book build with build artifact available for download</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-archive-artifacts-build.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-archive-artifacts-build.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>This feature is useful to make release artifacts like war, ear or zip
files available for retrieval by other users and for archival
purposes. Hudson can be used as the reference storage place for these
artifacts that are in turn used e.g. for QA and production deployments
or for distribution to customers.</simpara>
<simpara>If your artifacts are created by a Maven 3 based build using Maven 3
build steps, it might be a better option to activate the option
Archive Maven 3 artifacts for better archiving robustness as
documented above in the respective section.</simpara>
<variablelist>
<varlistentry>
<term>
Recording fingerprints of files to track usage
</term>
<listitem>
<simpara>
  The feature to Record fingerprints of files to track usage can help
  you track down, where files are used and produced. It will allow you
  to determine the build number that created an artifact by looking at
  the fingerprint, which is a unique identifier for the file that
  Hudson creates and keep track of.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-fingerprint"><title>Configuring the fingerprinting post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-fingerprint.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-fingerprint.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Build other projects
</term>
<listitem>
<simpara>
  Building other projects after completion of the current project
  build, is one of the key features that allows you to set up chains
  of project builds. They can then all be small in focus and build
  time. However in the bigger picture you are able to to run a build
  for very large and complex systems. The input box Projects to build
  accepts a comma-separated list of projects to build together with a
  checkbox that allows you to trigger the dependent builds even if the
  current project build failed.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-build-other"><title>Configuring downstream builds post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-build-other.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-build-other.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Some examples for the usage of this feature are a main project
triggering separate projects that invoke unit and/integration tests,
shared libraries invoking server as well as client side application
builds or build system plugin builds triggering all projects that use
the plugin.</simpara>
<variablelist>
<varlistentry>
<term>
E-mail Notification
</term>
<listitem>
<simpara>
  A very valuable post-build action for a continuous integration build
  is the sending of build notification emails.  Hudson can be
  configured to send out build failure notices to any email
  address. In most instances it will be best to send the notices to an
  email list allowing the potential recipients to opt-in and out as
  well as access archives. This email is one of the primary ways in
  which developers are notified of build failures.
</simpara>
<literallayout class="monospaced">To configure this feature, check the checkbox next to E-mail
Notification and then specify the recipients email addresses in
Recipients separated by whitespace. Selecting Send e-mail for every
unstable build will instruct Hudson to send an email for each build
even if a build experience consecutive failures. Selecting Send
separate e-mails to individuals who broke the build will send email
to all SCM committers that affected a build that broke. The email
will be sent with the configuration specified in
&lt;&lt;section-configure-email-notification&gt;&gt;.</literallayout>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-post-build-actions-email"><title>Configuring the email notification post build action</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/post-build-actions-email.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/post-build-actions-email.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Notify that Maven dependencies have been updated
</term>
<listitem>
<simpara>
  When activating this option Hudson will notify all projects with a
  build trigger configured to watch for Maven dependencies that have
  been updated (see<xref linkend="section-configuring-build-triggers"/>). When the
  additional option Notify even when build is unstable is selected
  this notification will occur even when an unstable build ran. A
  sideeffect of this could be that only some Maven dependencies have
  been updated, which could lead to further failures of the dependent
  projects.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section id="section-configuring-free-style-project">
<title>Configuring Free-style Projects</title>
<simpara>In addition to the common project configurations we discussed prior, a
free-style Hudson project has a section for the build definition that
allows you to add individual build steps. Press the Add build step
button in the Build configuration section to set up one or multiple
steps that define your build.</simpara>
<variablelist>
<varlistentry>
<term>
Execute Windows batch command
</term>
<listitem>
<simpara>
  The Command input allows you to specify the the name of the batch
  file to execute. The script has to return an error level value of
  zero to be recognized as a build success by Hudson.  The script will
  be executed with the current workspace of the project as the
  directory. A number of environment variables about Hudson and the
  current project are passed to the execution of the script and can be
  used from within the script.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Execute shell
</term>
<listitem>
<simpara>
  Executing a shell script as a build step is configured just like a
  Windows batch command. The unix convention to use the first line
  with a #! and the path to an executable allows you to write shell
  scripts in many available shell and scripting languages.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Invoke Ant
</term>
<listitem>
<simpara>
  Invoking an Ant target can be added just like a shell script task,
  but with more configuration options. Find out more on how to
  configure Ant invocations in <xref linkend="section-ant-build-configuration"/>
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Invoke top-level Maven targets
</term>
<listitem>
<simpara>
  A Maven based build step can be configured as documented in
  <xref linkend="section-maven-build-configuration"/>
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-configuring-multi-config-project">
<title>Configuring Multi-Configuration Projects</title>
<simpara>TBD</simpara>
</section>
<section id="section-configuring-external-monitoring-project">
<title>Configuring External Monitoring Projects</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="chapter-maven">
<title>Working with Apache Maven Builds</title>
<simpara>Apache Maven is the most widely used build tool for Java-based
applications and beyond. It has excellent support in Hudson and is
employed by most Hudson users.</simpara>
<section id="section-installing-maven">
<title>Installing and Configuring Apache Maven</title>
<simpara>In order to use Apache Maven for your project build you will have to
configure one or more installs, as documented in
<xref linkend="section-configure-maven"/>. Among the many factors that influence
your choice of installation method you might want to consider the
following:</simpara>
<variablelist>
<varlistentry>
<term>
One or more Maven versions?
</term>
<listitem>
<simpara>
  Depending on the variety of projects you aim to be building on
  Hudson, you might need to have more Maven versions for building your
  projects available. This can be helpful to allow for a staged
  upgrade with one project at a time to minimize down times due to
  broken builds with newer versions as well.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Variety of operating systems in build cluster
</term>
<listitem>
<simpara>
  Your build cluster might be using different operating system
  versions, which can make some installation methods harder or
  impossible to use. Reasons for using different operating systems in
  a cluster can be the need to run tests on them, facilitating
  pre-existing e.g. desktop workstations at night, the need to build
  native packages on their own platform or simply the fact that a
  certain build can only be done on a specific operating system.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Control software via Hudson or something else?
</term>
<listitem>
<simpara>
  While Hudson has built in support to manage the JDK install as well
  as Apache Ant and Maven, your builds can require any number of
  further software to work. A high number of these additional software
  requirements can make it increasingly difficult to keep your build
  cluster setup working. Your company might already be using a
  provisioning software or virtual machine or operating system
  snapshots for similar purposes and it would then make sense to reuse
  the existing facilities and setup.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Available expertise
</term>
<listitem>
<simpara>
  Your team or yourself might have pre-existing expertise with native
  package management, provisioning software, virtual machine snapshots
  or Hudson itself that can be an influencing factor on how to set up
  your Maven installs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Control Maven installation
</term>
<listitem>
<simpara>
  Some installation methods like using a pre-existing Maven install
  from an operating system package rely on third parties to create
  these installations at first. While convenient this implies a loss
  of control that might not be desired and has to be weighed against
  the additional effort of different install methods.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>With assessing these influencing parameters you will be able to derive
a strategy for your Maven install(s), that will work across the
different machines in your build cluster and for all your
projects. This strategy can potentially involve different installation
methods. When using the recommended Maven 3 integration no Maven
install is necessary, since a Maven 3 install is embedded with the
plugin. Otherwise a minimal setup of one Maven install can be used to
set up your first project, that is built with Maven on Hudson.</simpara>
</section>
<section id="_selecting_components_of_your_maven_and_hudson_integration">
<title>Selecting Components of your Maven and Hudson Integration</title>
<simpara>The recommended way to configure a Maven build on Hudson is to create
a free-style software project as documented in
<xref linkend="chapter-build-creation"/> and then creating one or more build steps
that Invoke Maven 3. More details on the specific configuration
options and more can be found in
<xref linkend="section-maven-3-build-configuration"/>.</simpara>
<simpara>If you require Maven 2 for your build for some legacy reason, even
though Maven 3 is a higher performing, drop-in replacement you can
fall back to using the Invoke Maven 2 (Legacy) build step documented
in <xref linkend="section-maven-2-build-configuration"/>. Even though this option
exists, we recommend moving forward and migrating to Maven 3 and the
Maven 3 build step.</simpara>
<simpara>Finally your Hudson install may contain a separate project type
labeled Build a Maven 2/3 project (Legacy) available when creating a
new project. This feature has numerous issues with the use of
different Maven versions and use cases, especially Maven 3, and is not
supported in Hudson. We recommend not to use this job type.  If you do
not need this job type anymore after migrating to the Maven 3 build
step and want to avoid the accidental creation of projects with this
type, you should disable the <literal>Hudson Maven :: Plugin</literal>.  Read more
about managing your plugins in <xref linkend="chapter-plugin-management"/>.</simpara>
<simpara>Both the Maven 2/3 project type as well as the Maven 2 build step are
part of Hudson as legacy components and are not the focus of active
development and improvements. If your existing jobs use either of
these we recommend migrating to Maven 3 build step based free-style
projects.</simpara>
<simpara>In order to be able to keep existing legacy build around without
cluttering to user interface or have inexperienced users create builds
with the legacy systems, you can enable the blacklist plugin to
disable certain views within Hudson without completely disabling the
still required plugins.</simpara>
</section>
<section id="section-maven-example">
<title>A Simple Example for an Apache Maven built project</title>
<simpara>TBD</simpara>
</section>
<section id="section-maven-3-build-configuration">
<title>Details of Configuring Maven 3 Build Options</title>
<simpara>After configuring the general project options as documented in
<xref linkend="chapter-build-creation"/>, you can configure one or more build
steps. To add a build step, click on the Add build step button as
shown in <xref linkend="fig-using-new-build-config"/>. To configure a Maven build,
select Invoke Maven 3.</simpara>
<simpara>The basic and advanced options for configuring a Maven 3 build steps
are shown in <xref linkend="fig-maven-3-build-step-default"/> and
<xref linkend="fig-maven-3-build-step-advanced"/> . When adding a new Maven 3 build
step all parameters are prepopulated with the default parameters
defined for Maven 3 build steps. These are configured in the global
Hudson configuration documented in <xref linkend="chapter-configuration"/> in
<xref linkend="section-configure-maven-3-builder-defaults"/>.</simpara>
<figure id="fig-maven-3-build-step-default"><title>Configuring a Maven 3 Build Step - Default Options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/build-step-maven-3-default.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/build-step-maven-3-default.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-maven-3-build-step-advanced"><title>Configuring a Maven 3 Build Step - Advanced Options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/build-step-maven-3-advanced.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/build-step-maven-3-advanced.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Maven Version
</term>
<listitem>
<simpara>
  Your Hudson installation may have one or more Maven 3 installations
  configured as part of the global Hudson configuration.  This
  drop-down allows you to specify the version of Maven 3 to use with
  the current build step. By default the Maven 3 integration will use
  a bundled version of Maven 3, that is installed as part of the Maven
  3 integration itself.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Goals
</term>
<listitem>
<simpara>
  This field allows you to specify the goals and phases you would like
  to use for the Maven 3 invocation, separate by spaces and in order
  of desired invocation just like you would use Maven 3 on the
  command-line. Typically these would be+clean install+, but depending
  on your project and build step others may apply. The plugin with
  automatically show the Maven version and operate in batch mode
  equivalent to the <literal>-V</literal> and <literal>-B</literal> options. It is also to specify other
  specific Maven to command-line options like <literal>-P</literal> for profile
  selection, selection of a specific <literal>settings.xml</literal> file, <literal>-X</literal> for
  debuggin logging and so on. However this is not recommended since
  there are specific configuration settings for most parameters in the
  Advanced section. Specifying them in their separate option allows
  for programmatic changes across project defined in your Hudson
  instance and is easier scriptable in the Hudson console.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Properties
</term>
<listitem>
<simpara>
  You can pass one or more properties to the Maven process. This field
  accepts a list of properties with lines in a key=value format. These
  properties will be passed into the Maven build step invocation using
  the standard way of passing properties of -Dkey1=value1
  -Dkey2=value2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
POM File
</term>
<listitem>
<simpara>
  If your project uses the standard <literal>pom.xml</literal> filename, there is no
  need to specify a POM. If your project uses a POM with an
  alternative name or path other than directly in the project root,
  you can specify that file name and path here. This setting is
  equivalent to the command-line option -f pomfilepath or&#8212;file
  pomfilepath. The path specified has to be relative to the project
  root.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Private repository
</term>
<listitem>
<simpara>
  By default a Maven invocation will use a private repository in the
  project workspace in a <literal>.maven/repo</literal> folder. This ensures that other
  project builds do not have any side effects. However it can cause
  considerable usage of storage space, which consequently should be
  monitored carefully. If this option is disabled the standard Maven
  repository location in the current users home directory will be
  used. The user will the operating system user running Hudson and
  therefore invoking Maven 3 via the plugin.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Private temporary directory
</term>
<listitem>
<simpara>
  When this option is activated the java environment variable <literal>java.io
  .tmpdir</literal> will be set to a folder <literal>.maven/tmp</literal> in the
  project-specific workspace. This is useful when your build accesses
  the temporary directory for storage of artifacts or any temporary
  files e.g. used while running tests. When using the option with
  builds that produce large amounts of data in the temporary folder it
  is important to monitor the size of the folder and potentially add a
  clean up routine to the host operating system regular scheduled
  jobs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Offline
</term>
<listitem>
<simpara>
  Activating this option causes Maven to be run with the <literal>-o</literal> offline
  option enabled and it will therefore not access any remote
  repositories.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Profiles
</term>
<listitem>
<simpara>
  Adding a comma or space separated list of profile names causes the
  Maven 3 integration to pass them to the invocation with the <literal>-P</literal>
  parameter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Show Errors
</term>
<listitem>
<simpara>
  Enabling the Show Errors option is equivalent to use the <literal>-e</literal>
  command-line parameter, which will cause Maven to output any errors
  in the console.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Verbosity
</term>
<listitem>
<simpara>
  Configure the verbosity of the log output to the console by Maven to
  be at normal, quiet or debug levels. These levels are equivalent to
  no option and the <literal>-q</literal> and <literal>-X</literal> options for Maven command-line
  invocation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Checksum Mode
</term>
<listitem>
<simpara>
  Configure the strictness of the checksum validation when downloading
  artifacts from repositories to be at normal, lax or strict
  levels. These levels are equivalent to no option and the <literal>-c</literal> and
  <literal>-C</literal> options for Maven command-line invocation.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Snapshot Updates
</term>
<listitem>
<simpara>
  The Snapshot Updates option provides control over the way Maven
  treats <literal>SNAPSHOT</literal> artifacts. The NORMAL activates the standard Maven
  behaviour, where as FORCE and SUPPRESS will activate the <literal>-U</literal> and
  <literal>-nsu</literal> options.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Recursive
</term>
<listitem>
<simpara>
  Just like for normal Maven invocation this option is activated by
  default, which means that nested modules in a multi-module project
  will be build. Deactivating this feature is equivalent to the
  non-recursive command-line option <literal>-N</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Projects
</term>
<listitem>
<simpara>
  The Projects option allows you to specify the projects that should
  be added to the reactor during build. You can either specify them by
  the relative path in your project workspace or by <literal>artifactId</literal> and
  optionally <literal>groupId</literal> in a <literal>groupId:artifactId</literal> format. The
  equivalent command-line option is <literal>-pl</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Resume From
</term>
<listitem>
<simpara>
  The Resume From uses the same syntax as the Projects and sets the
  <literal>-rf</literal> command-line option to resume the build from the specified
  artifact.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Fail Mode
</term>
<listitem>
<simpara>
  The Fail Mode option supports the modes NORMAL, FAST, AT_END and
  NEVER that determine how your Maven build proceeds in case of any
  failures. The equivalent command-line options are no option, <literal>-ff</literal>,
  <literal>-fae</literal> and <literal>-fn</literal>. This can have considerable impact on the load on
  your Hudson server e.g. by not proceeding past failed tests but
  instead failing the build so that developer can fix it before a long
  running build needs to be kicked off again.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Make Mode
</term>
<listitem>
<simpara>
  The Make Mode option can be used to enable Make-like build behaviour
  of Maven. The options are the default behaviour equivalent to NONE
  and DEPENDENCIES, DEPENDENTS and BOTH respectively <literal>-am</literal>, <literal>-amd</literal> and
  <literal>-am -amd</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
Threading
</term>
<listitem>
<simpara>
  This input takes the value for the <literal>-T</literal> command-line option that
  enables the experimental support for parallel builds in Maven 3. A
  value of <literal>4</literal> enables four threads for the build. A value of <literal>2.5C</literal>
  would enable 2.5 threads per CPU core. When activating this feature,
  keep the experiemental nature of this feature as well as the not yet
  wide spread support for this feature in the various plugins.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
Settings
</term>
<listitem>
<simpara>
  This option corresponds to the <literal>-s</literal> command-line option for Maven 3
  and supplies a Maven 3 build step with a custom settings
  configuration file. The dropdown for this field is populated with
  the Maven 3 Settings files configured in the Hudson Maven 3
  Configuration page as shown in <xref linkend="fig-manage-mvn-3-settings"/>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
Global Settings
</term>
<listitem>
<simpara>
  This option corresponds to the <literal>-gs</literal> command-line option for Maven
  and isn&#8217;t used as frequently as the <literal>-s</literal> option. This option allows
  you to reference a custom global configuration file that is an
  alternative to the global settings file that ships with Apache
  Maven.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>
Tool Chains
</term>
<listitem>
<simpara>
  Tool chains for Maven 3 build steps can be configured globally for
  your Hudson install as documented in
  <xref linkend="section-configure-maven-3-configuration"/>. The drop allows you to
  select one of these configured tool chains for to be used for the
  build step. Tool chains are a very useful, but lesser known feature
  of Maven and more documentation can be found in the
  <ulink url="http://maven.apache.org/guides/mini/guide-using-toolchains.html">mini
  guide on the Apache website</ulink>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
JVM Options
</term>
<listitem>
<simpara>
  If your build requires specific JVM options, they can be set in this
  field. The options are passed straight through as MAVEN_OPTS and use
  the normal java command-line options syntax. A common configuration
  for complex builds is to specify a larger memory for the JVM running
  Maven via -Xmx1024m.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-maven-2-build-configuration">
<title>Details of Configuring Maven 2 (Legacy) Build Options</title>
<simpara>If for some reason you are still using Maven 2 and cannot upgrade to
Maven 3 and therefore take advantage of the advanced performance and
features of Maven 3 and the Maven 3 integration of Hudson offers you,
you should use the Maven 2 (Legacy) integration in a free-style
project build step. After configuring the general project options (see
<xref linkend="chapter-build-creation"/>), you can configure one or more build
steps. To add a build step, click on the Add build step button as
shown in <xref linkend="fig-build-step-maven-2-legacy-default"/>. To configure a
Maven build, selectInvoke Maven 2 (Legacy).</simpara>
<figure id="fig-build-step-maven-2-legacy-default"><title>Configuring Project Build Options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/build-step-maven-2-legacy-default.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/build-step-maven-2-legacy-default.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The basic and advanced options for invoking a Maven 2 (Legacy) target
are shown in <xref linkend="fig-build-step-maven-2-legacy-advanced"/>.</simpara>
<figure id="fig-build-step-maven-2-legacy-advanced"><title>Advanced Configuration of a Maven 2 (Legacy) Build Step</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/build-step-maven-2-legacy-advanced.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/build-step-maven-2-legacy-advanced.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Maven Version
</term>
<listitem>
<simpara>
  Your Hudson installation may have one or more Maven installations
  configured as part of the global Hudson configuration.  This
  drop-down allows you to specify the version of Maven for usage with
  the current build step.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Goals
</term>
<listitem>
<simpara>
  This field allows you to specify the command-line parameters used
  for the Maven invocation. These are phases, plugin goals as well as
  specific Maven command-line options like <literal>-P</literal> for profile selection,
  selection of a specific <literal>settings.xml</literal> file and so on.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
POM
</term>
<listitem>
<simpara>
  If your project uses the standard <literal>pom.xml</literal> filename, there is no
  need to specify a POM. If your project uses a POM with an
  alternative name or path other than directly in the project root,
  you can specify that file name and path here. This setting is
  equivalent to the command-line option -f pomfilepath or&#8212;file
  pomfilepath. The path specified has to be relative to the project
  root.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Properties
</term>
<listitem>
<simpara>
  You can pass one or more properties to the Maven process. This field
  accepts a list of properties with lines in a key=value format. These
  properties will be passed into the Maven build step invocation using
  the standard way of passing properties of -Dkey1=value1
  -Dkey2=value2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
JVM Options
</term>
<listitem>
<simpara>
  If your build requires specific JVM options, they can be set in this
  field. The options are passed straight through as MAVEN_OPTS and use
  the normal java command-line options syntax. A common configuration
  for complex builds is to specify a larger memory for the JVM running
  Maven via -Xmx1024m.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use private Maven repository
</term>
<listitem>
<simpara>
  By default a Maven invocation will use a local repository in the
  current users home directory taking any further repository
  configuration done in settings.xml into account. Depending on the
  necessary separation of the different jobs running on Hudson it can
  be useful to have a separate Maven repository for each
  project. Activating this feature will cause the creation of a
  separate Maven repository in a <literal>.repository</literal> folder in the projects
  workspace. This can cause considerable usage of storage space, which
  consequently should be monitored carefully.
</simpara>
<literallayout class="monospaced">The standard way of invoking a Maven build is to run the clean and
install lifecycle phases in a command-line call like mvn clean
install. This can be easily achieved by adding a Maven build step
and adding clean install as a Goals parameter. If so desired these
two lifecycle phases can also be invoked separately by creating two
Maven build steps with separate clean and install parameters. This
would cause two separate invocations of Maven in sequence equivalent
to mvn clean; mvn install Breaking up the invocations allows you to
add further build steps in between and build an arbitrarily complex
sequence of Maven and other invocations with completely separate
parameters and so on.</literallayout>
<literallayout class="monospaced">You could for example slip a plugin goal
invocation in between the clean and install invocations, that
prepares the execution environment for your build for example by
setting up a test environment like an emulator or a specific
database and content. Since you can do this in a separate build step
you can invoke a shell script or an Ant target for such tasks, in
case it is not automated via a Maven plugin or configuration.</literallayout>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-using-top-level-maven-two-times"><title>Configuring two build steps as top-level Maven invocations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/build-steps-maven-twice.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/build-steps-maven-twice.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="section-blacklist-maven-legacy">
<title>Using the blacklist plugin to improve Maven usage</title>
<simpara>Describe how the blacklist plugin can be used to have the legacy Maven
integrations installed without them appearing as choices in the
configurttion so that new builds do not accidently use it.</simpara>
</section>
<section id="section-maven-artifacts">
<title>Managing the Build Artifacts of a Maven Build</title>
<simpara>in hudson artifact, Nexus, Sonar, in hudson maven repo plugin.</simpara>
</section>
<section id="section-maven-multi-module">
<title>Complex Builds with Maven Multi-module Setup</title>
<simpara>TBD</simpara>
</section>
<section id="section-maven-hudson-dependencies">
<title>Complex Builds with Hudson Job Dependencies</title>
<simpara>TBD</simpara>
</section>
<section id="section-maven-release-build">
<title>Automating Release Builds</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="chapter-ant">
<title>Working with Apache Ant Builds&lt;/title&gt;</title>
<section id="section-installing-ant">
<title>Installing Apache Ant for Hudson</title>
<simpara>The general configuration for Apache Ant installs on Hudson is
available in <xref linkend="section-configure-ant"/>. You can read about influencing
factors for your Apache Maven install, that apply to your strategy for
installing Ant as well in <xref linkend="section-installing-maven"/>.</simpara>
<simpara>A common scenario for Apache Ant installs is the requirement of a
build to have access to Ant tasks as provided in Ant-Contrib (add URL
here?) like For or If or to have some required libraries like jsch
(add url?) for the scp available on the Ant classpath. Custom
developed Ant tasks can be needed in a similar fashion. A convenient
way to achieve this, is the creation of a custom archive containing
the Ant install as well as additional libraries necessary. This
archive can then be used with the Extract from*.zip/*.tar.gz option to
get a fully working Ant and dependencies installed on all build
cluster nodes.</simpara>
</section>
<section id="section-ant-build-configuration">
<title>Configuring Apache Ant Builds</title>
<simpara>After configuring the general project options as documented in
<xref linkend="chapter-build-creation"/>, you can configure one or more build
steps. To add a build step, click on the Add build step button and
select Invoke Ant.</simpara>
<simpara>The basic and advanced options for invoking Ant are shown in
<xref linkend="fig-configure-ant-build-step"/>.</simpara>
<figure id="fig-configure-ant-build-step"><title>Configuring an Ant Build Steps</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/configure-ant-build-step.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/configure-ant-build-step.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Ant Version
</term>
<listitem>
<simpara>
  Your Hudson installation may have one or more Ant installations
  configured as part of the global Hudson configuration. This
  drop-down allows you to specify the version of Ant for usage with
  the current build step.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Targets
</term>
<listitem>
<simpara>
  This field allows you to specify the command-line parameters used
  for the Ant invocation. These are all options and targets supported
  by the specified Ant and the current Build File. If nothing is
  specified in this field, the build step will invoke Ant without
  parameters. With a default target specified in the build file, this
  can be sufficient for a full build depending on your build file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Build File
</term>
<listitem>
<simpara>
  If your project uses the standard <literal>build.xml</literal> filename, there is no
  need to specify a Build File If your project uses a build file with
  an alternative name or path other than directly in the project root,
  you can specify that file name and path here. This setting is
  equivalent to the command line option -f buildfilepath. The path
  specified has to be relative to the project root.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Properties
</term>
<listitem>
<simpara>
  You can pass one or more properties to the Ant process. This field
  accepts a list of properties with lines in a key=value format. These
  properties will be passed into the Ant build step invocation using
  the standard way of passing properties of -Dkey1=value1
  -Dkey2=value2.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Java Options
</term>
<listitem>
<simpara>
  If your build requires specific Java options, they can be set in
  this field. The options are passed straight through as ANT_OPTS and
  use the normal java command-line options syntax. A common
  configuration for complex builds is to specify a larger memory for
  the JVM running Ant via -Xmx1024m.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-ant-example">
<title>Hudson Apache Ant Example</title>
<simpara>TBD</simpara>
</section>
<section id="section-ant-best-pratices">
<title>Apache Ant Build Best Practices</title>
<simpara>TBD</simpara>
</section>
<section id="section-ant-troubleshooting">
<title>Apache Ant Build Troubleshooting</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="chapter-source-control">
<title>Working with Source Control</title>
<simpara>One of the most important parts of the Hudson project configuration
are the settings that connect your Hudson project to source
control. Any software development project should be managed in a
&lt;ulink
url="http://en.wikipedia.org/wiki/Source_code_management"&gt;source
control management system&lt;/ulink&gt;, many of which are open source
software and have large user communities. Hudson has support for all
common SCM systems as well as many of the less popular ones. Most
likely you will find support for your SCM already installed or
available as a plugin for installation in the Source Code Management
section of available plugins in the plugin management as displayed
in<xref linkend="fig-scm-plugins"/>. Read more about available plugins and their
management in <xref linkend="section-plugin-management-available"/> in
<xref linkend="chapter-plugin-management"/>.</simpara>
<figure id="fig-scm-plugins"><title>The beginning of the list of Source Code Management plugins</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-plugins.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-plugins.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>By default Hudson has support for Git, Subversion and CVS
pre-installed.  This chapter will document usage of the respective
Hudson plugins as well as the plugin supporting the popular open
source SCM system Mercurial.</simpara>
<simpara>Each of these plugins can be configured in the global Hudson
configuration setting in its specific section added by the plugin.</simpara>
<simpara>After the global settings for the desired source management system are
configured, you can configure the project-specific settings. Simply
load the project&#8217;s configuration page and scroll down to the Source
Code Management section. In this section, you must then select one of
the radio buttons for the source code management system you are using
as visible in <xref linkend="fig-scm-selection"/></simpara>
<figure><title>Selecting an SCM in the project configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-selection.png" scale="75"/>
  </imageobject>
  <textobject><phrase>fig-scm-selection</phrase></textobject>
</mediaobject>
</figure>
<simpara>After this selection you will be able to configure the parameters
specific to the selected SCM and the current project.</simpara>
<section id="section-scm-svn">
<title>Configuring Subversion</title>
<simpara>The Subversion Plugin for Hudson and therefore support for the popular
<ulink url="http://subversion.tigris.org/">Subversion SCM system</ulink> is part of the
default install of Hudson. It is therefore not necessary to perform
any further plugin installation to use Subversion for your project.</simpara>
<section id="section-scm-svn-global">
<title>Global Subversion Configuration</title>
<simpara>In order to use Subversion successfully, you need to set up the global
configuration in the Hudson Server configuration screen displayed in
<xref linkend="fig-scm-svn-global-config"/>.</simpara>
<figure id="fig-scm-svn-global-config"><title>Global Subversion Configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-svn-global-config.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-svn-global-config.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following parameters need to be configured as desired:</simpara>
<variablelist>
<varlistentry>
<term>
Subversion Workspace Version
</term>
<listitem>
<simpara>
  Subversion uses different formats for storing data in a checked out
  location. Ideally you should have the same Subversion version
  installed on the SCM server as well as on the Hudson server and
  specify that version here. If your Hudson project tasks only require
  read access to the Subversion repository it is safe to use a higher
  version on the Hudson server and specify it here. However if you are
  automating a release process or any other tasks that will write to
  the Subversion repository e.g. by creating tags or branches or
  editing files and checking them in, you should make sure to use the
  same format on the Hudson server as on the Subversion server since
  mismatches can produce problems in the Subversion repository and
  potentially break expected behaviour. An important issue related to
  this setup is that you can not support different Subversion servers
  with different versions accessed from one Hudson instance. It is
  advisable to update the Subversion servers and Hudson installed
  clients before proceeding.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Subversion Revision Policy
</term>
<listitem>
<simpara>
  The default revision policy is <literal>Queue Time</literal>, which will cause a
  build to be run off the revision present in the repository when the
  job is added to the Hudson build queue. The <literal>Build Time</literal> policy one
  the other hand will use the revision in the repository found when
  the build actually starts . The <literal>Head revision</literal> policy will use the
  HEAD revision in the repository. Finally these settings are
  overridden if a revision is specified in the subversion url or as a
  revision parameter in a parameterized build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Exclusion revprop name
</term>
<listitem>
<simpara>
  This parameter can be used to cause the plugin to exclude revisions
  with the specified revision property from triggering new
  builds. This is useful for builds that cause a commit so that this
  commit done by Hudson will not in turn trigger the execution of
  another build. The commits carried out by Hudson as part of the
  build have to be configured to use the same property.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Validate repository URLs up to the first variable name
</term>
<listitem>
<simpara>
  With this setting activated subversion urls will only be validated
  up to the first variable. A variable in a url would be preceded by a
  <literal>$</literal> character.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-svn-project">
<title>Project-Specific Subversion Configuration</title>
<simpara>Selecting Subversion under the Source Code Management section will
display the configuration options shown
in<xref linkend="fig-scm-svn-project-config" xrefstyle="select:label"/>.  Clicking
on the Advanced button will reveal the advanced configuration
parameters shown in <xref linkend="fig-scm-svn-project-config-advanced"/>.</simpara>
<figure id="fig-scm-svn-project-config"><title>Configuring project-specific Subversion settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-svn-project-config.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-svn-project-config.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-scm-svn-project-config-advanced"><title>Configuring advanced project-specific Subversion settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-svn-project-config-advanced.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-svn-project-config-advanced.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following parameters can be configured:</simpara>
<variablelist>
<varlistentry>
<term>
Modules
</term>
<listitem>
<simpara>
  Hudson can check out one or more Subversion modules from a
  Subversion repository. To configure a repository location, supply a
  Subversion URL in the Repository URL text field. This field supports
  Subversion repository URLs including revisions specified with
  <literal>@number</literal> as well as subversion keywords for revisions and
  dates. The link Update credentials navigates you to the SVN
  authentication screen documented below.
</simpara>
<literallayout class="monospaced">If you are checking out more than one Subversion module, you can
also supply a Local module directory that Hudson will check out the
specified module to. If you leave the Local module directory blank,
Hudson will check out the specific module to the root of the
project's workspace.</literallayout>
<literallayout class="monospaced">The Repository depth option allows you to specify the depth for the
checkout of this module, with the default being+infinity+, which
means that all nested directories of the repository will be checked
out.  This is useful to limit the size and scope of your checkout.</literallayout>
<literallayout class="monospaced">You can add a new module with the Add more locations button and
remove it with the Delete button.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Check-out Strategy
</term>
<listitem>
<simpara>
  The Check-out Strategy option determines the subversion commands
  issues prior to starting a build.
</simpara>
<literallayout class="monospaced">The default value of Use 'svn update' as much as possible will cause
the least load on the Subversion server by only issuing an update
command on top of the existing checkout in the project workspace.</literallayout>
<literallayout class="monospaced">The option Use 'svn update' as much as possible, with 'svn revert'
before update will do minor cleanup of the workspace by reverting
any local modifications.</literallayout>
<literallayout class="monospaced">The option Emulate clean checkout by first deleting
unversioned/ignored files, then 'svn update' provides a good
compromise between performance and thoroughness, since it closely
resembles a clean checkout without the performance and load
implications for the Subversion server as well as Hudson.</literallayout>
<literallayout class="monospaced">Finally the option Always check out a fresh copy will delete the
workspace content and perform a fresh checkout for each
build. Choosing this option should be considered carefully since it
can put a significant load on the Subversion and Hudson servers.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Repository Browser
</term>
<listitem>
<simpara>
  Hudson supplies valuable information about a build and about the SCM
  activity and changes that contribute to a specific build.  When
  Hudson displays information about a Subversion commit or a file that
  has been modified, it can be configured to link to a Repository
  browser, which provides a rich web view of the source code
  repository. Hudson supports the repository browsers CollabNet,
  Sventon 2.x, ViewSVN, FishEye, WebSVN and Sventon 1.x as options in
  the the drop-down.  The (Auto) option will attempt to automatically
  detect the used browser.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>You can navigate to the Subversion Authentication screen by clicking
the Update credentials link, which will display as visible in
<xref linkend="fig-scm-svn-project-authentication"/>.</simpara>
<figure id="fig-scm-svn-project-authentication"><title>Configuring subversion authentication Subversion settings</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-svn-project-authentication.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-svn-project-authentication.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The subversion plugin can be configured to use authentication with:</simpara>
<variablelist>
<varlistentry>
<term>
User name/password authentication
</term>
<listitem>
<simpara>
  Provide the user name and password in the supplied input fields.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
SSH public key authentication (svn+ssh)
</term>
<listitem>
<simpara>
  The Private Key control allows you to upload a key file for which
  you can provide the User name in the respective input field. If you
  key is encrypted with a password you need to add it in the Pass
  phrase input.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
HTTPS client certificate
</term>
<listitem>
<simpara>
  For HTTPS based authentication you can upload a Public Key
  Cryptography 12 (PKCS12) file and provide a password in the provided
  controls.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>By default the above configuration will override any global
configuration. This behaviour can be deactivated by selecting no in
the Override global credentials option.</simpara>
<simpara>Beyond these basic configuration options the Subversion plugin
supports advanced options to provide more parameters to your
Subversion commands used for the build.</simpara>
<variablelist>
<varlistentry>
<term>
Excluded Regions, Included Regions
</term>
<listitem>
<simpara>
  These fields provide you with the option to either specifically
  include or exclude files and directories to determine if a build
  should be triggered. If Included Regions is set, Hudson will only
  trigger a build if a matching file has been altered. If Excluded
  Regions is set, Hudson will not trigger a build if a file matching
  an excluded pattern is matched. These options are useful if you are
  only interested in a subset of files and directories contained in a
  Subversion module to trigger a build on Hudson. An example would be
  if documentation files contained in the repository should not
  trigger a new build.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Both parameters support usage of regular expression patterns to
specify the desired files as well as multiple lines to configure
larger sets of files and directories to match.</simpara>
<variablelist>
<varlistentry>
<term>
Excluded Users
</term>
<listitem>
<simpara>
  If this field is populated and Hudson is configured to poll
  subversion as a build trigger, Hudson will not trigger builds for
  commits from the specified users. This can be used to avoid builds
  to be triggered by commits done by Hudson or other systems that
  commit changes that should not trigger a build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Excluded Commit Messages
</term>
<listitem>
<simpara>
  Similar to the option Exclude users this field contains a regular
  expression and will cause Hudson not to trigger a build for commits
  with a matching commit message.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Exclusion revprop name
</term>
<listitem>
<simpara>
  A Subversion revision can be associated with a property. If Hudson
  encounters a revision with the specified property, it will not
  trigger a build from an SCM commit, similar to the behaviour for the
  options Excluded Users or Excluded Commit Messages
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-svn-basic-config">
<title>Minimal Basic SVN Configuration</title>
<simpara>In order to build a project controlled in subversion you only need to
configure the repository url in the project configuration using an url
available for anonymous read access to the repository.</simpara>
</section>
<section id="section-scm-svn-advanced-config">
<title>Tips and Tricks for Advanced SVN Configurations</title>
</section>
<section id="_subversion_related_environment_variables">
<title>Subversion related environment variables</title>
<simpara>The subversion plugin exports the following environment variables for
your usage in build scripts and others:</simpara>
<variablelist>
<varlistentry>
<term>
SVN_REVISION
</term>
<listitem>
<simpara>
  The repository revision.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
SVN_URL
</term>
<listitem>
<simpara>
  The url used to access the repository.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If multiple modules are defined these environment variables get and
index appended in to their names and all revisions and urls of the
modules will be exported as <literal>SVN_REVISION_1</literal>, <literal>SVN_REVISION_2</literal>,
<literal>SVN_REVISION_n</literal> and <literal>SVN_URL_1</literal>, <literal>SVN_URL_2</literal>, <literal>SVN_URL_n</literal>.</simpara>
</section>
</section>
<section id="section-scm-git">
<title>Configuring Git</title>
<simpara><ulink url="http://git-scm.com/">Git</ulink> is the most successful, modern distributed
version control system and has gained wide acceptance in the open
source community and beyond. and repository hosting services available
from multiple suppliers for commercial and open source usage.</simpara>
<simpara>The Hudson Git Plugin and therefore support for Git is available in
default Hudson installs from version 2.1 onwards. If it is not
installed in your Hudson instance, simply find the plugin in the
Source Code Management section of the available plugins and install it
like any other plugins as documented in <xref linkend="chapter-plugin-management"/>.</simpara>
<section id="section-scm-git-global">
<title>Global Git Configuration</title>
<simpara>The global configuration for using Git is set up in the Git section of
the Hudson Server configuration screen as displayed in
<xref linkend="fig-scm-git-global-config"/>.</simpara>
<figure id="fig-scm-git-global-config"><title>Configuring Git Installations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-global-config.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-global-config.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Name
</term>
<listitem>
<simpara>
  A name for your Git installation can be specified to distinguish
  between multiple installs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Path to git executable
</term>
<listitem>
<simpara>
  If the git command is available on the operating system PATH or the
  PATH for the user running Hudson, you can simply specify
  <literal>git</literal>. Otherwise an absolute path can be used as well.
</simpara>
<literallayout class="monospaced">In addition to using an already installed git, the Git plugin
facilitates the tool installer from Hudson that allows Run Command
and Extract from *.zip/*.tar.gz based installs similar to the JDK
installs documented in details in &lt;&lt;section-configure-jdk&gt;&gt;. The Ant
and the Maven plugins installers described in
&lt;&lt;section-configure-ant&gt;&gt; and &lt;&lt;section-configure-maven&gt;&gt; use the
same installers and you can find more hints of its usage there.</literallayout>
<literallayout class="monospaced">A further global configuration for git can be done in the Git plugin
section displayed in&lt;&lt;fig-scm-git-global-user-config&gt;&gt;.  Specifying
Global Config user.name Value and Global Config user.email Value
values will cause the plugin to issue git config commands setting
these options for each project that is configured to use git. The
specific project configuration allows you to override these setting
for each project individually.</literallayout>
<literallayout class="monospaced"> [[fig-scm-git-global-user-config]]
.Configuring Git user name and email values
image::figs/web/scm-git-global-user-config.png[scale=75]</literallayout>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-git-project">
<title>Project-specific Git Configuration</title>
<simpara>Once you have configured Git in the global Hudson configuration you
 can configure project-specific Git settings. Selecting Git under the
 Source Code Management section of your project configuration will
 display the configuration options shown in
 <xref linkend="fig-scm-git-project-config"/>.</simpara>
<literallayout class="monospaced"> [[fig-scm-git-project-config]]
.Basic Git source control information
image::figs/web/scm-git-project-config.png[scale=75]</literallayout>
<simpara>The section shown in <xref linkend="fig-scm-git-project-config"/> contains the
following options for the basic configuration of git in your project
configuration:</simpara>
<variablelist>
<varlistentry>
<term>
Repositories
</term>
<listitem>
<simpara>
  Specifying one or more repositories to access for your project can
  be considered the main configuration of the git details for your
  project. The minimum configuration is to provide a valid value for
  URL of repository.  The typical protocols <literal>http://</literal>, <literal>ssh://</literal> and
  <literal>git://</literal> are all supported. Advanced configuration as displayed in
  <xref linkend="fig-scm-git-project-config-repository"/> allows you to provide a
  name of the repository as well as a refspec.  Providing multiple
  repositories only makes sense when they are clones or instances off
  the same repository, since they will be used for merging together
  the content prior to the build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Branches to build
</term>
<listitem>
<simpara>
  In this section you can specify one or more branches that should be
  built. The default of an empty branch specifier causes the git
  plugin to track all branches and build the latest changed branch.
</simpara>
<literallayout class="monospaced">A common configuration would be to specify the main branch in the
repository e.g. +master+.  This would ensure that the build is only
triggered for changes committed to master. If you want to have other
branches built as well it is advisable to create separate Hudson
projects for the different branches.</literallayout>
<literallayout class="monospaced">The advanced usage of this feature would be to specify multiple
branches. These branches would be used for a merge prior to a build
and could be configured to push the merge result back to the remote
repository after a successful build.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Repository browser
</term>
<listitem>
<simpara>
  The default Auto option will cause the plugin to attempt to detect a
  web-based user interface to access the git repository. Selecting one
  of the supported repository browsers gitweb, redmineweb and
  githubweb lets you provide a base url to the repository
  browser. With the browser url specified the changes view of each
  build will have added links to the repository.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-scm-git-project-config-repository"><title>Configuring repository specific Git configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-project-config-repository.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-project-config-repository.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>In many use cases you will be able to configure everything necessary
with regards to git using the basic configuration options documented
above. For more complex cases the plugin provides various advanced
parameters as displayed in <xref linkend="fig-scm-git-project-config-advanced"/>,
which become accessible by pressing the Advanced button and documented
below.ex</simpara>
<figure id="fig-scm-git-project-config-advanced"><title>Configuring advanced Git configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-project-config-advanced.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-project-config-advanced.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Excluded Regions
</term>
<listitem>
<simpara>
  This configuration allows you to specifically exclude files and
  directories to determine if a build should be triggered. If set,
  Hudson will not trigger a build if only files and directories
  matching the patterns have been changed. This option is useful if
  you are only interested in a subset of files and directories
  contained in a Git repository to trigger a build on Hudson. An
  example would be if documentation files contained in the repository
  should not trigger a new build.
</simpara>
<literallayout class="monospaced">The configuration supports usage of regular expression patterns to
specify the desired files as well as multiple lines to configure
larger sets of files and directories to match.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
Excluded Users
</term>
<listitem>
<simpara>
  If this field is populated and Hudson is configured to poll git as a
  build trigger, Hudson will not trigger builds for commits from the
  specified users. This can be used to avoid builds to be triggered by
  commits done by Hudson or other systems that commit changes that
  should not trigger a build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Checkout/merge to local branch (optional)
</term>
<listitem>
<simpara>
  Supplying a value here causes git to create a local branch to
  checkout to. All the branches specified in the configuration above
  would be merged into that local branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Local subdirectory for repo (optional)
</term>
<listitem>
<simpara>
  You can specify the name of the subdirectory to checkout a git
  project to. If you omit this subdirectory, the git repository will
  be checked out into the workspace directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Config user.name Value
</term>
<listitem>
<simpara>
  This option allows you to cause git to set the <literal>user.name</literal> property
  prior to checkout and build. It overrides the global git
  configuration of the same property
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Config user.email Value
</term>
<listitem>
<simpara>
  This option allows you to cause git to set the <literal>user.email</literal> property
  prior to checkout and build. It overrides the global git
  configuration of the same property
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Merge options
</term>
<listitem>
<simpara>
  When you activate the option Merge before build the configuration
  parameters displayed in <xref linkend="fig-scm-git-project-config-adv-merge"/>
  become accessible. This powerful option can be used to specify a
  repository to merge from in Name of repository . The content of the
  repository will be merged to the branch specified in Branch to merge
  to and if the operation succeeds the build will proceed. The merge
  can then be pushed back to the remote repository by configuring a
  Git publisher post build action as documented in
  <xref linkend="section-scm-git-project-publisher"/>
</simpara>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-scm-git-project-config-adv-merge"><title>Configuring Git merge options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-project-config-adv-merge.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-project-config-adv-merge.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Prune remote branches before build
</term>
<listitem>
<simpara>
  Selecting this option will cause the build to run the command git
  remote prune before each build . This is especially useful if remote
  branches are created and removed regularly allowing the local
  checkout in Hudson to stay in sync and only build the branches that
  alos exist remotely.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Skip internal tag
</term>
<listitem>
<simpara>
  Selecting this option will cause Hudson to omit the tagging of the
  local repository after each checkout, which performed by default.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Clean after checkout
</term>
<listitem>
<simpara>
  This option causes git to remove all untracked files after each
  checkout and prior to the build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Recursively update submodules
</term>
<listitem>
<simpara>
  With this option selected and a new enough Git version installed
  submodules will be updated as part of the update prior to building.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use commit author in changelog
</term>
<listitem>
<simpara>
  Selecting this option changes the display of the changelog to show
  the commits <literal>author</literal>, rather than the default <literal>committer</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Wipe out workspace before build
</term>
<listitem>
<simpara>
  This option will cause a complete wipe of the workspace prior to
  each build. Use caution when activating this option since it can
  have a significant impact on data transfer and time for the checkout
  and therefore build. For Maven projects it potentially wipes the
  local repository as well causing further increases in build
  time. The other options for keeping the workspace cleaned documented
  above are more advisable to be used in most cases.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Choosing strategy
</term>
<listitem>
<simpara>
  This drop down will have only a Default option available with a
  default Hudson install. It determines which revision of the
  specified repositories and branches to build. For one branch and one
  repository HEAD will be built.  For multiple branches and
  repositories a more refined strategy is used selecting revisions
   that have notG yet been built and are on the specified branches.
  Other plugins can implement a different choosing strategy e.g. the
  &lt;ulink url="http://wiki.hudson-ci
  .org/display/HUDSON/Gerrit+Plugin"&gt;Gerrit Plugin&lt;/ulink&gt; enables a
  Gerrit change set based strategy effectively allowing verified,
  pre-tested commits.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Git executable
</term>
<listitem>
<simpara>
  This drop-down allows you to select a specific git executable used
  for all operations on this project&#8217;s build.  Configuration of the
  executables is documented in <xref linkend="section-scm-git-global"/>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-git-project-publisher">
<title>Configuring the post-build action Git Publisher</title>
<simpara>The git plugin adds the post build action Git Publisher as displayed
in <xref linkend="fig-scm-git-project-pub"/> to the project-specific
configuration. It can be used to push merges done prior to the build
back out to a remote repository after a build.</simpara>
<figure id="fig-scm-git-project-pub"><title>Configuring Git merge options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-project-pub.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-project-pub.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Push Only If Build Succeeds
</term>
<listitem>
<simpara>
  Selecting this option will cause Hudson to skip publishing any
  changes via push if the build failed.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Merge Results
</term>
<listitem>
<simpara>
  With this option activated Hudson will push any merge results done
  prior to the build back to the remote origin.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Tags
</term>
<listitem>
<simpara>
  The Add Tag button allows you to configure one or more tags to push
  to and potentially create.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Branches
</term>
<listitem>
<simpara>
  The Add Branch button allows you to configure one or more branch and
  remote combinations to push to.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>When configuring the Git Publisher you can specify Tags in fields
displayed in <xref linkend="fig-scm-git-project-pub-tags"/>.</simpara>
<figure id="fig-scm-git-project-pub-tags"><title>Configuring Git merge options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-project-pub-tags.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-project-pub-tags.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Tag to push
</term>
<listitem>
<simpara>
  This input allows you to provide the name for the tag to use. It
  supports the expansion of environment variables as part of the tag
  e.g. Hudson-Build-123. Read <xref linkend="section-configure-global-properties"/>
  for more information about defining properties and available
  predefined ones.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Create new tag
</term>
<listitem>
<simpara>
  This checkbox determines if the tag to push to as provided above
 should be created as a new tag or be used as an existing tag.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Target remote name
</term>
<listitem>
<simpara>
  The name of the remote to push the tag to. The name needs to be
  configured as a repository in the SCM setion for this project.
</simpara>
<literallayout class="monospaced">Configuring branches to push to is done in the user interface
displayed in &lt;&lt;fig-scm-git-project-pub-branches&gt;&gt;.</literallayout>
</listitem>
</varlistentry>
</variablelist>
<figure id="fig-scm-git-project-pub-branches"><title>Configuring Git merge options</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-git-project-pub-branches.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-git-project-pub-branches.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Branch to push
</term>
<listitem>
<simpara>
  This parameter specifies the branch the changes get push to after
  the build completes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Target remote name
</term>
<listitem>
<simpara>
  The Target remote name specifies the remote repository to which a
  push will be done and needs to be one of the names configured as a
  repository in the SCM section
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-git-basic-config">
<title>Minimal Basic Git Configuration</title>
<simpara>In order to build a project controlled in git you need to have a git
installation configured in the global configuration.</simpara>
<simpara>In terms of project specific configuration you only need to specify
the public url of the repository. We recommend to specify the branch
to build as well since the default setup without a branch specified
will examine all branches in the repository and build the latest
changed branch. In a normal project this might adversely affect the
stability of the build and potentially cause a confusing history for
the project. We suggest to set up separate projects for each branch
you want to track and build on Hudson.</simpara>
</section>
<section id="section-scm-git-advanced-config">
<title>Tips and Tricks for Advanced Git Configurations</title>
<simpara>TBD</simpara>
</section>
<section id="_multiple_branches_and_automated_merging">
<title>Multiple branches and automated merging</title>
<simpara>The recommended basic usage with the git plugin is to configure the
project branch for the build e.g. <literal>master</literal>. However per default no
branch is configured. This causes all branches to be monitored for
changes and the branch with the last branch to be built.</simpara>
<simpara>Without further configuration this is not really that useful since it
will cause your project build history to be comprised of builds from
all the different branches individually in the order of changes
received and potentially even omit builds if changes hit multiple
branches between builds.</simpara>
<simpara>However together with configuring Merge Options it allows for a
automated merge from whichever branch to have the latest changes to
the target branch e .g. <literal>master</literal> and proceed with the build after the
merge.</simpara>
<simpara>Now you can activate the Git Publisher post-build action Push Only If
Build Succeeds and Merge Results to have the remote repository updated
with the successful merge results.</simpara>
<simpara>This approach can be configured with specific branches rather than the
default empty specification of branches to have better control of the
source branches to merge from. It can also be combined with multiple
repositories to pull changes in from.</simpara>
</section>
</section>
<section id="section-scm-hg">
<title>Configuring Mercurial</title>
<simpara><ulink url="http://mercurial.selenic.com/">Mercurial</ulink>, also known as hg, is a
successful, modern distributed version control system and has gained
wide acceptance in the open source community and beyond used for large
projects like OpenJDK and Netbeans and repository hosting services
available from multiple suppliers for commercial and open source
usage.</simpara>
<simpara>The Hudson Mercurial Plugin and therefore support for Mercurial needs
to be installed on your Hudson instance. Simply find the plugin in the
Source Code Management section of the available plugins and install it
like any other plugins as documented in <xref linkend="chapter-plugin-management"/>.</simpara>
<section id="section-scm-hg-global">
<title>Global Mercurial Configuration</title>
<simpara>To configure Mercurial, find the Mercurial section in the Hudson
Server configuration screen as displayed in
<xref linkend="fig-scm-hg-global-config"/>, press the Add and configure the
parameters for your Mercurial install. If Mercurial is already
installed on your Hudson server and the hg is available on the path,
you do not need to configure a Mercurial installation. The plugin will
pick up the installed version.</simpara>
<figure id="fig-scm-hg-global-config"><title>Configuring Mercurial Installations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-hg-global-config.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-hg-global-config.png</phrase></textobject>
</mediaobject>
</figure>
<variablelist>
<varlistentry>
<term>
Name
</term>
<listitem>
<simpara>
  The Name will be displayed in the drop down to select your Mercurial
  install in the project configuration. Use a name that includes the
  version to be able to identify the Mercurial install you desire to
  use in the project configuration, especially when using multiple
  installs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Installation directory
</term>
<listitem>
<simpara>
  Specify the absolute path to the Mercurial installation .
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Executable
</term>
<listitem>
<simpara>
  This is the path to the actual <literal>hg</literal> executable. The field is
  prefilled with <literal>INSTALLATION/bin/hg</literal>, which is the correct value if
  you use a manual install of hg.  If you are using binary package as
  provided by your operating system package management system the
  correct value is likely just <literal>hg</literal>, since the command would be on the
  <literal>PATH</literal>. Another common option is the absolute path of the executable
  e.g. <literal>/usr/bin/hg</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use Repository Caches
</term>
<listitem>
<simpara>
  Enabling this option triggers the Mercurial plugin to establish a
  repository cache on the Hudson master that will be used by the slave
  nodes as well. This considerably improves performance and reduces
  load on the Mercurial server.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Debug Flag
</term>
<listitem>
<simpara>
  As the name suggest activating this option, triggers debug output of
  any Mercurial command execution. This is especially useful for
  trouble shooting your configuration.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Download Forest extension
</term>
<listitem>
<simpara>
  Using one of the suggested values in the online help for this option
  you can get the forest extension to work with multiple repositories
  installed automatically. This is especially useful if you can not
  easily install the extension with the same mechanism you installed
  Mercurial itself e.g. if no native package for the extension is
  available.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In addition the Mercurial plugin facilitates the tool installer from
Hudson that allows Run Command and Extract from <emphasis role="strong">.zip/</emphasis>.tar.gz based
installs similar to the JDK installs documented in details in
<xref linkend="section-configure-jdk"/>. The Ant and the Maven plugins installers
described in <xref linkend="section-configure-ant"/> and <xref linkend="section-configure-maven"/>
use the same installers and you can find more hints of its usage
there.</simpara>
</section>
<section id="section-scm-hg-project">
<title>Project-specific Mercurial Configuration</title>
<simpara>Selecting Mercurial under the Source Code Management section will
display the configuration options shown
in<xref linkend="fig-scm-hg-project-config"/>.</simpara>
<figure id="fig-scm-hg-project-config"><title>Configuring Mercurial Source Control Information</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-hg-project-config.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-hg-project-config.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The section show in <xref linkend="fig-scm-hg-project-config" xrefstyle="select:label"/> contains the following options:</simpara>
<variablelist>
<varlistentry>
<term>
Mercurial Version
</term>
<listitem>
<simpara>
  This drop down lets you choose from the configured Mercurial
  installations. In most cases the Default will be fine.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Repository URL
</term>
<listitem>
<simpara>
  Specify the URL of the project to build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Branch
</term>
<listitem>
<simpara>
  By default a branch named <literal>default</literal> will be checked out for the
  project build. This input allows you to specify and therefore build
  any other branch.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Advanced - Modules
</term>
<listitem>
<simpara>
  The advanced setting Modules allows you to specify a folder and its
  contents, known as module, within the repository to be the exclusive
  source for changes triggering a build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Advanced - Clean Build
</term>
<listitem>
<simpara>
  Activating the Clean Build option causes Mercurial to remove any
  untracked files prior to the build.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Advanced - Subdirectory
</term>
<listitem>
<simpara>
  By default the repository is checked out into the
  workspace. Supplying a value in the Subdirectory option will cause
  the repository to be checked out into a subdirectory in the
  workspace.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Advanced - Forest Extension
</term>
<listitem>
<simpara>
  This experimental features triggers the activation of the Mercurial
  forest extension, which will treat the workspace as the root of a
  forest.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Repository Browser
</term>
<listitem>
<simpara>
  The default Auto option will cause the plugin to attempt to detect a
  web-based user interface to access the Mercurial
  repository. Selecting one of the supported repository browsers
  hgweb, bitbucket, googlecode, kilnhg and fisheye lets you provide a
  URL to the repository browser. With the URL specified the changes
  view of each build will have added links to the repository.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-hg-basic-config">
<title>Minimal Basic Mercurial Configuration</title>
<simpara>In order to build a project controlled in Mercurial you need to
install the Mercurial plugin and have a hg installation configured in
the global configuration.</simpara>
<simpara>In terms of project specific configuration you only need to specify
the public url of the repository.</simpara>
</section>
</section>
<section id="section-scm-cvs">
<title>Configuring CVS</title>
<simpara>The Hudson CVS Plugin and support for the <ulink url="http://cvs.nongnu.org/">CVS
system</ulink> is part of the default install of Hudson. It is therefore not
necessary to perform any further plugin installation to use CVS for
your project.</simpara>
<section id="section-scm-cvs-global">
<title>Global CVS Configuration</title>
<simpara>To configure CVS, find the CVS section in the Hudson Server
configuration screen as displayed in <xref linkend="fig-scm-cvs-global-config"/>,
press the Add and configure the parameters for your CVS install. If
CVS is already installed on your Hudson server and the cvs is
available on the path, you do not need to configure a CVS
installation. The plugin will pick up the installed version.</simpara>
<figure id="fig-scm-cvs-global-config"><title>Global CVS Configuration</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-cvs-global-config.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-cvs-global-config.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following parameters need to be configured as desired:</simpara>
<variablelist>
<varlistentry>
<term>
cvs executable
</term>
<listitem>
<simpara>
  If the cvs executable can not be found on the PATH, you can
  configure an absolute path to it in this input field.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara><title>cvspass file::</title><para>
<literallayout class="monospaced">Specify the path to the .cvspass file that contains the user
credentials.</literallayout>
</para></formalpara>
<variablelist>
<varlistentry>
<term>
Disable CVS compression
</term>
<listitem>
<simpara>
  Activate this option to disable CVS compression.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-cvs-projectf">
<title>Project-specific CVS Configuration</title>
<literallayout class="monospaced">Selecting CVS under the Source Code Management section will display
the configuration options shown in &lt;&lt;fig-scm-cvs-project-config&gt;&gt;.</literallayout>
<figure id="fig-scm-cvs-project-config"><title>Configuring CVS Source Control Information</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-cvs-project-config.png"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-cvs-project-config.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-scm-cvs-project-config-advanced"><title>Configuring CVS Source Control Information</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/scm-cvs-project-config-advanced.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/scm-cvs-project-config-advanced.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The section show in <xref linkend="fig-scm-cvs-project-config"/> and
<xref linkend="fig-scm-cvs-project-config-advanced"/> contain the following options:</simpara>
<variablelist>
<varlistentry>
<term>
CVSROOT
</term>
<listitem>
<simpara>
  This is the CVSROOT parameter for your source. You would enter in
  the same information here that you would use if you were checking
  out source code use the CVS client.  The format for the URL is ----
  <literal><anchor id=":protocol:][[user][:password" xreflabel="[:protocol:][[user][:password]"/>][@servername][:serverpath]</literal> ----
  with the parameters: &lt;variablelist&gt;
</simpara>
</listitem>
</varlistentry>
</variablelist>
<literallayout class="monospaced">The protocol defines the way the CVS client communicates to the
repository and the protocol name has to be enclosed in+:+. Supported
protocols are +:local:+ for local or net file system level
connection, +:pserver:+ as the standard unsecured protocol, +:ext:+,
+:ssh:+ and +:extssh:+ for secure shell based connections and
+:sspi:+ for Windows based access. Depending on your CVS client and
server installs other protocols are supported as well.</literallayout>
<literallayout class="monospaced">In general and specifically with Hudson due to its nature as an
additional user for CVS we recommend not to use the local protocol,
since it can cause problems if too many users will try to access it.</literallayout>
<literallayout class="monospaced">When using the pserver protocol on the public internet you have to
keep in mind that it is an insecure protocol and passwords and data
can be sniffed theoretically.  Replace it with using the ssh based
protocols, when security is required.</literallayout>
<variablelist>
<varlistentry>
<term>
user
</term>
<listitem>
<simpara>
  Supply the user name for the client-server protocol used.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<literallayout class="monospaced">Specify the password when using the +:pserver:+ or +:sspi:+
protocol.</literallayout>
<variablelist>
<varlistentry>
<term>
@servername
</term>
<listitem>
<simpara>
  The server name of the repository server as reachable via the
  network. It can be a fully qualified server and domain name, a
  server name only or an IP number. The character <literal>@</literal> is required at
  the beginning of the server name.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<literallayout class="monospaced">The path to the repository on the server prepended by +:+. The path
itself can be either unix style like +/opt/data/cvsrepo+ or Windows
style like +C:\cvs\repository+.</literallayout>
<literallayout class="monospaced">An example for a valid url is</literallayout>
<screen>:pserver:anonymous@tortoisecvs.cvs.sourceforge.net:/cvsroot/tortoisecvs</screen>
<literallayout class="monospaced">with a module defined.</literallayout>
<variablelist>
<varlistentry>
<term>
Module(s) and Branch
</term>
<listitem>
<simpara>
  Here you can provide specific modules and specific branches to be
  checked out by Hudson. Multiple module can be specified using a
  space separated list and with a parameterized build job parameters
  can be used to specify branch or module.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
CVS_RSH
</term>
<listitem>
<simpara>
  If you are using CVS over SSH, you can specify options and
  parameters in this variable.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Use update
</term>
<listitem>
<simpara>
  Hudson can be configured to do a full checkout on each build or to
  use cvs update. Selecting this option will tell Hudson to use update
  instead of performing a clean checkout. For most reasonably sized
  projects you should activate this option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Repository browser
</term>
<listitem>
<simpara>
  The default Auto option will cause the plugin to attempt to detect a
  web-based user interface to access the CVS repository. Selecting one
  of the supported repository browsers ViewCVS and FishEye lets you
  provide a URL to the repository browser.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Excluded Regions
</term>
<listitem>
<simpara>
  If the module you are checking out contains some files that you need
  to exclude from triggering a build when changed, you can exclude
  regions by populating this field with the respective patterns.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="section-scm-cvs-basic-config">
<title>Minimal Basic CVS Configuration</title>
<simpara>In order to build a project controlled in CVS you need to have CVS
available on the PATH on the Hudson server or have the path configured
in the global configuration. For the project specific settings
configure the repository url and a module.</simpara>
</section>
</section>
</chapter>
<chapter id="chapter-grid">
<title>Running a Hudson grid&lt;/title&gt;</title>
<section id="_motivation">
<title>Motivation</title>
<simpara>TBD</simpara>
</section>
<section id="_installing_a_hudson_slave">
<title>Installing a Hudson Slave</title>
<simpara>TBD</simpara>
</section>
<section id="_advanced_tips_and_tricks">
<title>Advanced Tips and Tricks</title>
<simpara>TBD</simpara>
</section>
<section id="_hudson_slave_xml">
<title>hudson-slave.xml</title>
<simpara>can be edited to modify various parameters like Java version used to
run Hudson slave and others.</simpara>
</section>
</chapter>
<chapter id="chapter-plugins">
<title>Notable Hudson Plugins&lt;/title&gt;</title>
<section id="_hudson_xyz_plugin">
<title>Hudson XYZ Plugin</title>
<simpara>TBD</simpara>
</section>
<section id="_overview_and_purpose">
<title>Overview and Purpose</title>
<simpara>TBD</simpara>
</section>
<section id="_features">
<title>Features</title>
<simpara>TBD</simpara>
</section>
</chapter>
<chapter id="chapter-ide-integration">
<title>IDE Integration&lt;/title&gt;</title>
<simpara>The default way of interacting with Hudson is the web-based user
interface. In addition Hudson ships with web service interfaces, that
enable integration with others tools such as integrated development
environments.</simpara>
<section id="_eclipse_integration">
<title>Eclipse Integration</title>
<simpara>Hudson offers an intuitive set of Eclipse plugins which allow for
greater control and interaction with your Hudson instance. This
section covers some of these plugins and gives you an overview of how
to access some of the features that allow you to have immediate
insight into continuous builds.</simpara>
</section>
<section id="_the_hudson_jobs_eclipse_view">
<title>The Hudson Jobs Eclipse View</title>
<simpara>To open up the Hudson Jobs view in Eclipse, go to Window &#8594; Show View
&#8594; Other&#8230; . Selecting this menu item will display the dialog shown
in <xref linkend="fig-eclipse-open-hudson-jobs"/>.</simpara>
<figure id="fig-eclipse-open-hudson-jobs"><title>Opening the Hudson Jobs View in Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-open-hudson-jobs.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-open-hudson-jobs.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Once you&#8217;ve select this Hudson Jobs view, you should see a list of
jobs as shown in<xref linkend="fig-eclipse-hudson-jobs"/>. This is a list which is
retrieved directly from Hudson using Hudson REST services.  To refresh
the list of jobs, click on the refresh icon shown in the following
figure.</simpara>
<figure id="fig-eclipse-hudson-jobs"><title>Hudson Jobs View in Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-hudson-jobs.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-hudson-jobs.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>If your Eclipse instance is not yet connected to a Hudson server,
click on the blue sphere icon to the left of the refresh icon in the
previous figure. This icon will load the Subscribe to Build Job
Notifications dialog. To connect Eclipse to a new Hudson instance,
enter the URL of the Hudson server along with your username and
password credentials.</simpara>
</section>
<section id="_view_hudson_projects_from_eclipse">
<title>View Hudson Projects from Eclipse</title>
<simpara>Once you&#8217;ve loaded a list of Hudson jobs in Eclipse, you can click on
one of these Build Jobs to view a detailed snapshot of the project
status and any associated builds.  <xref linkend="fig-eclipse-matrix-project"/>
shows the status of a build job from Sonatype&#8217;s own Hudson
instance. In tis dialog you can see that the job detail window
contains general information about the Job in Job Properties,
information about specific Job Builds in Build Properties and also
links to alternative configuration for Build Jobs. If you need to get
more information about the Job&#8217;s workspace in order to trouble shoot a
build, you can also click onView job workspace. Clicking on this link
will load the project&#8217;s workspace in a browser window as another
Eclipse tab.</simpara>
<figure id="fig-eclipse-matrix-project"><title>Viewing a Matrix Project from Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-matrix-project.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-matrix-project.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>There are two very useful ways in which you can view the results of a
build. They are viewing a build&#8217;s JUnit test results, viewing the SCM
changes associated with a specific build, and viewing a build&#8217;s
console output. Both of these views of a particular job are the main
ways in which you can understand and diagnose issues with continuous
integration builds.</simpara>
<simpara>To view a build job&#8217;s JUnit test results, load the job detail page and
click on the Test Results link shown
in<xref linkend="fig-eclipse-matrix-project"/>. Clicking on this link will load the
view shown in<xref linkend="fig-eclipse-junit-tests"/>. From this view you can
navigate through the JUnit test results for a specific build job. This
level of visibility into the continuous integration machine gives you
insight into code-level issues happening on a remote build machine
without requiring you to exit out of Eclipse and fire up a web
browser.</simpara>
<figure id="fig-eclipse-junit-tests"><title>Viewing JUnit Test Reports from Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-junit-tests.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-junit-tests.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>To view a specific build&#8217;s SCM changes. Load the project detail view
and click on the SCM Changes tab shown in
<xref linkend="fig-eclipse-matrix-project"/>. This particular view of a project
combines the changelog of every single build into an easily navigable
interface. From the view shown in <xref linkend="fig-eclipse-scm-changes"/> you can
see what code changes trigger individual builds and you can get a
sense for what activity and which committer are responsible for build
successes and failures.</simpara>
<figure id="fig-eclipse-scm-changes"><title>Viewing SCM Changes from Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-scm-changes.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-scm-changes.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Viewing a specific build&#8217;s console output is often the quickest way to
get to the bottom of a build failure. To open a build&#8217;s console
output, select the project from the Hudson jobs view, select an
individual project build, and then click on the "Console Output" link
shown in&lt;xref linkend="fig-eclipse-matrix-project"
xrefstyle="select:label"/&gt;. Clicking on this link will load the view
shown in&lt;xref linkend="fig-eclipse-console-output"
xrefstyle="select:label"/&gt;. This view gives you the raw console output
from a Hudson build.</simpara>
<figure id="fig-eclipse-console-output"><title>Viewing Hudson Console Output from Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-console-output.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-console-output.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-eclipse-job-parent"><title>Hudson Jobs View in Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-job-parent.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-job-parent.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="fig-eclipse-project-link"><title>Viewing a Hudson Project from Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-project-link.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-project-link.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_configuring_eclipse_hudson_notifications">
<title>Configuring Eclipse Hudson Notifications</title>
<simpara>Once you&#8217;ve connected Eclipse to Hudson, you can also configure the
tool to notify you of build failure events. <xref linkend="fig-eclipse-notify"/>
shows an Eclipse installation which has been configured to receive
notifications of specific build failures.  Eclipse will periodically
poll Hudson to check for build failures in specific projects.</simpara>
<figure id="fig-eclipse-notify"><title>Hudson Notifications in Eclipse</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="figs/web/ide-eclipse-notify.png" scale="75"/>
  </imageobject>
  <textobject><phrase>figs/web/ide-eclipse-notify.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</chapter>
<chapter id="chapter-nexus">
<title>Hudson and Nexus</title>
<simpara>TBD</simpara>
</chapter>
<chapter id="chapter-sonar">
<title>Hudson and Sonar</title>
<simpara>TBD</simpara>
</chapter>
<chapter id="chapter-polyglot">
<title>Polyglot Hudson</title>
<simpara>TBD</simpara>
</chapter>
<chapter id="chapter-plugin-writing">
<title>Writing a Hudson Plugin</title>
</chapter>
<chapter id="copyright-sect-creative-commons">
<title>Book License</title>
</chapter>
</book>
