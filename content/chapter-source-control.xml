<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-source-control">
  <title>Working with Source Control</title>

  <para>One of the most important parts of the Hudson project configuration are
    the settings that connect your Hudson project to source control. Any
    software development project should be managed in a
    <ulink url="http://en.wikipedia.org/wiki/Source_code_management">source
      control management system</ulink>, many of which are open source software
    and have large user communities. Hudson has support for all common SCM
    systems as well as many of the less popular ones. Most likely you will find
    support for your SCM already installed or available as a plugin for
    installation in the
    <option>Source Code Management</option>
    section of available plugins in the plugin management as displayed in<xref
      linkend="fig-scm-plugins"/>. Read more about available plugins and their
    management in
    <xref linkend="section-plugin-management-available"/>
    in
    <xref linkend="chapter-plugin-management"/>.
  </para>

  <figure id="fig-scm-plugins">
    <title>The beginning of the list of Source Code Management plugins</title>

    <mediaobject>
      <imageobject role="web">
        <imagedata contentdepth="100%" fileref="figs/web/scm-plugins.png"
                   scalefit="1"/>
      </imageobject>

      <imageobject role="print">
        <imagedata align="center" fileref="figs/print/scm-plugins.pdf"
                   scalefit="0" width="100%"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>By default Hudson has support for Git, Subversion and CVS pre-installed.
    This chapter will document usage of the respective Hudson plugins as well as
    the plugin supporting the popular open source SCM system Mercurial.
  </para>

  <para>Each of these plugins can be configured in the global Hudson
    configuration setting in its specific section added by the plugin.
  </para>

  <para>After the global settings for the desired source management system are
    configured, you can configure the project-specific settings. Simply load
    the
    project's configuration page and scroll down to the Source Code Management
    section. In this section, you must then select one of the radio buttons for
    the source code management system you are using as visible in
    <xref linkend="fig-scm-selection"/>
  </para>

  <figure id="fig-scm-selection">
    <title>Selecting an SCM in the project configuration</title>

    <mediaobject>
      <imageobject role="web">
        <imagedata contentdepth="100%" fileref="figs/web/scm-selection.png"
                   scalefit="1"/>
      </imageobject>

      <imageobject role="print">
        <imagedata align="center" fileref="figs/print/scm-selection.pdf"
                   scalefit="0" width="100%"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para>After this selection you will be able to configure the parameters
    specific to the selected SCM and the current project.
  </para>

  <section id="section-scm-svn">
    <title>Configuring Subversion</title>
    <para>The Subversion Plugin for Hudson and therefore support for the popular
      <ulink url="http://subversion.tigris.org/">Subversion SCM system</ulink>
      is part of the default install of Hudson. It is therefore not necessary to
      perform any further plugin installation to use Subversion for your
      project.
    </para>
    <section id="section-scm-svn-global">
      <title>Global Subversion Configuration</title>
      <para>In order to use Subversion successfully, you need to set up the
        global configuration in the Hudson Server configuration screen displayed
        in
        <xref linkend="fig-scm-svn-global-config"/>.
      </para>

      <figure id="fig-scm-svn-global-config">
        <title>Global Subversion Configuration</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-svn-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following parameters need to be configured as desired:</para>
      <variablelist>
        <varlistentry>
          <term>Subversion Workspace Version</term>
          <listitem>
            <para>Subversion uses different formats for storing data in a
              checked out location. Ideally you should have the same
              Subversion version installed on the SCM server as well as on
              the Hudson server and specify that version here. If your
              Hudson project tasks only require read access to the Subversion
              repository it is safe to use a higher version on the Hudson
              server and specify it here. However if you are automating a
              release process or any other tasks that will write to the
              Subversion repository e.g. by creating tags or branches or
              editing files and checking them in, you should make sure to
              use the same format on the Hudson server as on the Subversion
              server since mismatches can produce problems in the Subversion
              repository and potentially break expected behaviour. An
              important issue related to this setup is that you can not
              support different Subversion servers with different versions
              accessed from one Hudson instance. It is advisable to update
              the Subversion servers and Hudson installed clients before
              proceeding.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Subversion Revision Policy</term>
          <listitem>
            <para>The default revision policy is
              <varname>Queue Time</varname>, which will cause a build to be
              run
              off the revision present in the repository when the job is
              added to the Hudson build queue. The <varname>Build
                Time</varname> policy one the other hand will use the
              revision in the repository found when the build actually starts
              . The <varname>Head revision</varname> policy will use the HEAD
              revision in the repository. Finally these settings are
              overridden if a revision is specified in the subversion url or
              as a revision parameter in a parameterized build.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Exclusion revprop name</term>
          <listitem>
            <para>This parameter can be used to cause the plugin to exclude
              revisions with the specified revision property from triggering
              new builds. This is useful for builds that cause a commit so
              that this commit done by Hudson will not in turn trigger the
              execution of another build. The commits carried out by Hudson
              as part of the build have to be configured to use the same
              property.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Validate repository URLs up to the first variable name</term>
          <listitem>
            <para>With this setting activated subversion urls will only be
              validated up to the first variable. A variable in a url would
              be preceded by a <varname>$</varname> character.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

    </section>
    <section id="section-scm-svn-project">
      <title>Project-Specific Subversion Configuration</title>

      <para>Selecting Subversion under the Source Code Management section will
        display the configuration options shown in<xref
          linkend="fig-scm-svn-project-config" xrefstyle="select:label"/>.
        Clicking on the <option>Advanced</option> button will reveal the
        advanced configuration parameters shown in
        <xref linkend="fig-scm-svn-project-config-advanced"/>.
      </para>

      <figure id="fig-scm-svn-project-config">
        <title>Configuring project-specific Subversion settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-project-config.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-svn-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fig-scm-svn-project-config-advanced">
        <title>Configuring advanced project-specific Subversion settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-project-config-advanced.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-svn-project-config-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following parameters can be configured:
      </para>

      <variablelist>
        <varlistentry>
          <term>Modules</term>

          <listitem>
            <para>Hudson can check out one or more Subversion modules from a
              Subversion repository. To configure a repository location, supply
              a Subversion URL in the
              <option>Repository URL</option>
              text field. This field supports Subversion repository URLs
              including revisions specified with
              <varname>@number</varname>
              as well as subversion keywords for revisions and dates. The
              link <option>Update credentials</option> navigates you to the
              SVN authentication screen documented below.
            </para>
            <para>If you are checking out more than one Subversion module, you
              can also supply a
              <option>Local module directory</option>
              that Hudson will check out the specified module to. If you leave
              the Local module directory blank, Hudson will check out the
              specific module to the root of the project's workspace.
            </para>
            <para>The
              <option>Repository depth option</option>
              allows you to specify the depth for the checkout of this module,
              with the default being<varname>infinity</varname>, which means
              that all nested directories of the repository will be checked out.
              This is useful to limit the size and scope of your checkout.
            </para>
            <para>
              You can add a new module with the
              <option>Add more locations</option>
              button and remove it with the
              <option>Delete</option>
              button.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Check-out Strategy</term>
          <listitem>
            <para>The
              <option>Check-out Strategy</option>
              option determines the subversion commands issues prior to starting
              a build.
            </para>
            <para>The default value of
              <option>Use 'svn update' as much as possible</option>
              will cause the least load on the Subversion server by only issuing
              an update command on top of the existing checkout in the project
              workspace.
            </para>
            <para>The option
              <option>Use 'svn update' as much as possible, with 'svn revert'
                before update
              </option>
              will do minor cleanup of the workspace by reverting any local
              modifications.
            </para>
            <para>The option
              <option>Emulate clean checkout by first deleting
                unversioned/ignored files, then 'svn update'
              </option>
              provides a good compromise between performance and thoroughness,
              since it closely resembles a clean checkout without the
              performance and load implications for the Subversion server as
              well as Hudson.
            </para>
            <para>Finally the option
              <option>Always check out a fresh copy</option>
              will delete the workspace content and perform a fresh checkout
              for each build. Choosing this option should be considered
              carefully since it can put a significant load on the Subversion
              and Hudson servers.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Browser</term>

          <listitem>
            <para>Hudson supplies valuable information about a build and about
              the SCM activity and changes that contribute to a specific build.
              When Hudson displays information about a Subversion commit or a
              file that has been modified, it can be configured to link to a
              Repository browser, which provides a rich web view of the source
              code repository. Hudson supports the repository
              browsers
              <option>CollabNet</option>,
              <option>Sventon 2.x</option>,
              <option>ViewSVN</option>,
              <option>FishEye</option>,
              <option>WebSVN</option> and
              <option>Sventon 1.x</option> as options in the the drop-down.
              The <option>(Auto)</option> option will attempt to
              automatically detect the used browser.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>You can navigate to the<option>Subversion
        Authentication</option>
        screen by clicking the <option>Update credentials</option> link,
        which will display as visible in <xref
          linkend="fig-scm-svn-project-authentication"/>.
      </para>
      <figure id="fig-scm-svn-project-authentication">
        <title>Configuring subversion authentication
          Subversion
          settings</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-svn-project-authentication.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-svn-project-authentication.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The subversion plugin can be configured to use authentication with:
        <variablelist>
          <varlistentry>
            <term>User name/password authentication</term>
            <listitem>
              <para>Provide the user name and password in the supplied
                input fields.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SSH public key authentication (svn+ssh)</term>
            <listitem>
              <para>The <option>Private Key</option> control allows you
                to upload a key file for which you can provide the
                <option>User name</option>
                in the respective input field. If you key is encrypted with a
                password you need to add it in the <option>Pass phrase
                </option> input.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>HTTPS client certificate</term>
            <listitem>
              <para>For HTTPS based authentication you can upload a
                Public Key Cryptography 12 (PKCS12) file and provide a
                password in the provided controls.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        By default the above configuration will override any global
        configuration. This behaviour can be deactivated by selecting
        <option>no</option> in the <option>Override global
          credentials</option> option.
      </para>

      <para>Beyond these basic configuration options the Subversion plugin
        supports advanced options to provide more parameters to your
        Subversion commands used for the build.
      </para>
      <variablelist>
        <varlistentry>
          <term>Excluded Regions, Included Regions</term>

          <listitem>
            <para>These fields provide you with the
              option to either specifically include or exclude files and
              directories to determine if a build should be triggered. If
              <option>Included Regions</option> is
              set, Hudson will only trigger a build if a matching file has been
              altered. If
              <option>Excluded Regions</option>
              is set, Hudson will not trigger a build if a file matching an
              excluded pattern is matched. These options are useful if you are
              only interested in a subset of files and directories contained in
              a Subversion module to trigger a build on Hudson. An example would
              be if documentation files contained in the repository should not
              trigger a new build.
            </para>
            <para>Both parameters support usage of regular expression
              patterns to specify the desired files as well as multiple lines
            to configure larger sets of files and directories to match.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Excluded Users</term>

          <listitem>
            <para>If this field is populated and Hudson is configured to poll
              subversion as a build trigger, Hudson will not trigger builds
              for commits from the specified users. This can be used to avoid
              builds to be triggered by commits done by Hudson or other
              systems that commit changes that should not trigger a build.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Excluded Commit Messages</term>
          <listitem>
            <para>Similar to the option
              <option>Exclude users</option>
              this field contains a regular expression and will cause Hudson not
              to trigger a build for commits with a matching commit message.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Exclusion revprop name</term>

          <listitem>
            <para>A Subversion revision can be associated with a property. If
              Hudson encounters a revision with the specified property, it will
              not trigger a build from an SCM commit,
              similar to the behaviour for the options
              <option>Excluded Users</option> or
              <option>Excluded Commit Messages</option>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-svn-basic-config">
      <title>Minimal Basic SVN Configuration</title>
      <para>In order to build a project controlled in subversion you only
        need to configure the repository url in the project configuration
        using an url available for anonymous read access to the repository.
      </para>
    </section>
    <section id="section-scm-svn-advanced-config">
      <title>Tips and Tricks for Advanced SVN Configurations</title>
      <section>
        <title>Subversion related environment variables</title>
        <para>The subversion plugin exports the following environment
          variables for your usage in build scripts and others:</para>
        <variablelist>
          <varlistentry>
            <term>SVN_REVISION</term>
            <listitem>
              <para>The repository revision.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SVN_URL</term>
            <listitem>
              <para>The url used to access the repository.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>If multiple modules are defined these environment variables get
          and index appended in to their names and all revisions and urls of
          the modules will be exported as <code>SVN_REVISION_1</code>,
          <code>SVN_REVISION_2</code>, <code>SVN_REVISION_n</code> and
          <code>SVN_URL_1</code>, <code>SVN_URL_2</code>,
          <code>SVN_URL_n</code>.
        </para>
      </section>
    </section>
  </section>

  <section id="section-scm-git">
    <title>Configuring Git</title>
    <para>
      <ulink url="http://git-scm.com/">Git</ulink>
      is the most successful, modern distributed version control system and has
      gained wide acceptance in the open source community and beyond. and
      repository hosting services available from multiple suppliers for
      commercial and open source usage.
    </para>

    <!-- TODO add some links to external git related help and mention that
     we assume some git knowledge here-->
    <para>The Hudson Git Plugin and therefore support for Git is available in
      default Hudson installs from version 2.1 onwards. If it is not installed
      in your Hudson instance, simply find the plugin in the
      <option>Source Code Management</option>
      section of the available plugins and install it like any other plugins as
      documented in
      <xref linkend="chapter-plugin-management"/>.
    </para>
    <section id="section-scm-git-global">
      <title>Global Git Configuration</title>

      <para>The global configuration for using Git is set up in the Git section
        of the Hudson Server configuration screen as displayed in
        <xref linkend="fig-scm-git-global-config"/>.
      </para>

      <figure id="fig-scm-git-global-config">
        <title>Configuring Git Installations</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Name</term>
          <listitem>
            <para>A name for your Git installation can be specified to
              distinguish between multiple installs.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Path to git executable</term>
          <listitem>
            <para>If the git command is available on the operating system
              PATH or the PATH for the user running Hudson,
              you can simply specify <varname>git</varname>. Otherwise an
              absolute path can be used as well.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to using an already installed git, the Git plugin
        facilitates the tool installer from Hudson that allows
        <option>Run Command</option>
        and
        <option>Extract from *.zip/*.tar.gz</option>
        based installs similar to the JDK installs documented in details in
        <xref linkend="section-configure-jdk"/>. The Ant and the Maven plugins
        installers described in
        <xref linkend="section-configure-ant"/>
        and
        <xref linkend="section-configure-maven"/>
        use the same installers and you can find more hints of its usage there.
      </para>


      <para>A further global configuration for git can be done in the
        <option>Git plugin</option>
        section displayed in<xref linkend="fig-scm-git-global-user-config"/>.
        Specifying
        <option>Global Config user.name Value</option>
        and
        <option>Global Config user.email Value</option>
        values will cause the plugin to issue
        <command>git config</command>
        commands setting these options for each project that is configured to
        use git. The specific project configuration allows you to override these
        setting for each project individually.
      </para>
      <figure id="fig-scm-git-global-user-config">
        <title>Configuring Git user name and email values</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-global-user-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-global-user-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
    <section id="section-scm-git-project">
      <title>Project-specific Git Configuration</title>
      <para>Once you have configured Git in the global Hudson configuration you
        can configure project-specific Git settings. Selecting Git under the
        Source Code Management section of your project configuration will
        display the configuration options shown in
        <xref linkend="fig-scm-git-project-config"/>.
      </para>

      <figure id="fig-scm-git-project-config">
        <title>Basic Git source control information</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The section shown in
        <xref linkend="fig-scm-git-project-config"/>
        contains the following options for the basic configuration of git in
        your project configuration:
     </para>

      <variablelist>
        <varlistentry>
          <term>Repositories</term>
          <listitem>
            <para>Specifying one or more repositories to access for your
              project can be considered the main configuration of the git
              details for your project. The minimum configuration is to
              provide a valid value for <option>URL of repository</option>.
              The typical protocols
              <varname>http://</varname>, <varname>ssh://</varname> and
              <varname>git://</varname> are all supported. Advanced
              configuration as displayed in
              <xref linkend="fig-scm-git-project-config-repository"/> allows
              you to provide a name of the repository as well as a refspec.
              Providing multiple repositories only makes sense when they are
              clones or instances off the same repository,
              since they will be used for merging together the content prior
              to the build.
            </para>
          </listitem>
        </varlistentry>
         <varlistentry>
          <term>Branches to build</term>
          <listitem>
            <para>In this section you can specify one or more branches that
              should be built. The default of an empty branch specifier
              causes the git plugin to track all branches and build the
              latest changed branch. </para>
            <para>
              A common configuration would be to specify the
              main branch in the repository e.g. <varname>master</varname>.
              This would ensure that the build is only triggered for changes
              committed to master. If you want to have other branches
              built as well it is advisable to create separate Hudson
              projects for the different branches.
            </para>
            <para>The advanced usage of this feature would be to specify
              multiple branches. These branches would be used for a merge
              prior to a build and could be configured to push the merge
              result back to the remote repository after a successful build.
            </para>
          </listitem>
        </varlistentry>
         <varlistentry>
          <term>Repository browser</term>
          <listitem>
            <para>The default
              <option>Auto</option>
              option will cause the plugin to attempt to detect a web-based user
              interface to access the git repository. Selecting one of the
              supported repository browsers
              <option>gitweb</option>,
              <option>redmineweb</option>
              and
              <option>githubweb</option> lets you provide a base url to the
              repository browser. With the browser url specified the changes
              view of each build will have added links to the repository.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure id="fig-scm-git-project-config-repository">
        <title>Configuring repository specific Git configuration</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-config-repository.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-git-project-config-repository.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In many use cases you will be able to configure everything
        necessary with regards to git using the basic configuration options
        documented above. For more complex cases the plugin provides various
        advanced parameters as displayed in
        <xref linkend="fig-scm-git-project-config-advanced"/>,
        which become accessible by pressing the <option>Advanced</option>
        button and documented below.ex
      </para>
      <figure id="fig-scm-git-project-config-advanced">
        <title>Configuring advanced Git configuration</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-config-advanced.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-git-project-config-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Excluded Regions</term>
          <listitem>
            <para>This configuration allows you to specifically exclude files
              and directories to determine if a build should be triggered. If
              set, Hudson will not trigger a build if only files and directories
              matching the patterns have been changed. This option is useful if
              you are only interested in a subset of files and directories
              contained in a Git repository to trigger a build on Hudson. An
              example would be if documentation files contained in the
              repository should not trigger a new build.
            </para>
            <para>The configuration supports usage of regular expression
              patterns to specify the desired files as well as multiple lines to
              configure larger sets of files and directories to match.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Excluded Users</term>
          <listitem>
            <para>If this field is populated and Hudson is configured to poll
              git as a build trigger, Hudson will not trigger builds
              for commits from the specified users. This can be used to avoid
              builds to be triggered by commits done by Hudson or other
              systems that commit changes that should not trigger a build.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Checkout/merge to local branch (optional)</term>
          <listitem>
            <para>Supplying a value here causes git to create a local
            branch to checkout to. All the branches specified in the
            configuration above would be merged into that local branch.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Local subdirectory for repo (optional)</term>
          <listitem>
            <para>You can specify the name of the subdirectory to checkout a git
              project to. If you omit this subdirectory, the git repository will
              be checked out into the workspace directory.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Config user.name Value</term>
          <listitem>
            <para>This option allows you to cause git to set the
              <varname>user.name</varname>
              property prior to checkout and build. It overrides the global git
              configuration of the same property
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Config user.email Value</term>
          <listitem>
            <para>This option allows you to cause git to set the
              <varname>user.email</varname>
              property prior to checkout and build. It overrides the global git
              configuration of the same property
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Merge options</term>
          <listitem>
            <figure id="fig-scm-git-project-config-adv-merge">
              <title>Configuring Git merge options</title>
              <mediaobject>
                <imageobject role="web">
                  <imagedata contentdepth="100%"
                             fileref="figs/web/scm-git-project-config-adv-merge.png"
                             scalefit="1"/>
                </imageobject>
                <imageobject role="print">
                  <imagedata align="center"
                             fileref="figs/print/scm-git-project-config-adv-merge.pdf"
                             scalefit="0" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>When you activate the option <option>Merge before
              build</option> the configuration parameters displayed in
              <xref linkend="fig-scm-git-project-config-adv-merge"/> become
              accessible. This powerful option can be used to specify a
              repository to merge from in <option>Name of repository</option>
              . The content of the repository will be merged to the branch
              specified in <option>Branch to merge to</option> and if the
              operation succeeds the build will proceed. The merge can then
              be pushed back to the remote repository by configuring a Git
              publisher post build action as documented in
              <xref linkend="section-scm-git-project-publisher"/></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Prune remote branches before build</term>
          <listitem>
            <para>Selecting this option will cause the build to run the
              command <command>git remote prune</command> before each build
              . This is especially useful if remote branches are created and
              removed regularly allowing the local checkout in Hudson to stay
              in sync and only build the branches that alos exist remotely.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Skip internal tag</term>
          <listitem>
            <para>Selecting this option will cause Hudson to omit the tagging
              of the local repository after each checkout,
              which performed by default.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Clean after checkout</term>
          <listitem>
            <para>This option causes git to remove all untracked files after
              each checkout and prior to the build.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Recursively update submodules</term>
          <listitem>
            <para>With this option selected and a new enough Git version
              installed submodules will be updated as part of the update
              prior to building.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Use commit author in changelog</term>
          <listitem>
            <para>Selecting this option changes the display of the changelog
              to show the commits <varname>author</varname>,
              rather than the default <varname>committer</varname>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Wipe out workspace before build</term>
          <listitem>
            <para>This option will cause a complete wipe of the
              workspace prior to each build. Use caution when activating this
              option since it can have a significant impact on data transfer and
              time for the checkout and therefore build. For Maven projects it
              potentially wipes the local repository as well causing further
              increases in build time. The other options for keeping the
              workspace cleaned documented above are more advisable to be used
              in most cases.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Choosing strategy</term>
          <listitem>
            <para>This drop down will have only a <option>Default</option>
              option available with a default Hudson install. It determines
              which revision of the specified repositories and branches to
              build. For one branch and one repository HEAD will be built.
              For multiple branches and repositories a more refined strategy
              is used selecting revisions that have notG yet been built and
              are on the specified branches.</para>
            <para>Other plugins can implement a different choosing
              strategy e.g. the <ulink url="http://wiki.hudson-ci
              .org/display/HUDSON/Gerrit+Plugin">Gerrit Plugin</ulink>
              enables a Gerrit change set based strategy effectively allowing
              verified, pre-tested commits.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Git executable</term>
          <listitem>
            <para>This drop-down allows you to select a specific git
              executable used for all operations on this project's build.
              Configuration of the executables is documented in
              <xref linkend="section-scm-git-global"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-git-project-publisher">
      <title>Configuring the post-build action Git Publisher</title>
      <para>The git plugin adds the post build action
        <option>Git Publisher</option> as displayed in
        <xref linkend="fig-scm-git-project-pub"/> to the project-specific
        configuration. It can be used to push merges done prior to the
        build back out to a remote repository after a build.</para>
      <figure id="fig-scm-git-project-pub">
        <title>Configuring Git merge options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-pub.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-pub.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <variablelist>
        <varlistentry>
          <term>Push Only If Build Succeeds</term>
          <listitem>
            <para>Selecting this option will cause Hudson to skip publishing
              any changes via push if the build failed.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Merge Results</term>
          <listitem>
            <para>With this option activated Hudson will push any merge
              results done prior to the build back to the remote origin.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Tags</term>
          <listitem>
            <para>The <option>Add Tag</option> button allows you to
              configure one or more tags to push to and potentially create.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Branches</term>
          <listitem>
            <para>The
              <option>Add Branch</option>
              button allows you to configure one or more branch and remote
              combinations to push to.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>When configuring the Git Publisher you can specify Tags in
        fields displayed in <xref linkend="fig-scm-git-project-pub-tags"/>.
      </para>
      <figure id="fig-scm-git-project-pub-tags">
        <title>Configuring Git merge options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-pub-tags.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-pub-tags.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Tag to push</term>
          <listitem>
            <para>This input allows you to provide the name for the tag to
              use. It supports the expansion of environment variables as part
              of the tag name using the ${key} syntax. An example would be to
              use <varname>Hudson-Build-${BUILD_NUMBER}</varname> to create a
              tag called e.g. Hudson-Build-123. Read
              <xref linkend="section-configure-global-properties"/> for more
              information about defining properties and available predefined
              ones.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Create new tag</term>
          <listitem>
            <para>This checkbox determines if the tag to push to as
              provided above should be created as a new tag or be used
              as an existing tag.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Target remote name</term>
          <listitem>
            <para>The name of the remote to push the tag to. The name needs
              to be configured as a repository in the SCM setion for this
              project.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Configuring branches to push to is done in the user
        interface displayed in <xref
          linkend="fig-scm-git-project-pub-branches"/>.
      </para>
      <figure id="fig-scm-git-project-pub-branches">
        <title>Configuring Git merge options</title>
        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-git-project-pub-branches.png" scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-git-project-pub-branches.pdf" scalefit="0"
                       width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Branch to push</term>
          <listitem>
            <para>This parameter specifies the branch the changes get push to
              after the build completes.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Target remote name</term>
          <listitem>
            <para>The <option>Target remote name</option> specifies the
              remote repository to which a push will be done and needs to be
            one of the names configured as a repository in the SCM sectio
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-git-basic-config">
      <title>Minimal Basic Git Configuration</title>
      <para>In order to build a project controlled in git you need to have
        a git installation configured in the global configuration.
      </para>
      <para>In terms of project specific configuration you only need to specify
        the public url of the repository. We recommend to specify the branch to
        build as well since the default setup without a branch specified will
        examine all branches in the repository and build the latest changed
        branch. In a normal project this might adversely affect the stability of
        the build and potentially cause a confusing history for the project. We
        suggest to set up separate projects for each branch you want to track
        and build on Hudson.
      </para>

    </section>
    <section id="section-scm-git-advanced-config">
      <title>Tips and Tricks for Advanced Git Configurations</title>
      <section>
        <title>Multiple branches and automated merging</title>
        <para>The recommended basic usage with the git plugin is to configure
        the project branch for the build e.g. <code>master</code>. However
          per default no branch is configured. This causes all branches to be
          monitored for changes and the branch with the last branch to be
          built.</para>
        <para>Without further configuration this is not really that useful
          since it will cause your project build history to be comprised of
          builds from all the different branches individually in the order of
          changes received and potentially even omit builds if changes hit
          multiple branches between builds.
        </para>
        <para>However together with configuring <option>Merge
          Options</option> it allows for a automated merge from
          whichever branch to have the latest changes to the target branch e
          .g. <code>master</code> and proceed with the build after the merge.
        </para>
        <para>Now you can activate the <option>Git Publisher</option>
          post-build action <option>Push Only If Build Succeeds</option> and
          <option>Merge Results</option> to have the remote repository
          updated with the successful merge results.
        </para>
        <para>This approach can be configured with specific branches
          rather than the default empty specification of branches to have
          better control of the source branches to merge from. It can also be
          combined with multiple repositories to pull changes in from.
        </para>
      </section>
    </section>
  </section>

  <section id="section-scm-hg">
    <title>Configuring Mercurial</title>
    <para>
      <ulink url="http://mercurial.selenic.com/">Mercurial</ulink>, also known
      as hg, is a successful, modern distributed version control system and has
      gained wide acceptance in the open source community and beyond used for
      large projects like OpenJDK and Netbeans and repository hosting
      services available from multiple suppliers for commercial and open
      source usage.
    </para>

    <para>The Hudson Mercurial Plugin and therefore support for Mercurial needs
      to be installed on your Hudson instance. Simply find the plugin in the
      <option>Source Code Management</option>
      section of the available plugins and install it like any other plugins as
      documented in
      <xref linkend="chapter-plugin-management"/>.
    </para>

    <section id="section-scm-hg-global">
      <title>Global Mercurial Configuration</title>

      <para>To configure Mercurial, find the Mercurial section in the Hudson
        Server configuration screen as displayed in
        <xref linkend="fig-scm-hg-global-config"/>, press the
        <option>Add</option>
        and configure the parameters for your Mercurial install. If Mercurial
        is already installed on your Hudson server and the <command>hg</command>
        is available on the path, you do not need to configure a Mercurial
        installation. The plugin will pick up the installed version.
      </para>

      <figure id="fig-scm-hg-global-config">
        <title>Configuring Mercurial Installations</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-hg-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-hg-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Name</term>
          <listitem>
            <para>The <option>Name</option> will be displayed in the drop
              down to select your Mercurial install in the project
              configuration. Use a name that includes the version to be able
              to identify the Mercurial install you desire to use in the
              project configuration, especially when using multiple installs.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Installation directory</term>
          <listitem>
            <para>Specify the absolute path to the Mercurial installation
              .</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Executable</term>
          <listitem>
            <para>This is the path to the actual <varname>hg</varname>
              executable. The field is prefilled with
              <varname>INSTALLTION/bin/hg</varname>,
              which is the correct value if you use a manual install of hg.
              If you
              are using binary package as provided by your operating system
              package management system the correct value is likely just
              <varname>hg</varname>, since the command would be on the
              <varname>PATH</varname>. Another common option is the absolute
              path of the executable e.g. <varname>/usr/bin/hg</varname>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Use Repository Caches</term>
          <listitem>
            <para>Enabling this option triggers the Mercurial plugin to
              establish a repository cache on the Hudson master that will be
              used by the slave nodes as well. This considerably improves
              performance and reduces load on the Mercurial server.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Debug Flag</term>
          <listitem>
            <para>As the name suggest activating this option,
              triggers debug output of any Mercurial command execution. This
              is especially useful for trouble shooting your configuration.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Download Forest extension</term>
          <listitem>
            <para>Using one of the suggested values in the online help for
              this option you can get the forest extension to work with
              multiple repositories installed automatically. This is
              especially useful if you can not easily install the extension
             with the same mechanism you installed Mercurial itself e.g. if
              no native package for the extension is available.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>In addition the Mercurial plugin facilitates the tool installer from
        Hudson that allows
        <option>Run Command</option>
        and
        <option>Extract from *.zip/*.tar.gz</option>
        based installs similar to the JDK installs documented in details in
        <xref linkend="section-configure-jdk"/>. The Ant and the Maven plugins
        installers described in
        <xref linkend="section-configure-ant"/>
        and
        <xref linkend="section-configure-maven"/>
        use the same installers and you can find more hints of its usage there.
      </para>
    </section>
    <section id="section-scm-hg-project">
      <title>Project-specific Mercurial Configuration</title>
      <para>Selecting Mercurial under the Source Code Management section will
        display the configuration options shown in<xref
          linkend="fig-scm-hg-project-config"/>.
      </para>

      <figure id="fig-scm-hg-project-config">
        <title>Configuring Mercurial Source Control Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-hg-project-config.png" scalefit="1"/>
          </imageobject>

          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-hg-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The section show in
        <xref linkend="fig-scm-hg-project-config" xrefstyle="select:label"/>
        contains the following options:
      </para>

      <variablelist>
        <varlistentry>
          <term>Mercurial Version</term>
          <listitem>
            <para>This drop down lets you choose from the configured
              Mercurial installations. In most cases the
              <option>Default</option> will be fine.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository URL</term>
          <listitem>
            <para>Specify the URL of the project to build.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Branch</term>
          <listitem>
            <para>By default a branch named <varname>default</varname> will
              be checked out for the project build. This input allows you to
              specify and therefore build any other branch.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Modules</term>
          <listitem>
            <para>The advanced setting <option>Modules</option> allows you to
              specify a folder and its contents, known as module,  within the
              repository to
              be
              the
              exclusive source for changes triggering a build.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Clean Build</term>
          <listitem>
            <para>Activating the <option>Clean Build</option> option causes
              Mercurial to remove any untracked files prior to the build.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Subdirectory</term>
          <listitem>
            <para>By default the repository is checked out into the workspace
              . Supplying a value in the
              <option>Subdirectory</option> option will cause the repository
              to be checked out into a subdirectory in the workspace.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Advanced - Forest Extension</term>
          <listitem>
            <para>This experimental features triggers the activation of
              the Mercurial forest extension, which will treat the
              workspace as the root of a forest.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository Browser</term>
          <listitem>
            <para>para>The default
              <option>Auto</option>
              option will cause the plugin to attempt to detect a web-based user
              interface to access the Mercurial repository. Selecting one of
              the
              supported repository browsers
              <option>hgweb</option>,
              <option>bitbucket</option>,
              <option>googlecode</option>,
              <option>kilnhg</option>
              and
              <option>fisheye</option> lets you provide a <option>
              URL</option> to the
              repository browser. With the URL specified the changes
              view of each build will have added links to the repository.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-hg-basic-config">
      <title>Minimal Basic Mercurial Configuration</title>
      <para>In order to build a project controlled in Mercurial you need to
        install the Mercurial plugin and have a hg installation configured in
        the global configuration.
      </para>
      <para>In terms of project specific configuration you only need to specify
        the public url of the repository.
      </para>
    </section>
    <!--<section id="section-scm-hg-advanced-config">-->
      <!--<title>Tips and Tricks for Advanced Mercurial Configurations</title>-->
      <!-- TODO this should be added in one way or another
      http://stackoverflow.com/questions/6558542/how-to-clone-a-googlecode-mercurial-repository-in-jenkins
      -->
    <!--</section>-->
  </section>

  <section id="section-scm-cvs">
    <title>Configuring CVS</title>
     <para>The Hudson CVS Plugin  and support for the
      <ulink url="http://cvs.nongnu.org/">CVS system</ulink>
      is part of the default install of Hudson. It is therefore not necessary to
      perform any further plugin installation to use CVS for your
      project.
    </para><section id="section-scm-cvs-global">
      <title>Global CVS Configuration</title>
      <para>To configure CVS, find the CVS section in the Hudson Server
        configuration screen as displayed in
        <xref linkend="fig-scm-cvs-global-config"/>, press the
        <option>Add</option>
        and configure the parameters for your CVS install. If CVS
        is already installed on your Hudson server and the
        <command>cvs</command>
        is available on the path, you do not need to configure a CVS
        installation. The plugin will pick up the installed version.
      </para>

      <figure id="fig-scm-cvs-global-config">
        <title>Global CVS Configuration</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-cvs-global-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-cvs-global-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The following parameters need to be configured as desired:</para>
      <variablelist>
        <varlistentry>
          <term>cvs executable</term>
          <listitem>
            <para>If the cvs executable can not be found on the
              <option>PATH</option>, you can configure an absolute path to it
              in this input field.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>.cvspass file</term>
          <listitem>
            <para>Specify the path to the .cvspass file that contains
              the user credentials.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Disable CVS compression</term>
          <listitem>
            <para>Activate this option to disable CVS compression.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-cvs-projectf">
      <title>Project-specific CVS Configuration</title>

      <para>Selecting CVS under the Source Code Management section will display
        the configuration options shown in
        <xref linkend="fig-scm-cvs-project-config"/>.
      </para>

      <figure id="fig-scm-cvs-project-config">
        <title>Configuring CVS Source Control Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-cvs-project-config.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center" fileref="figs/print/scm-cvs-project-config.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure id="fig-scm-cvs-project-config-advanced">
        <title>Configuring CVS Source Control Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/scm-cvs-project-config-advanced.png"
                       scalefit="1"/>
          </imageobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/scm-cvs-project-config-advanced.pdf"
                       scalefit="0" width="100%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The section show in
        <xref linkend="fig-scm-cvs-project-config" xrefstyle="select:label"/>
        and
        <xref linkend="fig-scm-cvs-project-config-advanced" xrefstyle="select:label"/>
        contain the following options:
      </para>

      <variablelist>
        <varlistentry>
          <term>CVSROOT</term>
          <listitem>
            <para>This is the CVSROOT parameter for your source. You would enter
              in the same information here that you would use if you were
              checking out source code use the CVS client. </para>
            <para>The format for the URL is
              <screen>
                <code>[[:protocol:][[user][:password]]][@servername][:serverpath]</code>
              </screen>
              with the parameters:
              <variablelist>
                <varlistentry>
                  <term>:protocol:</term>
                  <listitem>
                    <para>The protocol defines the way the CVS client
                      communicates to the repository and the protocol name has
                      to be enclosed in<code>:</code>. Supported protocols are
                      <code>:local:</code>
                      for local or net file system level connection,
                      <code>:pserver:</code>
                      as the standard unsecured protocol,
                      <code>:ext:</code>, <code>:ssh:</code>
                      and
                      <code>:extssh:</code>
                      for secure shell based connections and
                      <code>:sspi:</code>
                      for Windows based access. Depending on your CVS client and
                      server installs other protocols are supported as well.
                    </para>
                    <para>In general and specifically with Hudson due to its
                      nature as an additional user for CVS we recommend not to
                      use the local protocol, since it can cause problems if too
                      many users will try to access it.
                    </para>
                    <para>When using the pserver protocol on the public internet
                      you have to keep in mind that it is an insecure protocol
                      and passwords and data can be sniffed theoretically.
                      Replace it with using the ssh based protocols, when
                      security is required.
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>user</term>
                  <listitem>
                    <para>Supply the user name for the client-server protocol
                      used.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>:password</term>
                  <listitem>
                    <para>Specify the password when using the
                      <code>:pserver:</code> or
                      <code>:sspi:</code> protocol.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>@servername</term>
                  <listitem>
                    <para>The server name of the repository server as
                      reachable via the network. It can be a fully qualified
                      server and domain name, a server name only or an IP
                      number. The character <code>@</code> is required at the
                      beginning of the server name.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>:serverpath</term>
                  <listitem>
                    <para>The path to the repository on the server prepended
                      by <code>:</code>. The path itself can be either unix
                      style like <code>/opt/data/cvsrepo</code> or Windows
                      style like <code>C:\cvs\repository</code>.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
              An example for a valid url is
              <screen>
                <command>:pserver:anonymous@tortoisecvs.cvs.sourceforge.net:/cvsroot/tortoisecvs</command>
              </screen>
              with a module defined.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Module(s) and Branch</term>
          <listitem>
            <para>Here you can provide specific modules and specific branches to
              be checked out by Hudson. Multiple module can be specified
              using a space separated list and with a parameterized build job
              parameters can be used to specify branch or module.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>CVS_RSH</term>
          <listitem>
            <para>If you are using CVS over SSH, you can specify options and
              parameters in this variable.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Use update</term>
          <listitem>
            <para>Hudson can be configured to do a full checkout on each build
              or to use cvs update. Selecting this option will tell Hudson to
              use update instead of performing a clean checkout. For most
              reasonably sized projects you should activate this option.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Repository browser</term>
          <listitem>
            <para>The default
              <option>Auto</option>
              option will cause the plugin to attempt to detect a web-based user
              interface to access the CVS repository. Selecting one of the
              supported repository browsers
              <option>ViewCVS</option>
              and
              <option>FishEye</option>
              lets you provide a
              <option>URL</option>
              to the repository browser.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Excluded Regions</term>
          <listitem>
            <para>If the module you are checking out contains some files that
              you need to exclude from triggering a build when changed, you can
              exclude regions by populating this field with the respective
              patterns.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section id="section-scm-cvs-basic-config">
      <title>Minimal Basic CVS Configuration</title>
      <para>In order to build a project controlled in CVS you need to have
        CVS available on the PATH on the Hudson server or have the path
        configured in the global configuration. For the project specific
        settings configure the repository url and a module.
      </para>
    </section>
    <!--<section id="section-scm-cvs-advanced-config">-->
      <!--<title>Tips and Tricks for Advanced CVS Configurations</title>-->
    <!--</section>-->

  </section>
</chapter>
